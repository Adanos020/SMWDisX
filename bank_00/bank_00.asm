ResetStart:           SEI                                 ;; ?QPWZ? : 78          ; Disable interrupts 
CODE_008001:          STZ.W $4200                         ;; 008001 : 9C 00 42    ; Clear NMI and V/H Count, disable joypad ; NMI, V/H Count, and Joypad Enable
CODE_008004:          STZ.W $420C                         ;; 008004 : 9C 0C 42    ; Disable HDMA ; H-DMA Channel Enable
CODE_008007:          STZ.W $420B                         ;; 008007 : 9C 0B 42    ; Disable DMA ; Regular DMA Channel Enable
CODE_00800A:          STZ.W $2140                         ;; 00800A : 9C 40 21    ; \ ; APU I/O Port
CODE_00800D:          STZ.W $2141                         ;; 00800D : 9C 41 21    ;  |Clear APU I/O ports 1-4 ; APU I/O Port
CODE_008010:          STZ.W $2142                         ;; 008010 : 9C 42 21    ;  | ; APU I/O Port
CODE_008013:          STZ.W $2143                         ;; 008013 : 9C 43 21    ; / ; APU I/O Port
CODE_008016:          LDA.B #$80                          ;; 008016 : A9 80       ; \ Turn off screen 
CODE_008018:          STA.W $2100                         ;; 008018 : 8D 00 21    ; / ; Screen Display Register
CODE_00801B:          CLC                                 ;; 00801B : 18          ; \ Turn off emulation mode 
CODE_00801C:          XCE                                 ;; 00801C : FB          ; /  
CODE_00801D:          REP #$38                            ;; 00801D : C2 38       ; 16 bit A,X,Y, Decimal mode off ; Index (16 bit) Accum (16 bit) 
CODE_00801F:          LDA.W #$0000                        ;; 00801F : A9 00 00    ; \ Set direct page 
CODE_008022:          TCD                                 ;; 008022 : 5B          ; /  
CODE_008023:          LDA.W #$01FF                        ;; 008023 : A9 FF 01    ; \ Set stack location 
CODE_008026:          TCS                                 ;; 008026 : 1B          ; /  
CODE_008027:          LDA.W #$F0A9                        ;; 008027 : A9 A9 F0    ; \  
CODE_00802A:          STA.L RAM_7F8000                    ;; 00802A : 8F 00 80 7F ;  | 
CODE_00802E:          LDX.W #$017D                        ;; 00802E : A2 7D 01    ;  | 
CODE_008031:          LDY.W #$03FD                        ;; 008031 : A0 FD 03    ;  | 
CODE_008034:          LDA.W #$008D                        ;; 008034 : A9 8D 00    ;  | 
CODE_008037:          STA.L RAM_7F8002,X                  ;; 008037 : 9F 02 80 7F ;  | 
CODE_00803B:          TYA                                 ;; 00803B : 98          ;  | 
CODE_00803C:          STA.L $7F8003,X                     ;; 00803C : 9F 03 80 7F ;  |Create routine in RAM 
CODE_008040:          SEC                                 ;; 008040 : 38          ;  | 
CODE_008041:          SBC.W #$0004                        ;; 008041 : E9 04 00    ;  | 
CODE_008044:          TAY                                 ;; 008044 : A8          ;  | 
CODE_008045:          DEX                                 ;; 008045 : CA          ;  | 
CODE_008046:          DEX                                 ;; 008046 : CA          ;  | 
CODE_008047:          DEX                                 ;; 008047 : CA          ;  | 
CODE_008048:          BPL CODE_008034                     ;; 008048 : 10 EA       ;  | 
CODE_00804A:          SEP #$30                            ;; 00804A : E2 30       ;  | ; Index (8 bit) Accum (8 bit) 
CODE_00804C:          LDA.B #$6B                          ;; 00804C : A9 6B       ;  | 
CODE_00804E:          STA.L RAM_7F8182                    ;; 00804E : 8F 82 81 7F ; / 
CODE_008052:          JSR.W UploadSPCEngine               ;; 008052 : 20 E8 80    ; SPC700 Bank 02 + Main code upload handler 
CODE_008055:          STZ.W RAM_GameMode                  ;; 008055 : 9C 00 01    ; Set game mode to 0 
CODE_008058:          STZ.W $0109                         ;; 008058 : 9C 09 01    ; Set secondary game mode to 0 
CODE_00805B:          JSR.W ClearStack                    ;; 00805B : 20 4E 8A    ;
CODE_00805E:          JSR.W UploadSamples                 ;; 00805E : 20 FD 80    ;
CODE_008061:          JSR.W CODE_009250                   ;; 008061 : 20 50 92    ;
CODE_008064:          LDA.B #$03                          ;; 008064 : A9 03       ; \ Set OAM Size and Data Area Designation to x03 
CODE_008066:          STA.W $2101                         ;; 008066 : 8D 01 21    ; /  ; OAM Size and Data Area Designation
CODE_008069:          INC $10                             ;; 008069 : E6 10       ; Skip the following loop 
CODE_00806B:          LDA $10                             ;; 00806B : A5 10       ;  |Loop until the interrupt routine sets $10 
CODE_00806D:          BEQ CODE_00806B                     ;; 00806D : F0 FC       ; / to a non-zero value. 
CODE_00806F:          CLI                                 ;; 00806F : 58          ; Enable interrupts 
CODE_008070:          INC RAM_FrameCounter                ;; 008070 : E6 13       ; Increase frame number 
CODE_008072:          JSR.W GetGameMode                   ;; 008072 : 20 22 93    ; The actual game 
CODE_008075:          STZ $10                             ;; 008075 : 64 10       ; \ Wait for interrupt 
CODE_008077:          BRA CODE_00806B                     ;; 008077 : 80 F2       ; /  
                                                          ;;                      ;
SPC700UploadLoop:     PHP                                 ;; ?QPWZ? : 08          ;
CODE_00807A:          REP #$30                            ;; 00807A : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00807C:          LDY.W #$0000                        ;; 00807C : A0 00 00    ;
CODE_00807F:          LDA.W #$BBAA                        ;; 00807F : A9 AA BB    ;
CODE_008082:          CMP.W $2140                         ;; 008082 : CD 40 21    ; APU I/O Port
CODE_008085:          BNE CODE_008082                     ;; 008085 : D0 FB       ;
CODE_008087:          SEP #$20                            ;; 008087 : E2 20       ; Accum (8 bit) 
CODE_008089:          LDA.B #$CC                          ;; 008089 : A9 CC       ; Load byte to start transfer 
CODE_00808B:          BRA CODE_0080B3                     ;; 00808B : 80 26       ;
                                                          ;;                      ;
CODE_00808D:          LDA [$00],Y                         ;; 00808D : B7 00       ;
CODE_00808F:          INY                                 ;; 00808F : C8          ;
CODE_008090:          XBA                                 ;; 008090 : EB          ;
CODE_008091:          LDA.B #$00                          ;; 008091 : A9 00       ;
CODE_008093:          BRA CODE_0080A0                     ;; 008093 : 80 0B       ;
                                                          ;;                      ;
CODE_008095:          XBA                                 ;; 008095 : EB          ;
CODE_008096:          LDA [$00],Y                         ;; 008096 : B7 00       ;
CODE_008098:          INY                                 ;; 008098 : C8          ;
CODE_008099:          XBA                                 ;; 008099 : EB          ;
CODE_00809A:          CMP.W $2140                         ;; 00809A : CD 40 21    ; APU I/O Port
CODE_00809D:          BNE CODE_00809A                     ;; 00809D : D0 FB       ;
CODE_00809F:          INC A                               ;; 00809F : 1A          ;
CODE_0080A0:          REP #$20                            ;; 0080A0 : C2 20       ; Accum (16 bit) 
CODE_0080A2:          STA.W $2140                         ;; 0080A2 : 8D 40 21    ; APU I/O Port
CODE_0080A5:          SEP #$20                            ;; 0080A5 : E2 20       ; Accum (8 bit) 
CODE_0080A7:          DEX                                 ;; 0080A7 : CA          ;
CODE_0080A8:          BNE CODE_008095                     ;; 0080A8 : D0 EB       ;
CODE_0080AA:          CMP.W $2140                         ;; 0080AA : CD 40 21    ; APU I/O Port
CODE_0080AD:          BNE CODE_0080AA                     ;; 0080AD : D0 FB       ;
CODE_0080AF:          ADC.B #$03                          ;; 0080AF : 69 03       ;
CODE_0080B1:          BEQ CODE_0080AF                     ;; 0080B1 : F0 FC       ;
CODE_0080B3:          PHA                                 ;; 0080B3 : 48          ;
CODE_0080B4:          REP #$20                            ;; 0080B4 : C2 20       ; Accum (16 bit) 
CODE_0080B6:          LDA [$00],Y                         ;; 0080B6 : B7 00       ;
CODE_0080B8:          INY                                 ;; 0080B8 : C8          ;
CODE_0080B9:          INY                                 ;; 0080B9 : C8          ;
CODE_0080BA:          TAX                                 ;; 0080BA : AA          ;
CODE_0080BB:          LDA [$00],Y                         ;; 0080BB : B7 00       ;
CODE_0080BD:          INY                                 ;; 0080BD : C8          ;
CODE_0080BE:          INY                                 ;; 0080BE : C8          ;
CODE_0080BF:          STA.W $2142                         ;; 0080BF : 8D 42 21    ; APU I/O Port
CODE_0080C2:          SEP #$20                            ;; 0080C2 : E2 20       ; Accum (8 bit) 
CODE_0080C4:          CPX.W #$0001                        ;; 0080C4 : E0 01 00    ;
CODE_0080C7:          LDA.B #$00                          ;; 0080C7 : A9 00       ;
CODE_0080C9:          ROL                                 ;; 0080C9 : 2A          ;
CODE_0080CA:          STA.W $2141                         ;; 0080CA : 8D 41 21    ; APU I/O Port
CODE_0080CD:          ADC.B #$7F                          ;; 0080CD : 69 7F       ;
CODE_0080CF:          PLA                                 ;; 0080CF : 68          ;
CODE_0080D0:          STA.W $2140                         ;; 0080D0 : 8D 40 21    ; APU I/O Port
CODE_0080D3:          CMP.W $2140                         ;; 0080D3 : CD 40 21    ; APU I/O Port
CODE_0080D6:          BNE CODE_0080D3                     ;; 0080D6 : D0 FB       ;
CODE_0080D8:          BVS CODE_00808D                     ;; 0080D8 : 70 B3       ;
CODE_0080DA:          STZ.W $2140                         ;; 0080DA : 9C 40 21    ; APU I/O Port
CODE_0080DD:          STZ.W $2141                         ;; 0080DD : 9C 41 21    ; APU I/O Port
CODE_0080E0:          STZ.W $2142                         ;; 0080E0 : 9C 42 21    ; APU I/O Port
CODE_0080E3:          STZ.W $2143                         ;; 0080E3 : 9C 43 21    ; APU I/O Port
CODE_0080E6:          PLP                                 ;; 0080E6 : 28          ;
CODE_0080E7:          RTS                                 ;; 0080E7 : 60          ;
                                                          ;;                      ;
UploadSPCEngine:      LDA.B #$00                          ;; ?QPWZ? : A9 00       ; \ this address (0E:8000) is the start of the SPC engine 
CODE_0080EA:          STA.W $0000                         ;; 0080EA : 8D 00 00    ;  | instrument settings/sound effect data 
CODE_0080ED:          LDA.B #$80                          ;; 0080ED : A9 80       ;  | AND the code used for all music banks. 
CODE_0080EF:          STA.W $0001                         ;; 0080EF : 8D 01 00    ;  | 
CODE_0080F2:          LDA.B #$0E                          ;; 0080F2 : A9 0E       ;  | 
CODE_0080F4:          STA.W $0002                         ;; 0080F4 : 8D 02 00    ; /  
UploadDataToSPC:      SEI                                 ;; ?QPWZ? : 78          ;
CODE_0080F8:          JSR.W SPC700UploadLoop              ;; 0080F8 : 20 79 80    ;
CODE_0080FB:          CLI                                 ;; 0080FB : 58          ;
Return0080FC:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
UploadSamples:        LDA.B #$00                          ;; ?QPWZ? : A9 00       ; \    Index (8 bit) ; Index (8 bit) 
CODE_0080FF:          STA.W $0000                         ;; 0080FF : 8D 00 00    ;  | 
CODE_008102:          LDA.B #$80                          ;; 008102 : A9 80       ;  |Loads The Address 0F:8000 to 00-02 	(SAMPLE DATA + PTRS)
CODE_008104:          STA.W $0001                         ;; 008104 : 8D 01 00    ;  |[SPC Sample Pointers/Data ROM Address, this is] 
CODE_008107:          LDA.B #$0F                          ;; 008107 : A9 0F       ;  | 
CODE_008109:          STA.W $0002                         ;; 008109 : 8D 02 00    ; /  
CODE_00810C:          BRA StrtSPCMscUpld                  ;; 00810C : 80 0F       ;
                                                          ;;                      ;
UploadMusicBank1:     LDA.B #$B1                          ;; ?QPWZ? : A9 B1       ; \ 
CODE_008110:          STA.W $0000                         ;; 008110 : 8D 00 00    ;  | 
CODE_008113:          LDA.B #$98                          ;; 008113 : A9 98       ;  |Loads the Bank 1 music data (Map) to 00-02 
CODE_008115:          STA.W $0001                         ;; 008115 : 8D 01 00    ;  | ($0E:98B1) 
CODE_008118:          LDA.B #$0E                          ;; 008118 : A9 0E       ;  | 
CODE_00811A:          STA.W $0002                         ;; 00811A : 8D 02 00    ; /  
StrtSPCMscUpld:       LDA.B #$FF                          ;; ?QPWZ? : A9 FF       ;
CODE_00811F:          STA.W $2141                         ;; 00811F : 8D 41 21    ; APU I/O Port
CODE_008122:          JSR.W UploadDataToSPC               ;; 008122 : 20 F7 80    ;
CODE_008125:          LDX.B #$03                          ;; 008125 : A2 03       ;
SPC700ZeroLoop:       STZ.W $2140,X                       ;; ?QPWZ? : 9E 40 21    ;
CODE_00812A:          STZ.W $1DF9,X                       ;; 00812A : 9E F9 1D    ;
CODE_00812D:          STZ.W $1DFD,X                       ;; 00812D : 9E FD 1D    ;
CODE_008130:          DEX                                 ;; 008130 : CA          ;
CODE_008131:          BPL SPC700ZeroLoop                  ;; 008131 : 10 F4       ;
Return008133:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_008134:          LDA.W $1425                         ;; 008134 : AD 25 14    ;
CODE_008137:          BNE UploadMusicBank2                ;; 008137 : D0 0F       ;
CODE_008139:          LDA.W $0109                         ;; 008139 : AD 09 01    ;
CODE_00813C:          CMP.B #$E9                          ;; 00813C : C9 E9       ;
CODE_00813E:          BEQ UploadMusicBank2                ;; 00813E : F0 08       ;
CODE_008140:          ORA.W $141A                         ;; 008140 : 0D 1A 14    ;
CODE_008143:          ORA.W $141D                         ;; 008143 : 0D 1D 14    ;
CODE_008146:          BNE Return008133                    ;; 008146 : D0 EB       ;
UploadMusicBank2:     LDA.B #$D6                          ;; ?QPWZ? : A9 D6       ; \ 
CODE_00814A:          STA.W $0000                         ;; 00814A : 8D 00 00    ;  |Loads the Bank 2 music address(Levels) 
CODE_00814D:          LDA.B #$AE                          ;; 00814D : A9 AE       ;  | (0E:AED6) 
CODE_00814F:          STA.W $0001                         ;; 00814F : 8D 01 00    ;  | 
CODE_008152:          LDA.B #$0E                          ;; 008152 : A9 0E       ;  | 
CODE_008154:          STA.W $0002                         ;; 008154 : 8D 02 00    ; / 
CODE_008157:          BRA StrtSPCMscUpld                  ;; 008157 : 80 C4       ;
                                                          ;;                      ;
UploadMusicBank3:     LDA.B #$00                          ;; ?QPWZ? : A9 00       ; \ 
CODE_00815B:          STA.W $0000                         ;; 00815B : 8D 00 00    ;  |Bank 3 music(Ending) ROM address 
CODE_00815E:          LDA.B #$E4                          ;; 00815E : A9 E4       ;  | 
CODE_008160:          STA.W $0001                         ;; 008160 : 8D 01 00    ;  | ($03:E400) 
CODE_008163:          LDA.B #$03                          ;; 008163 : A9 03       ;  | 
CODE_008165:          STA.W $0002                         ;; 008165 : 8D 02 00    ; / 
CODE_008168:          BRA StrtSPCMscUpld                  ;; 008168 : 80 B3       ;
                                                          ;;                      ;
                                                          ;;                      ;
NMIStart:             SEI                                 ;; ?QPWZ? : 78          ; Looks like this might be the NMI routine here. That is correct. 
CODE_00816B:          PHP                                 ;; 00816B : 08          ; I thought it was, just from the address, but I wasn't too sure. 
CODE_00816C:          REP #$30                            ;; 00816C : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00816E:          PHA                                 ;; 00816E : 48          ;
CODE_00816F:          PHX                                 ;; 00816F : DA          ;
CODE_008170:          PHY                                 ;; 008170 : 5A          ;
CODE_008171:          PHB                                 ;; 008171 : 8B          ;
CODE_008172:          PHK                                 ;; 008172 : 4B          ;
CODE_008173:          PLB                                 ;; 008173 : AB          ;
CODE_008174:          SEP #$30                            ;; 008174 : E2 30       ; 8 bit A,X,Y ; Index (8 bit) Accum (8 bit) 
CODE_008176:          LDA.W $4210                         ;; 008176 : AD 10 42    ; Load "NMI Enable."  This has the effect of clearing the Interrupt, so that ; NMI Enable
CODE_008179:          LDA.W $1DFB                         ;; 008179 : AD FB 1D    ; \  
CODE_00817C:          BNE CODE_008186                     ;; 00817C : D0 08       ;  | 
CODE_00817E:          LDY.W $2142                         ;; 00817E : AC 42 21    ;  | ; APU I/O Port
CODE_008181:          CPY.W $1DFF                         ;; 008181 : CC FF 1D    ;  |Update SPC700 I/O port 2 
CODE_008184:          BNE CODE_00818F                     ;; 008184 : D0 09       ;  | 
CODE_008186:          STA.W $2142                         ;; 008186 : 8D 42 21    ;  | ; APU I/O Port
CODE_008189:          STA.W $1DFF                         ;; 008189 : 8D FF 1D    ;  | 
CODE_00818C:          STZ.W $1DFB                         ;; 00818C : 9C FB 1D    ;  | 
CODE_00818F:          LDA.W $1DF9                         ;; 00818F : AD F9 1D    ; \  
CODE_008192:          STA.W $2140                         ;; 008192 : 8D 40 21    ;  | ; APU I/O Port
CODE_008195:          LDA.W $1DFA                         ;; 008195 : AD FA 1D    ;  | 
CODE_008198:          STA.W $2141                         ;; 008198 : 8D 41 21    ;  |Update SPC700 I/O ports 0, 1 and 3 ; APU I/O Port
CODE_00819B:          LDA.W $1DFC                         ;; 00819B : AD FC 1D    ;  | 
CODE_00819E:          STA.W $2143                         ;; 00819E : 8D 43 21    ;  | ; APU I/O Port
CODE_0081A1:          STZ.W $1DF9                         ;; 0081A1 : 9C F9 1D    ;  | 
CODE_0081A4:          STZ.W $1DFA                         ;; 0081A4 : 9C FA 1D    ;  | 
CODE_0081A7:          STZ.W $1DFC                         ;; 0081A7 : 9C FC 1D    ; /  
CODE_0081AA:          LDA.B #$80                          ;; 0081AA : A9 80       ; \ Screen off, brightness=0 
CODE_0081AC:          STA.W $2100                         ;; 0081AC : 8D 00 21    ; / ; Screen Display Register
CODE_0081AF:          STZ.W $420C                         ;; 0081AF : 9C 0C 42    ; Zero The HDMA reg ; H-DMA Channel Enable
CODE_0081B2:          LDA $41                             ;; 0081B2 : A5 41       ;
CODE_0081B4:          STA.W $2123                         ;; 0081B4 : 8D 23 21    ; BG 1 and 2 Window Mask Settings
CODE_0081B7:          LDA $42                             ;; 0081B7 : A5 42       ;
CODE_0081B9:          STA.W $2124                         ;; 0081B9 : 8D 24 21    ; BG 3 and 4 Window Mask Settings
CODE_0081BC:          LDA $43                             ;; 0081BC : A5 43       ;
CODE_0081BE:          STA.W $2125                         ;; 0081BE : 8D 25 21    ; OBJ and Color Window Settings
CODE_0081C1:          LDA $44                             ;; 0081C1 : A5 44       ;
CODE_0081C3:          STA.W $2130                         ;; 0081C3 : 8D 30 21    ; Initial Settings for Color Addition
CODE_0081C6:          LDA.W $0D9B                         ;; 0081C6 : AD 9B 0D    ; \  
CODE_0081C9:          BPL CODE_0081CE                     ;; 0081C9 : 10 03       ;  |If in a "Special level", 
CODE_0081CB:          JMP.W CODE_0082C4                   ;; 0081CB : 4C C4 82    ;  |jump to $82C4 
                                                          ;;                      ;
CODE_0081CE:          LDA $40                             ;; 0081CE : A5 40       ; \ Get the CGADSUB byte... 
CODE_0081D0:          AND.B #$FB                          ;; 0081D0 : 29 FB       ;  |Get the Add/Subtract Select and Enable part... 
CODE_0081D2:          STA.W $2131                         ;; 0081D2 : 8D 31 21    ; / ...and store it to the A/SSaE register... ; Add/Subtract Select and Enable
CODE_0081D5:          LDA.B #$09                          ;; 0081D5 : A9 09       ; \ 8x8 tiles, Graphics mode 1 
CODE_0081D7:          STA.W $2105                         ;; 0081D7 : 8D 05 21    ; /  ; BG Mode and Tile Size Setting
CODE_0081DA:          LDA $10                             ;; 0081DA : A5 10       ; \ If there isn't any lag, 
CODE_0081DC:          BEQ CODE_0081E7                     ;; 0081DC : F0 09       ; / branch to $81E7 
CODE_0081DE:          LDA.W $0D9B                         ;; 0081DE : AD 9B 0D    ; \  
CODE_0081E1:          LSR                                 ;; 0081E1 : 4A          ;  |If not on a special level, branch to NMINotSpecialLv 
CODE_0081E2:          BEQ NMINotSpecialLv                 ;; 0081E2 : F0 62       ; /  
CODE_0081E4:          JMP.W CODE_00827A                   ;; 0081E4 : 4C 7A 82    ;
                                                          ;;                      ;
CODE_0081E7:          INC $10                             ;; 0081E7 : E6 10       ;
CODE_0081E9:          JSR.W CODE_00A488                   ;; 0081E9 : 20 88 A4    ;
CODE_0081EC:          LDA.W $0D9B                         ;; 0081EC : AD 9B 0D    ;
CODE_0081EF:          LSR                                 ;; 0081EF : 4A          ;
CODE_0081F0:          BNE CODE_008222                     ;; 0081F0 : D0 30       ;
CODE_0081F2:          BCS CODE_0081F7                     ;; 0081F2 : B0 03       ;
CODE_0081F4:          JSR.W DrawStatusBar                 ;; 0081F4 : 20 AC 8D    ;
CODE_0081F7:          LDA.W $13C6                         ;; 0081F7 : AD C6 13    ; \  
CODE_0081FA:          CMP.B #$08                          ;; 0081FA : C9 08       ;  |If the current cutscene isn't the ending, 
CODE_0081FC:          BNE CODE_008209                     ;; 0081FC : D0 0B       ; / branch to $8209 
CODE_0081FE:          LDA.W $1FFE                         ;; 0081FE : AD FE 1F    ; \  
CODE_008201:          BEQ CODE_00821A                     ;; 008201 : F0 17       ;  |Related to reloading the palettes when switching 
CODE_008203:          JSL.L CODE_0C9567                   ;; 008203 : 22 67 95 0C ;  |to another background during the credits. 
CODE_008207:          BRA CODE_00821A                     ;; 008207 : 80 11       ; /  
                                                          ;;                      ;
CODE_008209:          JSL.L CODE_0087AD                   ;; 008209 : 22 AD 87 00 ;
CODE_00820D:          LDA.W $143A                         ;; 00820D : AD 3A 14    ;
CODE_008210:          BEQ CODE_008217                     ;; 008210 : F0 05       ;
CODE_008212:          JSR.W CODE_00A7C2                   ;; 008212 : 20 C2 A7    ;
CODE_008215:          BRA CODE_00823D                     ;; 008215 : 80 26       ;
                                                          ;;                      ;
CODE_008217:          JSR.W CODE_00A390                   ;; 008217 : 20 90 A3    ;
CODE_00821A:          JSR.W CODE_00A436                   ;; 00821A : 20 36 A4    ;
CODE_00821D:          JSR.W MarioGFXDMA                   ;; 00821D : 20 00 A3    ;
CODE_008220:          BRA CODE_00823D                     ;; 008220 : 80 1B       ;
                                                          ;;                      ;
CODE_008222:          LDA.W $13D9                         ;; 008222 : AD D9 13    ;
CODE_008225:          CMP.B #$0A                          ;; 008225 : C9 0A       ;
CODE_008227:          BNE CODE_008237                     ;; 008227 : D0 0E       ;
CODE_008229:          LDY.W $1DE8                         ;; 008229 : AC E8 1D    ;
CODE_00822C:          DEY                                 ;; 00822C : 88          ;
CODE_00822D:          DEY                                 ;; 00822D : 88          ;
CODE_00822E:          CPY.B #$04                          ;; 00822E : C0 04       ;
CODE_008230:          BCS CODE_008237                     ;; 008230 : B0 05       ;
CODE_008232:          JSR.W CODE_00A529                   ;; 008232 : 20 29 A5    ;
CODE_008235:          BRA CODE_008243                     ;; 008235 : 80 0C       ;
                                                          ;;                      ;
CODE_008237:          JSR.W CODE_00A4E3                   ;; 008237 : 20 E3 A4    ;
CODE_00823A:          JSR.W MarioGFXDMA                   ;; 00823A : 20 00 A3    ;
CODE_00823D:          JSR.W LoadScrnImage                 ;; 00823D : 20 D2 85    ;
CODE_008240:          JSR.W DoSomeSpriteDMA               ;; 008240 : 20 49 84    ;
CODE_008243:          JSR.W ControllerUpdate              ;; 008243 : 20 50 86    ;
NMINotSpecialLv:      LDA RAM_ScreenBndryXLo              ;; ?QPWZ? : A5 1A       ; \  
CODE_008248:          STA.W $210D                         ;; 008248 : 8D 0D 21    ;  |Set BG 1 Horizontal Scroll Offset ; BG 1 Horizontal Scroll Offset
CODE_00824B:          LDA RAM_ScreenBndryXHi              ;; 00824B : A5 1B       ;  |to X position of screen boundry  
CODE_00824D:          STA.W $210D                         ;; 00824D : 8D 0D 21    ; /  ; BG 1 Horizontal Scroll Offset
CODE_008250:          LDA RAM_ScreenBndryYLo              ;; 008250 : A5 1C       ; \  
CODE_008252:          CLC                                 ;; 008252 : 18          ;  | 
CODE_008253:          ADC.W RAM_Layer1DispYLo             ;; 008253 : 6D 88 18    ;  |Set BG 1 Vertical Scroll Offset 
CODE_008256:          STA.W $210E                         ;; 008256 : 8D 0E 21    ;  |to Y position of screen boundry + Layer 1 disposition ; BG 1 Vertical Scroll Offset
CODE_008259:          LDA RAM_ScreenBndryYHi              ;; 008259 : A5 1D       ;  | 
CODE_00825B:          ADC.W RAM_Layer1DispYHi             ;; 00825B : 6D 89 18    ;  | 
CODE_00825E:          STA.W $210E                         ;; 00825E : 8D 0E 21    ; /  ; BG 1 Vertical Scroll Offset
CODE_008261:          LDA $1E                             ;; 008261 : A5 1E       ; \  
CODE_008263:          STA.W $210F                         ;; 008263 : 8D 0F 21    ;  |Set BG 2 Horizontal Scroll Offset ; BG 2 Horizontal Scroll Offset
CODE_008266:          LDA $1F                             ;; 008266 : A5 1F       ;  |to X position of Layer 2 
CODE_008268:          STA.W $210F                         ;; 008268 : 8D 0F 21    ; /  ; BG 2 Horizontal Scroll Offset
CODE_00826B:          LDA $20                             ;; 00826B : A5 20       ; \  
CODE_00826D:          STA.W $2110                         ;; 00826D : 8D 10 21    ;  |Set BG 2 Vertical Scroll Offset ; BG 2 Vertical Scroll Offset
CODE_008270:          LDA $21                             ;; 008270 : A5 21       ;  |to Y position of Layer 2 
CODE_008272:          STA.W $2110                         ;; 008272 : 8D 10 21    ; /  ; BG 2 Vertical Scroll Offset
CODE_008275:          LDA.W $0D9B                         ;; 008275 : AD 9B 0D    ; \ If in a normal (not special) level, branch 
CODE_008278:          BEQ CODE_008292                     ;; 008278 : F0 18       ; /  
CODE_00827A:          LDA.B #$81                          ;; 00827A : A9 81       ;
CODE_00827C:          LDY.W $13C6                         ;; 00827C : AC C6 13    ; \  
CODE_00827F:          CPY.B #$08                          ;; 00827F : C0 08       ;  |If not playing ending movie, branch to $82A1 
CODE_008281:          BNE CODE_0082A1                     ;; 008281 : D0 1E       ; /  
CODE_008283:          LDY.W $0DAE                         ;; 008283 : AC AE 0D    ; \  
CODE_008286:          STY.W $2100                         ;; 008286 : 8C 00 21    ; / Set brightness to $0DAE ; Screen Display Register
CODE_008289:          LDY.W $0D9F                         ;; 008289 : AC 9F 0D    ; \  
CODE_00828C:          STY.W $420C                         ;; 00828C : 8C 0C 42    ; / Set HDMA channel enable to $0D9F ; H-DMA Channel Enable
CODE_00828F:          JMP.W IRQNMIEnding                  ;; 00828F : 4C 8C 83    ;
                                                          ;;                      ;
CODE_008292:          LDY.B #$24                          ;; 008292 : A0 24       ; \  ; IRQ timer, at which scanline the IRQ will be fired.
CODE_008294:          LDA.W $4211                         ;; 008294 : AD 11 42    ;  |(i.e. below the status bar) ; IRQ Flag By H/V Count Timer
CODE_008297:          STY.W $4209                         ;; 008297 : 8C 09 42    ;  | ; V-Count Timer (Upper 8 Bits)
CODE_00829A:          STZ.W $420A                         ;; 00829A : 9C 0A 42    ; /  ; V-Count Timer MSB (Bit 0)
CODE_00829D:          STZ $11                             ;; 00829D : 64 11       ;
CODE_00829F:          LDA.B #$A1                          ;; 00829F : A9 A1       ;
CODE_0082A1:          STA.W $4200                         ;; 0082A1 : 8D 00 42    ; NMI, V/H Count, and Joypad Enable
CODE_0082A4:          STZ.W $2111                         ;; 0082A4 : 9C 11 21    ; \  ; BG 3 Horizontal Scroll Offset- Write twice register
CODE_0082A7:          STZ.W $2111                         ;; 0082A7 : 9C 11 21    ;  |Set Layer 3 horizontal and vertical ; BG 3 Horizontal Scroll Offset
CODE_0082AA:          STZ.W $2112                         ;; 0082AA : 9C 12 21    ;  |scroll to x00 ; BG 3 Vertical Scroll Offset ; Write twice register
CODE_0082AD:          STZ.W $2112                         ;; 0082AD : 9C 12 21    ; /  ; BG 3 Vertical Scroll Offset
CODE_0082B0:          LDA.W $0DAE                         ;; 0082B0 : AD AE 0D    ; \  
CODE_0082B3:          STA.W $2100                         ;; 0082B3 : 8D 00 21    ; / Set brightness to $0DAE ; Screen Display Register
CODE_0082B6:          LDA.W $0D9F                         ;; 0082B6 : AD 9F 0D    ; \  
CODE_0082B9:          STA.W $420C                         ;; 0082B9 : 8D 0C 42    ; / Set HDMA channel enable to $0D9F ; H-DMA Channel Enable
CODE_0082BC:          REP #$30                            ;; 0082BC : C2 30       ; \ Pull all ; Index (16 bit) Accum (16 bit) 
CODE_0082BE:          PLB                                 ;; 0082BE : AB          ;  | 
CODE_0082BF:          PLY                                 ;; 0082BF : 7A          ;  | 
CODE_0082C0:          PLX                                 ;; 0082C0 : FA          ;  | 
CODE_0082C1:          PLA                                 ;; 0082C1 : 68          ;  | 
CODE_0082C2:          PLP                                 ;; 0082C2 : 28          ; /  
CODE_0082C3:          RTI                                 ;; 0082C3 : 40          ; And return 
                                                          ;;                      ;
CODE_0082C4:          LDA $10                             ;; 0082C4 : A5 10       ; \ If there is lag, ; Index (8 bit) Accum (8 bit) 
CODE_0082C6:          BNE CODE_0082F7                     ;; 0082C6 : D0 2F       ; / branch to $82F7 
CODE_0082C8:          INC $10                             ;; 0082C8 : E6 10       ;
CODE_0082CA:          LDA.W $143A                         ;; 0082CA : AD 3A 14    ; \ If Mario Start! graphics shouldn't be loaded, 
CODE_0082CD:          BEQ CODE_0082D4                     ;; 0082CD : F0 05       ; / branch to $82D4 
ADDR_0082CF:          JSR.W CODE_00A7C2                   ;; 0082CF : 20 C2 A7    ;
ADDR_0082D2:          BRA CODE_0082E8                     ;; 0082D2 : 80 14       ;
                                                          ;;                      ;
CODE_0082D4:          JSR.W CODE_00A436                   ;; 0082D4 : 20 36 A4    ;
CODE_0082D7:          JSR.W MarioGFXDMA                   ;; 0082D7 : 20 00 A3    ;
CODE_0082DA:          BIT.W $0D9B                         ;; 0082DA : 2C 9B 0D    ;
CODE_0082DD:          BVC CODE_0082E8                     ;; 0082DD : 50 09       ;
CODE_0082DF:          JSR.W CODE_0098A9                   ;; 0082DF : 20 A9 98    ;
CODE_0082E2:          LDA.W $0D9B                         ;; 0082E2 : AD 9B 0D    ;
CODE_0082E5:          LSR                                 ;; 0082E5 : 4A          ;
CODE_0082E6:          BCS CODE_0082EB                     ;; 0082E6 : B0 03       ;
CODE_0082E8:          JSR.W DrawStatusBar                 ;; 0082E8 : 20 AC 8D    ;
CODE_0082EB:          JSR.W CODE_00A488                   ;; 0082EB : 20 88 A4    ;
CODE_0082EE:          JSR.W LoadScrnImage                 ;; 0082EE : 20 D2 85    ;
CODE_0082F1:          JSR.W DoSomeSpriteDMA               ;; 0082F1 : 20 49 84    ;
CODE_0082F4:          JSR.W ControllerUpdate              ;; 0082F4 : 20 50 86    ;
CODE_0082F7:          LDA.B #$09                          ;; 0082F7 : A9 09       ;
CODE_0082F9:          STA.W $2105                         ;; 0082F9 : 8D 05 21    ; BG Mode and Tile Size Setting
CODE_0082FC:          LDA $2A                             ;; 0082FC : A5 2A       ;
CODE_0082FE:          CLC                                 ;; 0082FE : 18          ;
CODE_0082FF:          ADC.B #$80                          ;; 0082FF : 69 80       ;
CODE_008301:          STA.W $211F                         ;; 008301 : 8D 1F 21    ; Mode 7 Center Position X
CODE_008304:          LDA $2B                             ;; 008304 : A5 2B       ;
CODE_008306:          ADC.B #$00                          ;; 008306 : 69 00       ;
CODE_008308:          STA.W $211F                         ;; 008308 : 8D 1F 21    ; Mode 7 Center Position X
CODE_00830B:          LDA $2C                             ;; 00830B : A5 2C       ;
CODE_00830D:          CLC                                 ;; 00830D : 18          ;
CODE_00830E:          ADC.B #$80                          ;; 00830E : 69 80       ;
CODE_008310:          STA.W $2120                         ;; 008310 : 8D 20 21    ; Mode 7 Center Position Y
CODE_008313:          LDA $2D                             ;; 008313 : A5 2D       ;
CODE_008315:          ADC.B #$00                          ;; 008315 : 69 00       ;
CODE_008317:          STA.W $2120                         ;; 008317 : 8D 20 21    ; Mode 7 Center Position Y
CODE_00831A:          LDA $2E                             ;; 00831A : A5 2E       ;
CODE_00831C:          STA.W $211B                         ;; 00831C : 8D 1B 21    ; Mode 7 Matrix Parameter A
CODE_00831F:          LDA $2F                             ;; 00831F : A5 2F       ;
CODE_008321:          STA.W $211B                         ;; 008321 : 8D 1B 21    ; Mode 7 Matrix Parameter A
CODE_008324:          LDA $30                             ;; 008324 : A5 30       ;
CODE_008326:          STA.W $211C                         ;; 008326 : 8D 1C 21    ; Mode 7 Matrix Parameter B
CODE_008329:          LDA $31                             ;; 008329 : A5 31       ;
CODE_00832B:          STA.W $211C                         ;; 00832B : 8D 1C 21    ; Mode 7 Matrix Parameter B
CODE_00832E:          LDA $32                             ;; 00832E : A5 32       ;
CODE_008330:          STA.W $211D                         ;; 008330 : 8D 1D 21    ; Mode 7 Matrix Parameter C
CODE_008333:          LDA $33                             ;; 008333 : A5 33       ;
CODE_008335:          STA.W $211D                         ;; 008335 : 8D 1D 21    ; Mode 7 Matrix Parameter C
CODE_008338:          LDA $34                             ;; 008338 : A5 34       ;
CODE_00833A:          STA.W $211E                         ;; 00833A : 8D 1E 21    ; Mode 7 Matrix Parameter D
CODE_00833D:          LDA $35                             ;; 00833D : A5 35       ;
CODE_00833F:          STA.W $211E                         ;; 00833F : 8D 1E 21    ; Mode 7 Matrix Parameter D
CODE_008342:          JSR.W SETL1SCROLL                   ;; 008342 : 20 16 84    ;
CODE_008345:          LDA.W $0D9B                         ;; 008345 : AD 9B 0D    ;
CODE_008348:          LSR                                 ;; 008348 : 4A          ;
CODE_008349:          BCC CODE_00835C                     ;; 008349 : 90 11       ;
CODE_00834B:          LDA.W $0DAE                         ;; 00834B : AD AE 0D    ;
CODE_00834E:          STA.W $2100                         ;; 00834E : 8D 00 21    ; Screen Display Register
CODE_008351:          LDA.W $0D9F                         ;; 008351 : AD 9F 0D    ;
CODE_008354:          STA.W $420C                         ;; 008354 : 8D 0C 42    ; H-DMA Channel Enable
CODE_008357:          LDA.B #$81                          ;; 008357 : A9 81       ;
CODE_008359:          JMP.W CODE_0083F3                   ;; 008359 : 4C F3 83    ;
                                                          ;;                      ;
CODE_00835C:          LDY.B #$24                          ;; 00835C : A0 24       ;
CODE_00835E:          BIT.W $0D9B                         ;; 00835E : 2C 9B 0D    ;
CODE_008361:          BVC CODE_008371                     ;; 008361 : 50 0E       ;
CODE_008363:          LDA.W $13FC                         ;; 008363 : AD FC 13    ;
CODE_008366:          ASL                                 ;; 008366 : 0A          ;
CODE_008367:          TAX                                 ;; 008367 : AA          ;
CODE_008368:          LDA.W DATA_00F8E8,X                 ;; 008368 : BD E8 F8    ;
CODE_00836B:          CMP.B #$2A                          ;; 00836B : C9 2A       ;
CODE_00836D:          BNE CODE_008371                     ;; 00836D : D0 02       ;
CODE_00836F:          LDY.B #$2D                          ;; 00836F : A0 2D       ;
CODE_008371:          JMP.W CODE_008294                   ;; 008371 : 4C 94 82    ;
                                                          ;;                      ;
IRQHandler:           SEI                                 ;; ?QPWZ? : 78          ; Set Interrupt flag so routine can start 
IRQStart:             PHP                                 ;; ?QPWZ? : 08          ; \ Save A/X/Y/P/B 
CODE_008376:          REP #$30                            ;; 008376 : C2 30       ;  |P = Processor Flags, B = bank number for all $xxxx operations ; Index (16 bit) Accum (16 bit) 
CODE_008378:          PHA                                 ;; 008378 : 48          ;  |Set B to 0$0 
CODE_008379:          PHX                                 ;; 008379 : DA          ;  | 
CODE_00837A:          PHY                                 ;; 00837A : 5A          ;  | 
CODE_00837B:          PHB                                 ;; 00837B : 8B          ;  | 
CODE_00837C:          PHK                                 ;; 00837C : 4B          ;  | 
CODE_00837D:          PLB                                 ;; 00837D : AB          ; /  
CODE_00837E:          SEP #$30                            ;; 00837E : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_008380:          LDA.W $4211                         ;; 008380 : AD 11 42    ; Read the IRQ register, 'unapply' the interrupt ; IRQ Flag By H/V Count Timer
CODE_008383:          BPL CODE_0083B2                     ;; 008383 : 10 2D       ; If "Timer IRQ" is clear, skip the next code block 
CODE_008385:          LDA.B #$81                          ;; 008385 : A9 81       ;
CODE_008387:          LDY.W $0D9B                         ;; 008387 : AC 9B 0D    ;
CODE_00838A:          BMI CODE_0083BA                     ;; 00838A : 30 2E       ; If Bit 7 (negative flag) is set, branch to a different IRQ mode 
IRQNMIEnding:         STA.W $4200                         ;; ?QPWZ? : 8D 00 42    ; Enable NMI Interrupt and Automatic Joypad reading ; NMI, V/H Count, and Joypad Enable
CODE_00838F:          LDY.B #$1F                          ;; 00838F : A0 1F       ;
CODE_008391:          JSR.W WaitForHBlank                 ;; 008391 : 20 3B 84    ;
CODE_008394:          LDA $22                             ;; 008394 : A5 22       ; \ Adjust scroll settings for layer 3 
CODE_008396:          STA.W $2111                         ;; 008396 : 8D 11 21    ;  | ; BG 3 Horizontal Scroll Offset
CODE_008399:          LDA $23                             ;; 008399 : A5 23       ;  | 
CODE_00839B:          STA.W $2111                         ;; 00839B : 8D 11 21    ;  | ; BG 3 Horizontal Scroll Offset
CODE_00839E:          LDA $24                             ;; 00839E : A5 24       ;  | 
CODE_0083A0:          STA.W $2112                         ;; 0083A0 : 8D 12 21    ;  | ; BG 3 Vertical Scroll Offset
CODE_0083A3:          LDA $25                             ;; 0083A3 : A5 25       ;  | 
CODE_0083A5:          STA.W $2112                         ;; 0083A5 : 8D 12 21    ; /  ; BG 3 Vertical Scroll Offset
CODE_0083A8:          LDA $3E                             ;; 0083A8 : A5 3E       ; \Set the layer BG sizes, L3 priority, and BG mode 
CODE_0083AA:          STA.W $2105                         ;; 0083AA : 8D 05 21    ; /(Effectively, this is the screen mode) ; BG Mode and Tile Size Setting
CODE_0083AD:          LDA $40                             ;; 0083AD : A5 40       ; \Write CGADSUB 
CODE_0083AF:          STA.W $2131                         ;; 0083AF : 8D 31 21    ; / ; Add/Subtract Select and Enable
CODE_0083B2:          REP #$30                            ;; 0083B2 : C2 30       ; \ Pull everything back ; Index (16 bit) Accum (16 bit) 
CODE_0083B4:          PLB                                 ;; 0083B4 : AB          ;  | 
CODE_0083B5:          PLY                                 ;; 0083B5 : 7A          ;  | 
CODE_0083B6:          PLX                                 ;; 0083B6 : FA          ;  | 
CODE_0083B7:          PLA                                 ;; 0083B7 : 68          ;  | 
CODE_0083B8:          PLP                                 ;; 0083B8 : 28          ; / 
EmptyHandler:         RTI                                 ;; ?QPWZ? : 40          ; And Return 
                                                          ;;                      ;
CODE_0083BA:          BIT.W $0D9B                         ;; 0083BA : 2C 9B 0D    ; Get bit 6 of $0D9B ; Index (8 bit) Accum (8 bit) 
CODE_0083BD:          BVC CODE_0083E3                     ;; 0083BD : 50 24       ; If clear, skip the next code section 
CODE_0083BF:          LDY $11                             ;; 0083BF : A4 11       ; \Skip if $11 = 0 
CODE_0083C1:          BEQ CODE_0083D0                     ;; 0083C1 : F0 0D       ; / 
CODE_0083C3:          STA.W $4200                         ;; 0083C3 : 8D 00 42    ; #$81 -> NMI / Controller Enable reg ; NMI, V/H Count, and Joypad Enable
CODE_0083C6:          LDY.B #$14                          ;; 0083C6 : A0 14       ;
CODE_0083C8:          JSR.W WaitForHBlank                 ;; 0083C8 : 20 3B 84    ;
CODE_0083CB:          JSR.W SETL1SCROLL                   ;; 0083CB : 20 16 84    ;
CODE_0083CE:          BRA CODE_0083A8                     ;; 0083CE : 80 D8       ;
                                                          ;;                      ;
CODE_0083D0:          INC $11                             ;; 0083D0 : E6 11       ; $11++ 
CODE_0083D2:          LDA.W $4211                         ;; 0083D2 : AD 11 42    ; \ Set up the IRQ routine for layer 3 ; IRQ Flag By H/V Count Timer
CODE_0083D5:          LDA.B #$AE                          ;; 0083D5 : A9 AE       ;  |-\  
CODE_0083D7:          SEC                                 ;; 0083D7 : 38          ;  |  |Vertical Counter trigger at 174 - $1888 
CODE_0083D8:          SBC.W RAM_Layer1DispYLo             ;; 0083D8 : ED 88 18    ;  |-/ Oddly enough, $1888 seems to be 16-bit, but the 
CODE_0083DB:          STA.W $4209                         ;; 0083DB : 8D 09 42    ;  |Store to Vertical Counter Timer ; V-Count Timer (Upper 8 Bits)
CODE_0083DE:          STZ.W $420A                         ;; 0083DE : 9C 0A 42    ; / Make the high byte of said timer 0 ; V-Count Timer MSB (Bit 0)
CODE_0083E1:          LDA.B #$A1                          ;; 0083E1 : A9 A1       ; A = NMI enable, V count enable, joypad automatic read enable, H count disable 
CODE_0083E3:          LDY.W $1493                         ;; 0083E3 : AC 93 14    ; if $1493 = 0 skip down 
CODE_0083E6:          BEQ CODE_0083F3                     ;; 0083E6 : F0 0B       ;
CODE_0083E8:          LDY.W $1495                         ;; 0083E8 : AC 95 14    ; \ If $1495 is <#$40 
CODE_0083EB:          CPY.B #$40                          ;; 0083EB : C0 40       ;  | 
CODE_0083ED:          BCC CODE_0083F3                     ;; 0083ED : 90 04       ; / Skip down 
CODE_0083EF:          LDA.B #$81                          ;; 0083EF : A9 81       ;
CODE_0083F1:          BRA IRQNMIEnding                    ;; 0083F1 : 80 99       ; Jump up to IRQNMIEnding 
                                                          ;;                      ;
CODE_0083F3:          STA.W $4200                         ;; 0083F3 : 8D 00 42    ; A -> NMI/Joypad Auto-Read/HV-Count Control Register ; NMI, V/H Count, and Joypad Enable
CODE_0083F6:          JSR.W CODE_008439                   ;; 0083F6 : 20 39 84    ;
CODE_0083F9:          NOP                                 ;; 0083F9 : EA          ; \Not often you see NOP, I think there was a JSL here at one point maybe 
CODE_0083FA:          NOP                                 ;; 0083FA : EA          ; / 
CODE_0083FB:          LDA.B #$07                          ;; 0083FB : A9 07       ; \Write Screen register 
CODE_0083FD:          STA.W $2105                         ;; 0083FD : 8D 05 21    ; / ; BG Mode and Tile Size Setting
CODE_008400:          LDA $3A                             ;; 008400 : A5 3A       ; \ Write L1 Horizontal scroll 
CODE_008402:          STA.W $210D                         ;; 008402 : 8D 0D 21    ;  | ; BG 1 Horizontal Scroll Offset
CODE_008405:          LDA $3B                             ;; 008405 : A5 3B       ;  | 
CODE_008407:          STA.W $210D                         ;; 008407 : 8D 0D 21    ; /  ; BG 1 Horizontal Scroll Offset
CODE_00840A:          LDA $3C                             ;; 00840A : A5 3C       ; \ Write L1 Vertical Scroll 
CODE_00840C:          STA.W $210E                         ;; 00840C : 8D 0E 21    ;  | ; BG 1 Vertical Scroll Offset
CODE_00840F:          LDA $3D                             ;; 00840F : A5 3D       ;  | 
CODE_008411:          STA.W $210E                         ;; 008411 : 8D 0E 21    ; /  ; BG 1 Vertical Scroll Offset
CODE_008414:          BRA CODE_0083B2                     ;; 008414 : 80 9C       ; And exit IRQ 
                                                          ;;                      ;
SETL1SCROLL:          LDA.B #$59                          ;; ?QPWZ? : A9 59       ; \ 
CODE_008418:          STA.W $2107                         ;; 008418 : 8D 07 21    ; /Write L1 GFX source address ; BG 1 Address and Size
CODE_00841B:          LDA.B #$07                          ;; 00841B : A9 07       ; \Write L1/L2 Tilemap address 
CODE_00841D:          STA.W $210B                         ;; 00841D : 8D 0B 21    ; / ; BG 1 & 2 Tile Data Designation
CODE_008420:          LDA RAM_ScreenBndryXLo              ;; 008420 : A5 1A       ; \ Write L1 Horizontal scroll 
CODE_008422:          STA.W $210D                         ;; 008422 : 8D 0D 21    ;  | ; BG 1 Horizontal Scroll Offset
CODE_008425:          LDA RAM_ScreenBndryXHi              ;; 008425 : A5 1B       ;  | 
CODE_008427:          STA.W $210D                         ;; 008427 : 8D 0D 21    ; / ; BG 1 Horizontal Scroll Offset
CODE_00842A:          LDA RAM_ScreenBndryYLo              ;; 00842A : A5 1C       ; \ $1C + $1888 -> L1 Vert scroll 
CODE_00842C:          CLC                                 ;; 00842C : 18          ;  |$1888 = Some sort of vertioffset 
CODE_00842D:          ADC.W RAM_Layer1DispYLo             ;; 00842D : 6D 88 18    ;  | 
CODE_008430:          STA.W $210E                         ;; 008430 : 8D 0E 21    ; / ; BG 1 Vertical Scroll Offset
CODE_008433:          LDA RAM_ScreenBndryYHi              ;; 008433 : A5 1D       ; \Other half of L1 vert scroll 
CODE_008435:          STA.W $210E                         ;; 008435 : 8D 0E 21    ; / ; BG 1 Vertical Scroll Offset
Return008438:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_008439:          LDY.B #$20                          ;; 008439 : A0 20       ; <<- Could this be just to waste time? 
WaitForHBlank:        BIT.W $4212                         ;; ?QPWZ? : 2C 12 42    ; So... LDY gets set with 20 if there is a H-Blank...? ; H/V Blank Flags and Joypad Status
CODE_00843E:          BVS CODE_008439                     ;; 00843E : 70 F9       ; if in H-Blank, make Y #$20 and try again 
CODE_008440:          BIT.W $4212                         ;; 008440 : 2C 12 42    ; Now wait until not in H-Blank ; H/V Blank Flags and Joypad Status
CODE_008443:          BVC CODE_008440                     ;; 008443 : 50 FB       ;
CODE_008445:          DEY                                 ;; 008445 : 88          ;  |Y = 0 
CODE_008446:          BNE CODE_008445                     ;; 008446 : D0 FD       ; / ...wait a second... why didn't they just do LDY #$00? ...waste more time? 
Return008448:         RTS                                 ;; ?QPWZ? : 60          ; return 
                                                          ;;                      ;
DoSomeSpriteDMA:      STZ.W $4300                         ;; ?QPWZ? : 9C 00 43    ; Parameters for DMA Transfer
CODE_00844C:          REP #$20                            ;; 00844C : C2 20       ; Accum (16 bit) 
CODE_00844E:          STZ.W $2102                         ;; 00844E : 9C 02 21    ; OAM address ; Address for Accessing OAM
CODE_008451:          LDA.W #$0004                        ;; 008451 : A9 04 00    ;
CODE_008454:          STA.W $4301                         ;; 008454 : 8D 01 43    ; Dest. address = $2104 (data write to OAM) ; B Address
CODE_008457:          LDA.W #$0002                        ;; 008457 : A9 02 00    ;
CODE_00845A:          STA.W $4303                         ;; 00845A : 8D 03 43    ; Source address = $00:0200 ; A Address (High Byte)
CODE_00845D:          LDA.W #$0220                        ;; 00845D : A9 20 02    ;
CODE_008460:          STA.W $4305                         ;; 008460 : 8D 05 43    ; $0220 bytes to transfer ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_008463:          LDY.B #$01                          ;; 008463 : A0 01       ;
CODE_008465:          STY.W $420B                         ;; 008465 : 8C 0B 42    ; Start DMA ; Regular DMA Channel Enable
CODE_008468:          SEP #$20                            ;; 008468 : E2 20       ; Accum (8 bit) 
CODE_00846A:          LDA.B #$80                          ;; 00846A : A9 80       ; \  
CODE_00846C:          STA.W $2103                         ;; 00846C : 8D 03 21    ;  | 
CODE_00846F:          LDA $3F                             ;; 00846F : A5 3F       ;  |Change the OAM read/write address to #$8000 + $3F 
CODE_008471:          STA.W $2102                         ;; 008471 : 8D 02 21    ; /  ; Address for Accessing OAM
Return008474:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008475:          .db $00,$00,$08,$00,$10,$00,$18,$00 ;; 008475               ;
                      .db $20,$00,$28,$00,$30,$00,$38,$00 ;; ?QPWZ?               ;
                      .db $40,$00,$48,$00,$50,$00,$58,$00 ;; ?QPWZ?               ;
                      .db $60,$00,$68,$00,$70,$00,$78     ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_008494:          LDY.B #$1E                          ;; 008494 : A0 1E       ;
CODE_008496:          LDX.W DATA_008475,Y                 ;; 008496 : BE 75 84    ;
CODE_008499:          LDA.W $0423,X                       ;; 008499 : BD 23 04    ;
CODE_00849C:          ASL                                 ;; 00849C : 0A          ;
CODE_00849D:          ASL                                 ;; 00849D : 0A          ;
CODE_00849E:          ORA.W $0422,X                       ;; 00849E : 1D 22 04    ;
CODE_0084A1:          ASL                                 ;; 0084A1 : 0A          ;
CODE_0084A2:          ASL                                 ;; 0084A2 : 0A          ;
CODE_0084A3:          ORA.W $0421,X                       ;; 0084A3 : 1D 21 04    ;
CODE_0084A6:          ASL                                 ;; 0084A6 : 0A          ;
CODE_0084A7:          ASL                                 ;; 0084A7 : 0A          ;
CODE_0084A8:          ORA.W $0420,X                       ;; 0084A8 : 1D 20 04    ;
CODE_0084AB:          STA.W $0400,Y                       ;; 0084AB : 99 00 04    ;
CODE_0084AE:          LDA.W $0427,X                       ;; 0084AE : BD 27 04    ;
CODE_0084B1:          ASL                                 ;; 0084B1 : 0A          ;
CODE_0084B2:          ASL                                 ;; 0084B2 : 0A          ;
CODE_0084B3:          ORA.W $0426,X                       ;; 0084B3 : 1D 26 04    ;
CODE_0084B6:          ASL                                 ;; 0084B6 : 0A          ;
CODE_0084B7:          ASL                                 ;; 0084B7 : 0A          ;
CODE_0084B8:          ORA.W $0425,X                       ;; 0084B8 : 1D 25 04    ;
CODE_0084BB:          ASL                                 ;; 0084BB : 0A          ;
CODE_0084BC:          ASL                                 ;; 0084BC : 0A          ;
CODE_0084BD:          ORA.W $0424,X                       ;; 0084BD : 1D 24 04    ;
CODE_0084C0:          STA.W $0401,Y                       ;; 0084C0 : 99 01 04    ;
CODE_0084C3:          DEY                                 ;; 0084C3 : 88          ;
CODE_0084C4:          DEY                                 ;; 0084C4 : 88          ;
CODE_0084C5:          BPL CODE_008496                     ;; 0084C5 : 10 CF       ;
Return0084C7:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_0084C8:          PHB                                 ;; 0084C8 : 8B          ; Wrapper 
CODE_0084C9:          PHK                                 ;; 0084C9 : 4B          ;
CODE_0084CA:          PLB                                 ;; 0084CA : AB          ;
CODE_0084CB:          JSR.W LoadScrnImage                 ;; 0084CB : 20 D2 85    ;
CODE_0084CE:          PLB                                 ;; 0084CE : AB          ;
Return0084CF:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
                                                          ;;                      ;
ImagePointers:        .dw $837D .db $7F                   ;; ?QPWZ? : 7D 83 7F    ; Not used? 
                      .dw DATA_05B375 .db :$DATA_05B375   ;; ?QPWZ? : 75 B3 05    ; Title screen 
                      .dw DATA_04A400 .db :$DATA_04A400   ;; ?QPWZ? : 00 A4 04    ; OW border 
                      .dw DATA_05B0FF .db :$DATA_05B0FF   ;; ?QPWZ? : FF B0 05    ;
                      .dw DATA_05B91C .db :$DATA_05B91C   ;; ?QPWZ? : 1C B9 05    ; CONTINUE/END 
                      .dw DATA_0CB800 .db :$DATA_0CB800   ;; ?QPWZ? : 00 B8 0C    ;
                      .dw DATA_05B872 .db :$DATA_05B872   ;; ?QPWZ? : 72 B8 05    ; 1 PLAYER GAME/2 PLAYER GAME 
                      .dw DATA_04819F .db :$DATA_04819F   ;; ?QPWZ? : 9F 81 04    ; OW scroll arrows 
                      .dw DATA_0481E0 .db :$DATA_0481E0   ;; ?QPWZ? : E0 81 04    ; Remove OW scroll arrows 
                      .dw DATA_04F499 .db :$DATA_04F499   ;; ?QPWZ? : 99 F4 04    ;
                      .dw DATA_05B8C7 .db :$DATA_05B8C7   ;; ?QPWZ? : C7 B8 05    ; CONTINUE AND SAVE 
                      .dw DATA_0CBFF1 .db :$DATA_0CBFF1   ;; ?QPWZ? : F1 BF 0C    ;
                      .dw DATA_0CBFC3 .db :$DATA_0CBFC3   ;; ?QPWZ? : C3 BF 0C    ; Cutscene 1 text: Line 7 
                      .dw DATA_0CBF8E .db :$DATA_0CBF8E   ;; ?QPWZ? : 8E BF 0C    ; Cutscene 1 text: Line 6 
                      .dw DATA_0CBF59 .db :$DATA_0CBF59   ;; ?QPWZ? : 59 BF 0C    ; Cutscene 1 text: Line 5 
                      .dw DATA_0CBF24 .db :$DATA_0CBF24   ;; ?QPWZ? : 24 BF 0C    ; Cutscene 1 text: Line 4 
                      .dw DATA_0CBEEF .db :$DATA_0CBEEF   ;; ?QPWZ? : EF BE 0C    ; Cutscene 1 text: Line 3 
                      .dw DATA_0CBEBA .db :$DATA_0CBEBA   ;; ?QPWZ? : BA BE 0C    ; Cutscene 1 text: Line 2 
                      .dw DATA_0CBE85 .db :$DATA_0CBE85   ;; ?QPWZ? : 85 BE 0C    ; Cutscene 1 text: Line 1 
                      .dw DATA_0CC165 .db :$DATA_0CC165   ;; ?QPWZ? : 65 C1 0C    ; Cutscene 2 text: Line 8 
                      .dw DATA_0CC130 .db :$DATA_0CC130   ;; ?QPWZ? : 30 C1 0C    ; Cutscene 2 text: Line 7 
                      .dw DATA_0CC0FB .db :$DATA_0CC0FB   ;; ?QPWZ? : FB C0 0C    ; Cutscene 2 text: Line 6 
                      .dw DATA_0CC0C6 .db :$DATA_0CC0C6   ;; ?QPWZ? : C6 C0 0C    ;
                      .dw DATA_0CC091 .db :$DATA_0CC091   ;; ?QPWZ? : 91 C0 0C    ; ...etc... 
                      .dw DATA_0CC05C .db :$DATA_0CC05C   ;; ?QPWZ? : 5C C0 0C    ;
                      .dw DATA_0CC027 .db :$DATA_0CC027   ;; ?QPWZ? : 27 C0 0C    ;
                      .dw DATA_0CBFF2 .db :$DATA_0CBFF2   ;; ?QPWZ? : F2 BF 0C    ;
                      .dw DATA_0CBFF1 .db :$DATA_0CBFF1   ;; ?QPWZ? : F1 BF 0C    ;
                      .dw DATA_0CC2CE .db :$DATA_0CC2CE   ;; ?QPWZ? : CE C2 0C    ;
                      .dw DATA_0CC299 .db :$DATA_0CC299   ;; ?QPWZ? : 99 C2 0C    ;
                      .dw DATA_0CC264 .db :$DATA_0CC264   ;; ?QPWZ? : 64 C2 0C    ;
                      .dw DATA_0CC22F .db :$DATA_0CC22F   ;; ?QPWZ? : 2F C2 0C    ;
                      .dw DATA_0CC1FA .db :$DATA_0CC1FA   ;; ?QPWZ? : FA C1 0C    ;
                      .dw DATA_0CC1C5 .db :$DATA_0CC1C5   ;; ?QPWZ? : C5 C1 0C    ;
                      .dw DATA_0CC190 .db :$DATA_0CC190   ;; ?QPWZ? : 90 C1 0C    ;
                      .dw DATA_0CC46C .db :$DATA_0CC46C   ;; ?QPWZ? : 6C C4 0C    ;
                      .dw DATA_0CC437 .db :$DATA_0CC437   ;; ?QPWZ? : 37 C4 0C    ;
                      .dw DATA_0CC402 .db :$DATA_0CC402   ;; ?QPWZ? : 02 C4 0C    ;
                      .dw DATA_0CC3CD .db :$DATA_0CC3CD   ;; ?QPWZ? : CD C3 0C    ;
                      .dw DATA_0CC398 .db :$DATA_0CC398   ;; ?QPWZ? : 98 C3 0C    ;
                      .dw DATA_0CC363 .db :$DATA_0CC363   ;; ?QPWZ? : 63 C3 0C    ;
                      .dw DATA_0CC32E .db :$DATA_0CC32E   ;; ?QPWZ? : 2E C3 0C    ;
                      .dw DATA_0CC2F9 .db :$DATA_0CC2F9   ;; ?QPWZ? : F9 C2 0C    ;
                      .dw DATA_0CBFF1 .db :$DATA_0CBFF1   ;; ?QPWZ? : F1 BF 0C    ;
                      .dw DATA_0CC5DD .db :$DATA_0CC5DD   ;; ?QPWZ? : DD C5 0C    ;
                      .dw DATA_0CC5A8 .db :$DATA_0CC5A8   ;; ?QPWZ? : A8 C5 0C    ;
                      .dw DATA_0CC573 .db :$DATA_0CC573   ;; ?QPWZ? : 73 C5 0C    ;
                      .dw DATA_0CC53E .db :$DATA_0CC53E   ;; ?QPWZ? : 3E C5 0C    ;
                      .dw DATA_0CC509 .db :$DATA_0CC509   ;; ?QPWZ? : 09 C5 0C    ;
                      .dw DATA_0CC4D4 .db :$DATA_0CC4D4   ;; ?QPWZ? : D4 C4 0C    ;
                      .dw DATA_0CC49F .db :$DATA_0CC49F   ;; ?QPWZ? : 9F C4 0C    ;
                      .dw DATA_0CC785 .db :$DATA_0CC785   ;; ?QPWZ? : 85 C7 0C    ;
                      .dw DATA_0CC750 .db :$DATA_0CC750   ;; ?QPWZ? : 50 C7 0C    ;
                      .dw DATA_0CC71B .db :$DATA_0CC71B   ;; ?QPWZ? : 1B C7 0C    ;
                      .dw DATA_0CC6E6 .db :$DATA_0CC6E6   ;; ?QPWZ? : E6 C6 0C    ;
                      .dw DATA_0CC6B1 .db :$DATA_0CC6B1   ;; ?QPWZ? : B1 C6 0C    ;
                      .dw DATA_0CC67C .db :$DATA_0CC67C   ;; ?QPWZ? : 7C C6 0C    ;
                      .dw DATA_0CC647 .db :$DATA_0CC647   ;; ?QPWZ? : 47 C6 0C    ;
                      .dw DATA_0CC612 .db :$DATA_0CC612   ;; ?QPWZ? : 12 C6 0C    ;
                      .dw DATA_0CC92D .db :$DATA_0CC92D   ;; ?QPWZ? : 2D C9 0C    ;
                      .dw DATA_0CC8F8 .db :$DATA_0CC8F8   ;; ?QPWZ? : F8 C8 0C    ;
                      .dw DATA_0CC8C3 .db :$DATA_0CC8C3   ;; ?QPWZ? : C3 C8 0C    ;
                      .dw DATA_0CC88E .db :$DATA_0CC88E   ;; ?QPWZ? : 8E C8 0C    ;
                      .dw DATA_0CC859 .db :$DATA_0CC859   ;; ?QPWZ? : 59 C8 0C    ;
                      .dw DATA_0CC824 .db :$DATA_0CC824   ;; ?QPWZ? : 24 C8 0C    ;
                      .dw DATA_0CC7EF .db :$DATA_0CC7EF   ;; ?QPWZ? : EF C7 0C    ;
                      .dw DATA_0CC7BA .db :$DATA_0CC7BA   ;; ?QPWZ? : BA C7 0C    ;
                      .dw DATA_0CBA56 .db :$DATA_0CBA56   ;; ?QPWZ? : 56 BA 0C    ; Cutscene border, cave ground 
                      .dw DATA_0CBBB9 .db :$DATA_0CBBB9   ;; ?QPWZ? : B9 BB 0C    ;
                      .dw DATA_0CB9BF .db :$DATA_0CB9BF   ;; ?QPWZ? : BF B9 0C    ;
                      .dw DATA_0C9380 .db :$DATA_0C9380   ;; ?QPWZ? : 80 93 0C    ;
                      .dw DATA_0CB636 .db :$DATA_0CB636   ;; ?QPWZ? : 36 B6 0C    ; Ending: THE END 
                      .dw DATA_0DF300 .db :$DATA_0DF300   ;; ?QPWZ? : 00 F3 0D    ; Ending: Enemies: Lakitu 
                      .dw DATA_0DF42D .db :$DATA_0DF42D   ;; ?QPWZ? : 2D F4 0D    ; Ending: Enemies: Hammer Bro. 
                      .dw DATA_0DF572 .db :$DATA_0DF572   ;; ?QPWZ? : 72 F5 0D    ; Ending: Enemies: Pokey 
                      .dw DATA_0DF66B .db :$DATA_0DF66B   ;; ?QPWZ? : 6B F6 0D    ; Ending: Enemies: Rex 
                      .dw DATA_0DF742 .db :$DATA_0DF742   ;; ?QPWZ? : 42 F7 0D    ; Ending: Enemies: Dino-Rhino 
                      .dw DATA_0DF837 .db :$DATA_0DF837   ;; ?QPWZ? : 37 F8 0D    ; Ending: Enemies: Blargg 
                      .dw DATA_0DF8FA .db :$DATA_0DF8FA   ;; ?QPWZ? : FA F8 0D    ; Ending: Enemies: Urchin 
                      .dw DATA_0DF9CD .db :$DATA_0DF9CD   ;; ?QPWZ? : CD F9 0D    ; Ending: Enemies: Boo 
                      .dw DATA_0DFA98 .db :$DATA_0DFA98   ;; ?QPWZ? : 98 FA 0D    ; Ending: Enemies: Dry Bones 
                      .dw DATA_0DFB73 .db :$DATA_0DFB73   ;; ?QPWZ? : 73 FB 0D    ; Ending: Enemies: Grinder 
                      .dw DATA_0DFC58 .db :$DATA_0DFC58   ;; ?QPWZ? : 58 FC 0D    ; Ending: Enemies: Reznor 
                      .dw DATA_0DFCD5 .db :$DATA_0DFCD5   ;; ?QPWZ? : D5 FC 0D    ; Ending: Enemies: Mechakoopa 
                      .dw DATA_0DFD5C .db :$DATA_0DFD5C   ;; ?QPWZ? : 5C FD 0D    ; Ending: Enemies: Bowser 
                      .dw DATA_0CBD02 .db :$DATA_0CBD02   ;; ?QPWZ? : 02 BD 0C    ;
                                                          ;;                      ;
LoadScrnImage:        LDY $12                             ;; ?QPWZ? : A4 12       ; 12 = Image loader 
CODE_0085D4:          LDA.W ImagePointers,Y               ;; 0085D4 : B9 D0 84    ; \  
CODE_0085D7:          STA $00                             ;; 0085D7 : 85 00       ;  | 
CODE_0085D9:          LDA.W ImagePointers+1,Y             ;; 0085D9 : B9 D1 84    ;  |Load pointer 
CODE_0085DC:          STA $01                             ;; 0085DC : 85 01       ;  | 
CODE_0085DE:          LDA.W ImagePointers+2,Y             ;; 0085DE : B9 D2 84    ;  | 
CODE_0085E1:          STA $02                             ;; 0085E1 : 85 02       ; /  
CODE_0085E3:          JSR.W CODE_00871E                   ;; 0085E3 : 20 1E 87    ;
CODE_0085E6:          LDA $12                             ;; 0085E6 : A5 12       ;
CODE_0085E8:          BNE CODE_0085F7                     ;; 0085E8 : D0 0D       ;
CODE_0085EA:          STA.L $7F837B                       ;; 0085EA : 8F 7B 83 7F ;
CODE_0085EE:          STA.L $7F837C                       ;; 0085EE : 8F 7C 83 7F ;
CODE_0085F2:          DEC A                               ;; 0085F2 : 3A          ;
CODE_0085F3:          STA.L $7F837D                       ;; 0085F3 : 8F 7D 83 7F ;
CODE_0085F7:          STZ $12                             ;; 0085F7 : 64 12       ; Do not reload the same thing next frame 
Return0085F9:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_0085FA:          JSR.W TurnOffIO                     ;; 0085FA : 20 7D 93    ;
CODE_0085FD:          LDA.B #$FC                          ;; 0085FD : A9 FC       ;
CODE_0085FF:          STA $00                             ;; 0085FF : 85 00       ;
CODE_008601:          STZ.W $2115                         ;; 008601 : 9C 15 21    ; Set "VRAM Address Increment Value" to x00 ; VRAM Address Increment Value
CODE_008604:          STZ.W $2116                         ;; 008604 : 9C 16 21    ; Set "Address for VRAM Read/Write (Low Byte)" to x00 ; Address for VRAM Read/Write (Low Byte)
CODE_008607:          LDA.B #$50                          ;; 008607 : A9 50       ; \ Set "Address for VRAM Read/Write (High Byte)" to x50 
CODE_008609:          STA.W $2117                         ;; 008609 : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_00860C:          LDX.B #$06                          ;; 00860C : A2 06       ;
CODE_00860E:          LDA.W DATA_008649,X                 ;; 00860E : BD 49 86    ;
CODE_008611:          STA.W $4310,X                       ;; 008611 : 9D 10 43    ;
CODE_008614:          DEX                                 ;; 008614 : CA          ;
CODE_008615:          BPL CODE_00860E                     ;; 008615 : 10 F7       ;
CODE_008617:          LDY.B #$02                          ;; 008617 : A0 02       ; DMA something to VRAM, my guess is a tilemap... 
CODE_008619:          STY.W $420B                         ;; 008619 : 8C 0B 42    ; Regular DMA Channel Enable
CODE_00861C:          LDA.B #$38                          ;; 00861C : A9 38       ;
CODE_00861E:          STA $00                             ;; 00861E : 85 00       ;
CODE_008620:          LDA.B #$80                          ;; 008620 : A9 80       ;
CODE_008622:          STA.W $2115                         ;; 008622 : 8D 15 21    ; VRAM Address Increment Value
CODE_008625:          STZ.W $2116                         ;; 008625 : 9C 16 21    ; \Change CRAM address ; Address for VRAM Read/Write (Low Byte)
CODE_008628:          LDA.B #$50                          ;; 008628 : A9 50       ;  | 
CODE_00862A:          STA.W $2117                         ;; 00862A : 8D 17 21    ; / ; Address for VRAM Read/Write (High Byte)
CODE_00862D:          LDX.B #$06                          ;; 00862D : A2 06       ; And Repeat the DMA 
CODE_00862F:          LDA.W DATA_008649,X                 ;; 00862F : BD 49 86    ;
CODE_008632:          STA.W $4310,X                       ;; 008632 : 9D 10 43    ;
CODE_008635:          DEX                                 ;; 008635 : CA          ;
CODE_008636:          BPL CODE_00862F                     ;; 008636 : 10 F7       ;
CODE_008638:          LDA.B #$19                          ;; 008638 : A9 19       ; \but change desination address to $2119 
CODE_00863A:          STA.W $4311                         ;; 00863A : 8D 11 43    ; / ; B Address
CODE_00863D:          STY.W $420B                         ;; 00863D : 8C 0B 42    ; Start DMA ; Regular DMA Channel Enable
CODE_008640:          STZ $3F                             ;; 008640 : 64 3F       ; $3B = 0 (not sure what $3B is) 
CODE_008642:          JSL.L RAM_7F8000                    ;; 008642 : 22 00 80 7F ; and JSL to a RAM routine 
CODE_008646:          JMP.W DoSomeSpriteDMA               ;; 008646 : 4C 49 84    ; Jump to the next part of this routine 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008649:          .db $08,$18,$00,$00,$00,$00,$10     ;; 008649               ;
                                                          ;;                      ;
ControllerUpdate:     LDA.W $4218                         ;; ?QPWZ? : AD 18 42    ; \  ; Joypad 1Data (Low Byte)
CODE_008653:          AND.B #$F0                          ;; 008653 : 29 F0       ;  | 
CODE_008655:          STA.W $0DA4                         ;; 008655 : 8D A4 0D    ;  | 
CODE_008658:          TAY                                 ;; 008658 : A8          ;  | 
CODE_008659:          EOR.W $0DAC                         ;; 008659 : 4D AC 0D    ;  | 
CODE_00865C:          AND.W $0DA4                         ;; 00865C : 2D A4 0D    ;  | 
CODE_00865F:          STA.W $0DA8                         ;; 00865F : 8D A8 0D    ;  | 
CODE_008662:          STY.W $0DAC                         ;; 008662 : 8C AC 0D    ;  | 
CODE_008665:          LDA.W $4219                         ;; 008665 : AD 19 42    ;  | ; Joypad 1Data (High Byte)
CODE_008668:          STA.W $0DA2                         ;; 008668 : 8D A2 0D    ;  | 
CODE_00866B:          TAY                                 ;; 00866B : A8          ;  | 
CODE_00866C:          EOR.W $0DAA                         ;; 00866C : 4D AA 0D    ;  | 
CODE_00866F:          AND.W $0DA2                         ;; 00866F : 2D A2 0D    ;  | 
CODE_008672:          STA.W RAM_OWControllerA             ;; 008672 : 8D A6 0D    ;  | 
CODE_008675:          STY.W $0DAA                         ;; 008675 : 8C AA 0D    ;  |Read controller data 
CODE_008678:          LDA.W $421A                         ;; 008678 : AD 1A 42    ;  | ; Joypad 2Data (Low Byte)
CODE_00867B:          AND.B #$F0                          ;; 00867B : 29 F0       ;  | 
CODE_00867D:          STA.W $0DA5                         ;; 00867D : 8D A5 0D    ;  | 
CODE_008680:          TAY                                 ;; 008680 : A8          ;  | 
CODE_008681:          EOR.W $0DAD                         ;; 008681 : 4D AD 0D    ;  | 
CODE_008684:          AND.W $0DA5                         ;; 008684 : 2D A5 0D    ;  | 
CODE_008687:          STA.W $0DA9                         ;; 008687 : 8D A9 0D    ;  | 
CODE_00868A:          STY.W $0DAD                         ;; 00868A : 8C AD 0D    ;  | 
CODE_00868D:          LDA.W $421B                         ;; 00868D : AD 1B 42    ;  | ; Joypad 2Data (High Byte)
CODE_008690:          STA.W $0DA3                         ;; 008690 : 8D A3 0D    ;  | 
CODE_008693:          TAY                                 ;; 008693 : A8          ;  | 
CODE_008694:          EOR.W $0DAB                         ;; 008694 : 4D AB 0D    ;  | 
CODE_008697:          AND.W $0DA3                         ;; 008697 : 2D A3 0D    ;  | 
CODE_00869A:          STA.W $0DA7                         ;; 00869A : 8D A7 0D    ;  | 
CODE_00869D:          STY.W $0DAB                         ;; 00869D : 8C AB 0D    ; /  
CODE_0086A0:          LDX.W $0DA0                         ;; 0086A0 : AE A0 0D    ; \  
CODE_0086A3:          BPL CODE_0086A8                     ;; 0086A3 : 10 03       ;  |If $0DA0 is positive, set X to $0DA0 
ADDR_0086A5:          LDX.W $0DB3                         ;; 0086A5 : AE B3 0D    ;  |Otherwise, set X to current character 
CODE_0086A8:          LDA.W $0DA4,X                       ;; 0086A8 : BD A4 0D    ; \  
CODE_0086AB:          AND.B #$C0                          ;; 0086AB : 29 C0       ;  | 
CODE_0086AD:          ORA.W $0DA2,X                       ;; 0086AD : 1D A2 0D    ;  | 
CODE_0086B0:          STA RAM_ControllerA                 ;; 0086B0 : 85 15       ;  | 
CODE_0086B2:          LDA.W $0DA4,X                       ;; 0086B2 : BD A4 0D    ;  | 
CODE_0086B5:          STA RAM_ControllerB                 ;; 0086B5 : 85 17       ;  |Update controller data bytes 
CODE_0086B7:          LDA.W $0DA8,X                       ;; 0086B7 : BD A8 0D    ;  | 
CODE_0086BA:          AND.B #$40                          ;; 0086BA : 29 40       ;  | 
CODE_0086BC:          ORA.W RAM_OWControllerA,X           ;; 0086BC : 1D A6 0D    ;  | 
CODE_0086BF:          STA $16                             ;; 0086BF : 85 16       ;  | 
CODE_0086C1:          LDA.W $0DA8,X                       ;; 0086C1 : BD A8 0D    ;  | 
CODE_0086C4:          STA $18                             ;; 0086C4 : 85 18       ; /  
Return0086C6:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_0086C7:          REP #$30                            ;; 0086C7 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_0086C9:          LDX.W #$0062                        ;; 0086C9 : A2 62 00    ;
CODE_0086CC:          LDA.W #$0202                        ;; 0086CC : A9 02 02    ;
CODE_0086CF:          STA.W $0420,X                       ;; 0086CF : 9D 20 04    ;
CODE_0086D2:          DEX                                 ;; 0086D2 : CA          ;
CODE_0086D3:          DEX                                 ;; 0086D3 : CA          ;
CODE_0086D4:          BPL CODE_0086CF                     ;; 0086D4 : 10 F9       ;
CODE_0086D6:          SEP #$30                            ;; 0086D6 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_0086D8:          LDA.B #$F0                          ;; 0086D8 : A9 F0       ;
CODE_0086DA:          JSL.L RAM_7F812E                    ;; 0086DA : 22 2E 81 7F ;
Return0086DE:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
ExecutePtr:           STY $03                             ;; ?QPWZ? : 84 03       ; "Push" Y 
CODE_0086E1:          PLY                                 ;; 0086E1 : 7A          ;
CODE_0086E2:          STY $00                             ;; 0086E2 : 84 00       ;
CODE_0086E4:          REP #$30                            ;; 0086E4 : C2 30       ; 16 bit A ; Index (16 bit) Accum (16 bit) 
CODE_0086E6:          AND.W #$00FF                        ;; 0086E6 : 29 FF 00    ; A = Game mode 
CODE_0086E9:          ASL                                 ;; 0086E9 : 0A          ; Multiply game mode by 2 
CODE_0086EA:          TAY                                 ;; 0086EA : A8          ;
CODE_0086EB:          PLA                                 ;; 0086EB : 68          ;
CODE_0086EC:          STA $01                             ;; 0086EC : 85 01       ;
CODE_0086EE:          INY                                 ;; 0086EE : C8          ;
CODE_0086EF:          LDA [$00],Y                         ;; 0086EF : B7 00       ;
CODE_0086F1:          STA $00                             ;; 0086F1 : 85 00       ; A is 16-bit 
CODE_0086F3:          SEP #$30                            ;; 0086F3 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_0086F5:          LDY $03                             ;; 0086F5 : A4 03       ; "Pull" Y 
CODE_0086F7:          JMP [$0000]                         ;; 0086F7 : DC 00 00    ; Jump to the game mode's routine, which has been loaded into $00-02 
                                                          ;;                      ;
ExecutePtrLong:       STY $05                             ;; ?QPWZ? : 84 05       ;
CODE_0086FC:          PLY                                 ;; 0086FC : 7A          ;
CODE_0086FD:          STY $02                             ;; 0086FD : 84 02       ;
CODE_0086FF:          REP #$30                            ;; 0086FF : C2 30       ; 16 bit A,X,Y ; Index (16 bit) Accum (16 bit) 
CODE_008701:          AND.W #$00FF                        ;; 008701 : 29 FF 00    ; \ A = Tileset/byte 3 (TB3) 
CODE_008704:          STA $03                             ;; 008704 : 85 03       ; / Store A in $03 
CODE_008706:          ASL                                 ;; 008706 : 0A          ; \ Multiply A by 2 
CODE_008707:          ADC $03                             ;; 008707 : 65 03       ;  |Add TB3 to A 
CODE_008709:          TAY                                 ;; 008709 : A8          ; / Set Y to A 
CODE_00870A:          PLA                                 ;; 00870A : 68          ;
CODE_00870B:          STA $03                             ;; 00870B : 85 03       ;
CODE_00870D:          INY                                 ;; 00870D : C8          ;
CODE_00870E:          LDA [$02],Y                         ;; 00870E : B7 02       ;
CODE_008710:          STA $00                             ;; 008710 : 85 00       ;
CODE_008712:          INY                                 ;; 008712 : C8          ;
CODE_008713:          LDA [$02],Y                         ;; 008713 : B7 02       ;
CODE_008715:          STA $01                             ;; 008715 : 85 01       ;
CODE_008717:          SEP #$30                            ;; 008717 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_008719:          LDY $05                             ;; 008719 : A4 05       ;
CODE_00871B:          JMP [$0000]                         ;; 00871B : DC 00 00    ;
                                                          ;;                      ;
CODE_00871E:          REP #$10                            ;; 00871E : C2 10       ; 16 bit X,Y ; Index (16 bit) 
CODE_008720:          STA.W $4314                         ;; 008720 : 8D 14 43    ; A Address Bank
CODE_008723:          LDY.W #$0000                        ;; 008723 : A0 00 00    ; Set index to 0 
CODE_008726:          LDA [$00],Y                         ;; 008726 : B7 00       ; \ Read line header byte 1 
CODE_008728:          BPL CODE_00872D                     ;; 008728 : 10 03       ;  |If the byte & %10000000 is true, 
CODE_00872A:          SEP #$30                            ;; 00872A : E2 30       ;  |Set A,X,Y to 8 bit and return ; Index (8 bit) Accum (8 bit) 
Return00872C:         RTS                                 ;; ?QPWZ? : 60          ;  | 
                                                          ;;                      ;
CODE_00872D:          STA $04                             ;; 00872D : 85 04       ; Store byte in $04 ; Index (16 bit) 
CODE_00872F:          INY                                 ;; 00872F : C8          ; Move onto the next byte 
CODE_008730:          LDA [$00],Y                         ;; 008730 : B7 00       ; Read line header byte 2 
CODE_008732:          STA $03                             ;; 008732 : 85 03       ; Store byte in $03 
CODE_008734:          INY                                 ;; 008734 : C8          ; Move onto the next byte 
CODE_008735:          LDA [$00],Y                         ;; 008735 : B7 00       ; Read line header byte 3 
CODE_008737:          STZ $07                             ;; 008737 : 64 07       ; \  
CODE_008739:          ASL                                 ;; 008739 : 0A          ;  |Store direction bit in $07 
CODE_00873A:          ROL $07                             ;; 00873A : 26 07       ; /  
CODE_00873C:          LDA.B #$18                          ;; 00873C : A9 18       ; \ Set B address (DMA) to x18 
CODE_00873E:          STA.W $4311                         ;; 00873E : 8D 11 43    ; /  ; B Address
CODE_008741:          LDA [$00],Y                         ;; 008741 : B7 00       ; Re-read line header byte 3 
CODE_008743:          AND.B #$40                          ;; 008743 : 29 40       ; \  
CODE_008745:          LSR                                 ;; 008745 : 4A          ;  | 
CODE_008746:          LSR                                 ;; 008746 : 4A          ;  |Store RLE bit << 3 in $05 
CODE_008747:          LSR                                 ;; 008747 : 4A          ;  | 
CODE_008748:          STA $05                             ;; 008748 : 85 05       ; /  
CODE_00874A:          STZ $06                             ;; 00874A : 64 06       ;
CODE_00874C:          ORA.B #$01                          ;; 00874C : 09 01       ;
CODE_00874E:          STA.W $4310                         ;; 00874E : 8D 10 43    ; Parameters for DMA Transfer
CODE_008751:          REP #$20                            ;; 008751 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_008753:          LDA $03                             ;; 008753 : A5 03       ;
CODE_008755:          STA.W $2116                         ;; 008755 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008758:          LDA [$00],Y                         ;; 008758 : B7 00       ;
CODE_00875A:          XBA                                 ;; 00875A : EB          ;
CODE_00875B:          AND.W #$3FFF                        ;; 00875B : 29 FF 3F    ;
CODE_00875E:          TAX                                 ;; 00875E : AA          ;
CODE_00875F:          INX                                 ;; 00875F : E8          ;
CODE_008760:          INY                                 ;; 008760 : C8          ;
CODE_008761:          INY                                 ;; 008761 : C8          ;
CODE_008762:          TYA                                 ;; 008762 : 98          ;
CODE_008763:          CLC                                 ;; 008763 : 18          ;
CODE_008764:          ADC $00                             ;; 008764 : 65 00       ;
CODE_008766:          STA.W $4312                         ;; 008766 : 8D 12 43    ; A Address (Low Byte)
CODE_008769:          STX.W $4315                         ;; 008769 : 8E 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00876C:          LDA $05                             ;; 00876C : A5 05       ;
CODE_00876E:          BEQ CODE_008795                     ;; 00876E : F0 25       ;
CODE_008770:          SEP #$20                            ;; 008770 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_008772:          LDA $07                             ;; 008772 : A5 07       ;
CODE_008774:          STA.W $2115                         ;; 008774 : 8D 15 21    ; VRAM Address Increment Value
CODE_008777:          LDA.B #$02                          ;; 008777 : A9 02       ;
CODE_008779:          STA.W $420B                         ;; 008779 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00877C:          LDA.B #$19                          ;; 00877C : A9 19       ;
CODE_00877E:          STA.W $4311                         ;; 00877E : 8D 11 43    ; B Address
CODE_008781:          REP #$21                            ;; 008781 : C2 21       ; Accum (16 bit) 
CODE_008783:          LDA $03                             ;; 008783 : A5 03       ;
CODE_008785:          STA.W $2116                         ;; 008785 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008788:          TYA                                 ;; 008788 : 98          ;
CODE_008789:          ADC $00                             ;; 008789 : 65 00       ;
CODE_00878B:          INC A                               ;; 00878B : 1A          ;
CODE_00878C:          STA.W $4312                         ;; 00878C : 8D 12 43    ; A Address (Low Byte)
CODE_00878F:          STX.W $4315                         ;; 00878F : 8E 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_008792:          LDX.W #$0002                        ;; 008792 : A2 02 00    ;
CODE_008795:          STX $03                             ;; 008795 : 86 03       ;
CODE_008797:          TYA                                 ;; 008797 : 98          ;
CODE_008798:          CLC                                 ;; 008798 : 18          ;
CODE_008799:          ADC $03                             ;; 008799 : 65 03       ;
CODE_00879B:          TAY                                 ;; 00879B : A8          ;
CODE_00879C:          SEP #$20                            ;; 00879C : E2 20       ; Accum (8 bit) 
CODE_00879E:          LDA $07                             ;; 00879E : A5 07       ;
CODE_0087A0:          ORA.B #$80                          ;; 0087A0 : 09 80       ;
CODE_0087A2:          STA.W $2115                         ;; 0087A2 : 8D 15 21    ; VRAM Address Increment Value
CODE_0087A5:          LDA.B #$02                          ;; 0087A5 : A9 02       ;
CODE_0087A7:          STA.W $420B                         ;; 0087A7 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_0087AA:          JMP.W CODE_008726                   ;; 0087AA : 4C 26 87    ;
                                                          ;;                      ;
CODE_0087AD:          SEP #$30                            ;; 0087AD : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_0087AF:          LDA.W $1BE4                         ;; 0087AF : AD E4 1B    ; \  
CODE_0087B2:          BNE CODE_0087B7                     ;; 0087B2 : D0 03       ;  |If Layer 1 has to be updated, 
CODE_0087B4:          JMP.W CODE_0088DD                   ;; 0087B4 : 4C DD 88    ;  |jump to $88DD 
                                                          ;;                      ;
CODE_0087B7:          LDA RAM_IsVerticalLvl               ;; 0087B7 : A5 5B       ; \  
CODE_0087B9:          AND.B #$01                          ;; 0087B9 : 29 01       ;  | 
CODE_0087BB:          BEQ CODE_0087C0                     ;; 0087BB : F0 03       ;  |If on a vertical level, 
CODE_0087BD:          JMP.W CODE_008849                   ;; 0087BD : 4C 49 88    ;  |jump to $8849 
                                                          ;;                      ;
CODE_0087C0:          LDY.B #$81                          ;; 0087C0 : A0 81       ; \ Set "VRAM Address Increment Value" to x81 
CODE_0087C2:          STY.W $2115                         ;; 0087C2 : 8C 15 21    ; /  ; VRAM Address Increment Value
CODE_0087C5:          LDA.W $1BE5                         ;; 0087C5 : AD E5 1B    ;
CODE_0087C8:          STA.W $2116                         ;; 0087C8 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0087CB:          LDA.W $1BE4                         ;; 0087CB : AD E4 1B    ;
CODE_0087CE:          STA.W $2117                         ;; 0087CE : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0087D1:          LDX.B #$06                          ;; 0087D1 : A2 06       ;
CODE_0087D3:          LDA.W DATA_008A16,X                 ;; 0087D3 : BD 16 8A    ;
CODE_0087D6:          STA.W $4310,X                       ;; 0087D6 : 9D 10 43    ;
CODE_0087D9:          DEX                                 ;; 0087D9 : CA          ;
CODE_0087DA:          BPL CODE_0087D3                     ;; 0087DA : 10 F7       ;
CODE_0087DC:          LDA.B #$02                          ;; 0087DC : A9 02       ; \ Enable DMA channel 1 
CODE_0087DE:          STA.W $420B                         ;; 0087DE : 8D 0B 42    ; /  ; Regular DMA Channel Enable
CODE_0087E1:          STY.W $2115                         ;; 0087E1 : 8C 15 21    ; VRAM Address Increment Value
CODE_0087E4:          LDA.W $1BE5                         ;; 0087E4 : AD E5 1B    ;
CODE_0087E7:          STA.W $2116                         ;; 0087E7 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0087EA:          LDA.W $1BE4                         ;; 0087EA : AD E4 1B    ;
CODE_0087ED:          CLC                                 ;; 0087ED : 18          ;
CODE_0087EE:          ADC.B #$08                          ;; 0087EE : 69 08       ;
CODE_0087F0:          STA.W $2117                         ;; 0087F0 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0087F3:          LDX.B #$06                          ;; 0087F3 : A2 06       ;
CODE_0087F5:          LDA.W DATA_008A1D,X                 ;; 0087F5 : BD 1D 8A    ;
CODE_0087F8:          STA.W $4310,X                       ;; 0087F8 : 9D 10 43    ;
CODE_0087FB:          DEX                                 ;; 0087FB : CA          ;
CODE_0087FC:          BPL CODE_0087F5                     ;; 0087FC : 10 F7       ;
CODE_0087FE:          LDA.B #$02                          ;; 0087FE : A9 02       ;
CODE_008800:          STA.W $420B                         ;; 008800 : 8D 0B 42    ; \ Enable DMA channel 1 ; Regular DMA Channel Enable
CODE_008803:          STY.W $2115                         ;; 008803 : 8C 15 21    ; /  ; VRAM Address Increment Value
CODE_008806:          LDA.W $1BE5                         ;; 008806 : AD E5 1B    ;
CODE_008809:          INC A                               ;; 008809 : 1A          ;
CODE_00880A:          STA.W $2116                         ;; 00880A : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00880D:          LDA.W $1BE4                         ;; 00880D : AD E4 1B    ;
CODE_008810:          STA.W $2117                         ;; 008810 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008813:          LDX.B #$06                          ;; 008813 : A2 06       ;
CODE_008815:          LDA.W DATA_008A24,X                 ;; 008815 : BD 24 8A    ;
CODE_008818:          STA.W $4310,X                       ;; 008818 : 9D 10 43    ;
CODE_00881B:          DEX                                 ;; 00881B : CA          ;
CODE_00881C:          BPL CODE_008815                     ;; 00881C : 10 F7       ;
CODE_00881E:          LDA.B #$02                          ;; 00881E : A9 02       ; \ Enable DMA channel 1 
CODE_008820:          STA.W $420B                         ;; 008820 : 8D 0B 42    ; /  ; Regular DMA Channel Enable
CODE_008823:          STY.W $2115                         ;; 008823 : 8C 15 21    ; VRAM Address Increment Value
CODE_008826:          LDA.W $1BE5                         ;; 008826 : AD E5 1B    ;
CODE_008829:          INC A                               ;; 008829 : 1A          ;
CODE_00882A:          STA.W $2116                         ;; 00882A : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00882D:          LDA.W $1BE4                         ;; 00882D : AD E4 1B    ;
CODE_008830:          CLC                                 ;; 008830 : 18          ;
CODE_008831:          ADC.B #$08                          ;; 008831 : 69 08       ;
CODE_008833:          STA.W $2117                         ;; 008833 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008836:          LDX.B #$06                          ;; 008836 : A2 06       ;
CODE_008838:          LDA.W DATA_008A2B,X                 ;; 008838 : BD 2B 8A    ;
CODE_00883B:          STA.W $4310,X                       ;; 00883B : 9D 10 43    ;
CODE_00883E:          DEX                                 ;; 00883E : CA          ;
CODE_00883F:          BPL CODE_008838                     ;; 00883F : 10 F7       ;
CODE_008841:          LDA.B #$02                          ;; 008841 : A9 02       ; \ Enable DMA channel 1 
CODE_008843:          STA.W $420B                         ;; 008843 : 8D 0B 42    ; /  ; Regular DMA Channel Enable
CODE_008846:          JMP.W CODE_0088DD                   ;; 008846 : 4C DD 88    ;
                                                          ;;                      ;
CODE_008849:          LDY.B #$80                          ;; 008849 : A0 80       ;
CODE_00884B:          STY.W $2115                         ;; 00884B : 8C 15 21    ; VRAM Address Increment Value
CODE_00884E:          LDA.W $1BE5                         ;; 00884E : AD E5 1B    ;
CODE_008851:          STA.W $2116                         ;; 008851 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008854:          LDA.W $1BE4                         ;; 008854 : AD E4 1B    ;
CODE_008857:          STA.W $2117                         ;; 008857 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00885A:          LDX.B #$06                          ;; 00885A : A2 06       ;
CODE_00885C:          LDA.W DATA_008A16,X                 ;; 00885C : BD 16 8A    ;
CODE_00885F:          STA.W $4310,X                       ;; 00885F : 9D 10 43    ;
CODE_008862:          DEX                                 ;; 008862 : CA          ;
CODE_008863:          BPL CODE_00885C                     ;; 008863 : 10 F7       ;
CODE_008865:          LDA.B #$02                          ;; 008865 : A9 02       ;
CODE_008867:          STA.W $420B                         ;; 008867 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00886A:          STY.W $2115                         ;; 00886A : 8C 15 21    ; VRAM Address Increment Value
CODE_00886D:          LDA.W $1BE5                         ;; 00886D : AD E5 1B    ;
CODE_008870:          STA.W $2116                         ;; 008870 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008873:          LDA.W $1BE4                         ;; 008873 : AD E4 1B    ;
CODE_008876:          CLC                                 ;; 008876 : 18          ;
CODE_008877:          ADC.B #$04                          ;; 008877 : 69 04       ;
CODE_008879:          STA.W $2117                         ;; 008879 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00887C:          LDX.B #$06                          ;; 00887C : A2 06       ;
CODE_00887E:          LDA.W DATA_008A1D,X                 ;; 00887E : BD 1D 8A    ;
CODE_008881:          STA.W $4310,X                       ;; 008881 : 9D 10 43    ;
CODE_008884:          DEX                                 ;; 008884 : CA          ;
CODE_008885:          BPL CODE_00887E                     ;; 008885 : 10 F7       ;
CODE_008887:          LDA.B #$40                          ;; 008887 : A9 40       ;
CODE_008889:          STA.W $4315                         ;; 008889 : 8D 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00888C:          LDA.B #$02                          ;; 00888C : A9 02       ;
CODE_00888E:          STA.W $420B                         ;; 00888E : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008891:          STY.W $2115                         ;; 008891 : 8C 15 21    ; VRAM Address Increment Value
CODE_008894:          LDA.W $1BE5                         ;; 008894 : AD E5 1B    ;
CODE_008897:          CLC                                 ;; 008897 : 18          ;
CODE_008898:          ADC.B #$20                          ;; 008898 : 69 20       ;
CODE_00889A:          STA.W $2116                         ;; 00889A : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00889D:          LDA.W $1BE4                         ;; 00889D : AD E4 1B    ;
CODE_0088A0:          STA.W $2117                         ;; 0088A0 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0088A3:          LDX.B #$06                          ;; 0088A3 : A2 06       ;
CODE_0088A5:          LDA.W DATA_008A24,X                 ;; 0088A5 : BD 24 8A    ;
CODE_0088A8:          STA.W $4310,X                       ;; 0088A8 : 9D 10 43    ;
CODE_0088AB:          DEX                                 ;; 0088AB : CA          ;
CODE_0088AC:          BPL CODE_0088A5                     ;; 0088AC : 10 F7       ;
CODE_0088AE:          LDA.B #$02                          ;; 0088AE : A9 02       ;
CODE_0088B0:          STA.W $420B                         ;; 0088B0 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_0088B3:          STY.W $2115                         ;; 0088B3 : 8C 15 21    ; VRAM Address Increment Value
CODE_0088B6:          LDA.W $1BE5                         ;; 0088B6 : AD E5 1B    ;
CODE_0088B9:          CLC                                 ;; 0088B9 : 18          ;
CODE_0088BA:          ADC.B #$20                          ;; 0088BA : 69 20       ;
CODE_0088BC:          STA.W $2116                         ;; 0088BC : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0088BF:          LDA.W $1BE4                         ;; 0088BF : AD E4 1B    ;
CODE_0088C2:          CLC                                 ;; 0088C2 : 18          ;
CODE_0088C3:          ADC.B #$04                          ;; 0088C3 : 69 04       ;
CODE_0088C5:          STA.W $2117                         ;; 0088C5 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0088C8:          LDX.B #$06                          ;; 0088C8 : A2 06       ;
CODE_0088CA:          LDA.W DATA_008A2B,X                 ;; 0088CA : BD 2B 8A    ;
CODE_0088CD:          STA.W $4310,X                       ;; 0088CD : 9D 10 43    ;
CODE_0088D0:          DEX                                 ;; 0088D0 : CA          ;
CODE_0088D1:          BPL CODE_0088CA                     ;; 0088D1 : 10 F7       ;
CODE_0088D3:          LDA.B #$40                          ;; 0088D3 : A9 40       ;
CODE_0088D5:          STA.W $4315                         ;; 0088D5 : 8D 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_0088D8:          LDA.B #$02                          ;; 0088D8 : A9 02       ;
CODE_0088DA:          STA.W $420B                         ;; 0088DA : 8D 0B 42    ; Regular DMA Channel Enable
CODE_0088DD:          LDA.B #$00                          ;; 0088DD : A9 00       ;
CODE_0088DF:          STA.W $1BE4                         ;; 0088DF : 8D E4 1B    ;
CODE_0088E2:          LDA.W $1CE6                         ;; 0088E2 : AD E6 1C    ;
CODE_0088E5:          BNE CODE_0088EA                     ;; 0088E5 : D0 03       ;
CODE_0088E7:          JMP.W CODE_008A10                   ;; 0088E7 : 4C 10 8A    ;
                                                          ;;                      ;
CODE_0088EA:          LDA RAM_IsVerticalLvl               ;; 0088EA : A5 5B       ;
CODE_0088EC:          AND.B #$02                          ;; 0088EC : 29 02       ;
CODE_0088EE:          BEQ CODE_0088F3                     ;; 0088EE : F0 03       ;
CODE_0088F0:          JMP.W CODE_00897C                   ;; 0088F0 : 4C 7C 89    ;
                                                          ;;                      ;
CODE_0088F3:          LDY.B #$81                          ;; 0088F3 : A0 81       ;
CODE_0088F5:          STY.W $2115                         ;; 0088F5 : 8C 15 21    ; VRAM Address Increment Value
CODE_0088F8:          LDA.W $1CE7                         ;; 0088F8 : AD E7 1C    ;
CODE_0088FB:          STA.W $2116                         ;; 0088FB : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0088FE:          LDA.W $1CE6                         ;; 0088FE : AD E6 1C    ;
CODE_008901:          STA.W $2117                         ;; 008901 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008904:          LDX.B #$06                          ;; 008904 : A2 06       ;
CODE_008906:          LDA.W DATA_008A32,X                 ;; 008906 : BD 32 8A    ;
CODE_008909:          STA.W $4310,X                       ;; 008909 : 9D 10 43    ;
CODE_00890C:          DEX                                 ;; 00890C : CA          ;
CODE_00890D:          BPL CODE_008906                     ;; 00890D : 10 F7       ;
CODE_00890F:          LDA.B #$02                          ;; 00890F : A9 02       ;
CODE_008911:          STA.W $420B                         ;; 008911 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008914:          STY.W $2115                         ;; 008914 : 8C 15 21    ; VRAM Address Increment Value
CODE_008917:          LDA.W $1CE7                         ;; 008917 : AD E7 1C    ;
CODE_00891A:          STA.W $2116                         ;; 00891A : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00891D:          LDA.W $1CE6                         ;; 00891D : AD E6 1C    ;
CODE_008920:          CLC                                 ;; 008920 : 18          ;
CODE_008921:          ADC.B #$08                          ;; 008921 : 69 08       ;
CODE_008923:          STA.W $2117                         ;; 008923 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008926:          LDX.B #$06                          ;; 008926 : A2 06       ;
CODE_008928:          LDA.W DATA_008A39,X                 ;; 008928 : BD 39 8A    ;
CODE_00892B:          STA.W $4310,X                       ;; 00892B : 9D 10 43    ;
CODE_00892E:          DEX                                 ;; 00892E : CA          ;
CODE_00892F:          BPL CODE_008928                     ;; 00892F : 10 F7       ;
CODE_008931:          LDA.B #$02                          ;; 008931 : A9 02       ;
CODE_008933:          STA.W $420B                         ;; 008933 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008936:          STY.W $2115                         ;; 008936 : 8C 15 21    ; VRAM Address Increment Value
CODE_008939:          LDA.W $1CE7                         ;; 008939 : AD E7 1C    ;
CODE_00893C:          INC A                               ;; 00893C : 1A          ;
CODE_00893D:          STA.W $2116                         ;; 00893D : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008940:          LDA.W $1CE6                         ;; 008940 : AD E6 1C    ;
CODE_008943:          STA.W $2117                         ;; 008943 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008946:          LDX.B #$06                          ;; 008946 : A2 06       ;
CODE_008948:          LDA.W DATA_008A40,X                 ;; 008948 : BD 40 8A    ;
CODE_00894B:          STA.W $4310,X                       ;; 00894B : 9D 10 43    ;
CODE_00894E:          DEX                                 ;; 00894E : CA          ;
CODE_00894F:          BPL CODE_008948                     ;; 00894F : 10 F7       ;
CODE_008951:          LDA.B #$02                          ;; 008951 : A9 02       ;
CODE_008953:          STA.W $420B                         ;; 008953 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008956:          STY.W $2115                         ;; 008956 : 8C 15 21    ; VRAM Address Increment Value
CODE_008959:          LDA.W $1CE7                         ;; 008959 : AD E7 1C    ;
CODE_00895C:          INC A                               ;; 00895C : 1A          ;
CODE_00895D:          STA.W $2116                         ;; 00895D : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008960:          LDA.W $1CE6                         ;; 008960 : AD E6 1C    ;
CODE_008963:          CLC                                 ;; 008963 : 18          ;
CODE_008964:          ADC.B #$08                          ;; 008964 : 69 08       ;
CODE_008966:          STA.W $2117                         ;; 008966 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_008969:          LDX.B #$06                          ;; 008969 : A2 06       ;
CODE_00896B:          LDA.W DATA_008A47,X                 ;; 00896B : BD 47 8A    ;
CODE_00896E:          STA.W $4310,X                       ;; 00896E : 9D 10 43    ;
CODE_008971:          DEX                                 ;; 008971 : CA          ;
CODE_008972:          BPL CODE_00896B                     ;; 008972 : 10 F7       ;
CODE_008974:          LDA.B #$02                          ;; 008974 : A9 02       ;
CODE_008976:          STA.W $420B                         ;; 008976 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008979:          JMP.W CODE_008A10                   ;; 008979 : 4C 10 8A    ;
                                                          ;;                      ;
CODE_00897C:          LDY.B #$80                          ;; 00897C : A0 80       ;
CODE_00897E:          STY.W $2115                         ;; 00897E : 8C 15 21    ; VRAM Address Increment Value
CODE_008981:          LDA.W $1CE7                         ;; 008981 : AD E7 1C    ;
CODE_008984:          STA.W $2116                         ;; 008984 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_008987:          LDA.W $1CE6                         ;; 008987 : AD E6 1C    ;
CODE_00898A:          STA.W $2117                         ;; 00898A : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00898D:          LDX.B #$06                          ;; 00898D : A2 06       ;
CODE_00898F:          LDA.W DATA_008A32,X                 ;; 00898F : BD 32 8A    ;
CODE_008992:          STA.W $4310,X                       ;; 008992 : 9D 10 43    ;
CODE_008995:          DEX                                 ;; 008995 : CA          ;
CODE_008996:          BPL CODE_00898F                     ;; 008996 : 10 F7       ;
CODE_008998:          LDA.B #$02                          ;; 008998 : A9 02       ;
CODE_00899A:          STA.W $420B                         ;; 00899A : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00899D:          STY.W $2115                         ;; 00899D : 8C 15 21    ; VRAM Address Increment Value
CODE_0089A0:          LDA.W $1CE7                         ;; 0089A0 : AD E7 1C    ;
CODE_0089A3:          STA.W $2116                         ;; 0089A3 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0089A6:          LDA.W $1CE6                         ;; 0089A6 : AD E6 1C    ;
CODE_0089A9:          CLC                                 ;; 0089A9 : 18          ;
CODE_0089AA:          ADC.B #$04                          ;; 0089AA : 69 04       ;
CODE_0089AC:          STA.W $2117                         ;; 0089AC : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0089AF:          LDX.B #$06                          ;; 0089AF : A2 06       ;
CODE_0089B1:          LDA.W DATA_008A39,X                 ;; 0089B1 : BD 39 8A    ;
CODE_0089B4:          STA.W $4310,X                       ;; 0089B4 : 9D 10 43    ;
CODE_0089B7:          DEX                                 ;; 0089B7 : CA          ;
CODE_0089B8:          BPL CODE_0089B1                     ;; 0089B8 : 10 F7       ;
CODE_0089BA:          LDA.B #$40                          ;; 0089BA : A9 40       ;
CODE_0089BC:          STA.W $4315                         ;; 0089BC : 8D 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_0089BF:          LDA.B #$02                          ;; 0089BF : A9 02       ;
CODE_0089C1:          STA.W $420B                         ;; 0089C1 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_0089C4:          STY.W $2115                         ;; 0089C4 : 8C 15 21    ; VRAM Address Increment Value
CODE_0089C7:          LDA.W $1CE7                         ;; 0089C7 : AD E7 1C    ;
CODE_0089CA:          CLC                                 ;; 0089CA : 18          ;
CODE_0089CB:          ADC.B #$20                          ;; 0089CB : 69 20       ;
CODE_0089CD:          STA.W $2116                         ;; 0089CD : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0089D0:          LDA.W $1CE6                         ;; 0089D0 : AD E6 1C    ;
CODE_0089D3:          STA.W $2117                         ;; 0089D3 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0089D6:          LDX.B #$06                          ;; 0089D6 : A2 06       ;
CODE_0089D8:          LDA.W DATA_008A40,X                 ;; 0089D8 : BD 40 8A    ;
CODE_0089DB:          STA.W $4310,X                       ;; 0089DB : 9D 10 43    ;
CODE_0089DE:          DEX                                 ;; 0089DE : CA          ;
CODE_0089DF:          BPL CODE_0089D8                     ;; 0089DF : 10 F7       ;
CODE_0089E1:          LDA.B #$02                          ;; 0089E1 : A9 02       ;
CODE_0089E3:          STA.W $420B                         ;; 0089E3 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_0089E6:          STY.W $2115                         ;; 0089E6 : 8C 15 21    ; VRAM Address Increment Value
CODE_0089E9:          LDA.W $1CE7                         ;; 0089E9 : AD E7 1C    ;
CODE_0089EC:          CLC                                 ;; 0089EC : 18          ;
CODE_0089ED:          ADC.B #$20                          ;; 0089ED : 69 20       ;
CODE_0089EF:          STA.W $2116                         ;; 0089EF : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0089F2:          LDA.W $1CE6                         ;; 0089F2 : AD E6 1C    ;
CODE_0089F5:          CLC                                 ;; 0089F5 : 18          ;
CODE_0089F6:          ADC.B #$04                          ;; 0089F6 : 69 04       ;
CODE_0089F8:          STA.W $2117                         ;; 0089F8 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_0089FB:          LDX.B #$06                          ;; 0089FB : A2 06       ;
CODE_0089FD:          LDA.W DATA_008A47,X                 ;; 0089FD : BD 47 8A    ;
CODE_008A00:          STA.W $4310,X                       ;; 008A00 : 9D 10 43    ;
CODE_008A03:          DEX                                 ;; 008A03 : CA          ;
CODE_008A04:          BPL CODE_0089FD                     ;; 008A04 : 10 F7       ;
CODE_008A06:          LDA.B #$40                          ;; 008A06 : A9 40       ;
CODE_008A08:          STA.W $4315                         ;; 008A08 : 8D 15 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_008A0B:          LDA.B #$02                          ;; 008A0B : A9 02       ;
CODE_008A0D:          STA.W $420B                         ;; 008A0D : 8D 0B 42    ; Regular DMA Channel Enable
CODE_008A10:          LDA.B #$00                          ;; 008A10 : A9 00       ;
CODE_008A12:          STA.W $1CE6                         ;; 008A12 : 8D E6 1C    ;
Return008A15:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008A16:          .db $01,$18,$E6,$1B,$00,$40,$00     ;; 008A16               ;
                                                          ;;                      ;
DATA_008A1D:          .db $01,$18,$26,$1C,$00,$2C,$00     ;; 008A1D               ;
                                                          ;;                      ;
DATA_008A24:          .db $01,$18,$66,$1C,$00,$40,$00     ;; 008A24               ;
                                                          ;;                      ;
DATA_008A2B:          .db $01,$18,$A6,$1C,$00,$2C,$00     ;; 008A2B               ;
                                                          ;;                      ;
DATA_008A32:          .db $01,$18,$E8,$1C,$00,$40,$00     ;; 008A32               ;
                                                          ;;                      ;
DATA_008A39:          .db $01,$18,$28,$1D,$00,$2C,$00     ;; 008A39               ;
                                                          ;;                      ;
DATA_008A40:          .db $01,$18,$68,$1D,$00,$40,$00     ;; 008A40               ;
                                                          ;;                      ;
DATA_008A47:          .db $01,$18,$A8,$1D,$00,$2C,$00     ;; 008A47               ;
                                                          ;;                      ;
ClearStack:           REP #$30                            ;; ?QPWZ? : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_008A50:          LDX.W #$1FFE                        ;; 008A50 : A2 FE 1F    ;
CODE_008A53:          STZ $00,X                           ;; 008A53 : 74 00       ;
CODE_008A55:          DEX                                 ;; 008A55 : CA          ;
CODE_008A56:          DEX                                 ;; 008A56 : CA          ;
CODE_008A57:          CPX.W #$01FF                        ;; 008A57 : E0 FF 01    ;
CODE_008A5A:          BPL CODE_008A61                     ;; 008A5A : 10 05       ;
CODE_008A5C:          CPX.W #$0100                        ;; 008A5C : E0 00 01    ;
CODE_008A5F:          BPL CODE_008A55                     ;; 008A5F : 10 F4       ;
CODE_008A61:          CPX.W #$FFFE                        ;; 008A61 : E0 FE FF    ;
CODE_008A64:          BNE CODE_008A53                     ;; 008A64 : D0 ED       ;
CODE_008A66:          LDA.W #$0000                        ;; 008A66 : A9 00 00    ;
CODE_008A69:          STA.L $7F837B                       ;; 008A69 : 8F 7B 83 7F ;
CODE_008A6D:          STZ.W $0681                         ;; 008A6D : 9C 81 06    ;
CODE_008A70:          SEP #$30                            ;; 008A70 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_008A72:          LDA.B #$FF                          ;; 008A72 : A9 FF       ;
CODE_008A74:          STA.L $7F837D                       ;; 008A74 : 8F 7D 83 7F ;
Return008A78:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
SetUpScreen:          STZ.W $2133                         ;; ?QPWZ? : 9C 33 21    ; Set "Screen Initial Settings" to x00 ; Screen Initial Settings
CODE_008A7C:          STZ.W $2106                         ;; 008A7C : 9C 06 21    ; Turn off mosaic ; Mosaic Size and BG Enable
CODE_008A7F:          LDA.B #$23                          ;; 008A7F : A9 23       ;
CODE_008A81:          STA.W $2107                         ;; 008A81 : 8D 07 21    ; BG 1 Address and Size
CODE_008A84:          LDA.B #$33                          ;; 008A84 : A9 33       ;
CODE_008A86:          STA.W $2108                         ;; 008A86 : 8D 08 21    ; ; BG 2 Address and Size
CODE_008A89:          LDA.B #$53                          ;; 008A89 : A9 53       ;
CODE_008A8B:          STA.W $2109                         ;; 008A8B : 8D 09 21    ; BG 3 Address and Size
CODE_008A8E:          LDA.B #$00                          ;; 008A8E : A9 00       ;
CODE_008A90:          STA.W $210B                         ;; 008A90 : 8D 0B 21    ; BG 1 & 2 Tile Data Designation
CODE_008A93:          LDA.B #$04                          ;; 008A93 : A9 04       ;
CODE_008A95:          STA.W $210C                         ;; 008A95 : 8D 0C 21    ; BG 3 & 4 Tile Data Designation
CODE_008A98:          STZ $41                             ;; 008A98 : 64 41       ;
CODE_008A9A:          STZ $42                             ;; 008A9A : 64 42       ;
CODE_008A9C:          STZ $43                             ;; 008A9C : 64 43       ;
CODE_008A9E:          STZ.W $212A                         ;; 008A9E : 9C 2A 21    ; BG 1, 2, 3 and 4 Window Logic Settings
CODE_008AA1:          STZ.W $212B                         ;; 008AA1 : 9C 2B 21    ; Color and OBJ Window Logic Settings
CODE_008AA4:          STZ.W $212E                         ;; 008AA4 : 9C 2E 21    ; Window Mask Designation for Main Screen
CODE_008AA7:          STZ.W $212F                         ;; 008AA7 : 9C 2F 21    ; Window Mask Designation for Sub Screen
CODE_008AAA:          LDA.B #$02                          ;; 008AAA : A9 02       ;
CODE_008AAC:          STA $44                             ;; 008AAC : 85 44       ;
CODE_008AAE:          LDA.B #$80                          ;; 008AAE : A9 80       ; \ Set Mode7 "Screen Over" to %10000000, disable Mode7 flipping 
CODE_008AB0:          STA.W $211A                         ;; 008AB0 : 8D 1A 21    ; /  ; Initial Setting for Mode 7
Return008AB3:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008AB4:          .db $00,$00,$FE,$00,$00,$00,$FE,$00 ;; 008AB4               ;
DATA_008ABC:          .db $00,$00,$02,$00,$00,$00,$02,$00 ;; 008ABC               ;
                      .db $00,$00,$00,$01,$FF,$FF,$00,$10 ;; ?QPWZ?               ;
                      .db $F0                             ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_008ACD:          LDA $39                             ;; 008ACD : A5 39       ;
CODE_008ACF:          STA $00                             ;; 008ACF : 85 00       ;
CODE_008AD1:          REP #$30                            ;; 008AD1 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_008AD3:          JSR.W CODE_008AE8                   ;; 008AD3 : 20 E8 8A    ;
CODE_008AD6:          LDA $38                             ;; 008AD6 : A5 38       ;
CODE_008AD8:          STA $00                             ;; 008AD8 : 85 00       ;
CODE_008ADA:          REP #$30                            ;; 008ADA : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_008ADC:          LDA $2E                             ;; 008ADC : A5 2E       ;
CODE_008ADE:          STA $34                             ;; 008ADE : 85 34       ;
CODE_008AE0:          LDA $30                             ;; 008AE0 : A5 30       ;
CODE_008AE2:          EOR.W #$FFFF                        ;; 008AE2 : 49 FF FF    ;
CODE_008AE5:          INC A                               ;; 008AE5 : 1A          ;
CODE_008AE6:          STA $32                             ;; 008AE6 : 85 32       ;
CODE_008AE8:          LDA $36                             ;; 008AE8 : A5 36       ;
CODE_008AEA:          ASL                                 ;; 008AEA : 0A          ;
CODE_008AEB:          PHA                                 ;; 008AEB : 48          ;
CODE_008AEC:          XBA                                 ;; 008AEC : EB          ;
CODE_008AED:          AND.W #$0003                        ;; 008AED : 29 03 00    ;
CODE_008AF0:          ASL                                 ;; 008AF0 : 0A          ;
CODE_008AF1:          TAY                                 ;; 008AF1 : A8          ;
CODE_008AF2:          PLA                                 ;; 008AF2 : 68          ;
CODE_008AF3:          AND.W #$00FE                        ;; 008AF3 : 29 FE 00    ;
CODE_008AF6:          EOR.W DATA_008AB4,Y                 ;; 008AF6 : 59 B4 8A    ;
CODE_008AF9:          CLC                                 ;; 008AF9 : 18          ;
CODE_008AFA:          ADC.W DATA_008ABC,Y                 ;; 008AFA : 79 BC 8A    ;
CODE_008AFD:          TAX                                 ;; 008AFD : AA          ;
CODE_008AFE:          JSR.W CODE_008B2B                   ;; 008AFE : 20 2B 8B    ;
CODE_008B01:          CPY.W #$0004                        ;; 008B01 : C0 04 00    ;
CODE_008B04:          BCC CODE_008B0A                     ;; 008B04 : 90 04       ;
CODE_008B06:          EOR.W #$FFFF                        ;; 008B06 : 49 FF FF    ;
CODE_008B09:          INC A                               ;; 008B09 : 1A          ;
CODE_008B0A:          STA $30                             ;; 008B0A : 85 30       ;
CODE_008B0C:          TXA                                 ;; 008B0C : 8A          ;
CODE_008B0D:          EOR.W #$00FE                        ;; 008B0D : 49 FE 00    ;
CODE_008B10:          CLC                                 ;; 008B10 : 18          ;
CODE_008B11:          ADC.W #$0002                        ;; 008B11 : 69 02 00    ;
CODE_008B14:          AND.W #$01FF                        ;; 008B14 : 29 FF 01    ;
CODE_008B17:          TAX                                 ;; 008B17 : AA          ;
CODE_008B18:          JSR.W CODE_008B2B                   ;; 008B18 : 20 2B 8B    ;
CODE_008B1B:          DEY                                 ;; 008B1B : 88          ;
CODE_008B1C:          DEY                                 ;; 008B1C : 88          ;
CODE_008B1D:          CPY.W #$0004                        ;; 008B1D : C0 04 00    ;
CODE_008B20:          BCS CODE_008B26                     ;; 008B20 : B0 04       ;
CODE_008B22:          EOR.W #$FFFF                        ;; 008B22 : 49 FF FF    ;
CODE_008B25:          INC A                               ;; 008B25 : 1A          ;
CODE_008B26:          STA $2E                             ;; 008B26 : 85 2E       ;
CODE_008B28:          SEP #$30                            ;; 008B28 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return008B2A:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_008B2B:          SEP #$20                            ;; 008B2B : E2 20       ; Accum (8 bit) 
CODE_008B2D:          LDA.W DATA_008B58,X                 ;; 008B2D : BD 58 8B    ;
CODE_008B30:          BEQ CODE_008B34                     ;; 008B30 : F0 02       ;
CODE_008B32:          LDA $00                             ;; 008B32 : A5 00       ;
CODE_008B34:          STA $01                             ;; 008B34 : 85 01       ;
CODE_008B36:          LDA.W DATA_008B57,X                 ;; 008B36 : BD 57 8B    ;
CODE_008B39:          STA.W $4202                         ;; 008B39 : 8D 02 42    ; Multiplicand A
CODE_008B3C:          LDA $00                             ;; 008B3C : A5 00       ;
CODE_008B3E:          STA.W $4203                         ;; 008B3E : 8D 03 42    ; Multplier B
CODE_008B41:          NOP                                 ;; 008B41 : EA          ;
CODE_008B42:          NOP                                 ;; 008B42 : EA          ;
CODE_008B43:          NOP                                 ;; 008B43 : EA          ;
CODE_008B44:          NOP                                 ;; 008B44 : EA          ;
CODE_008B45:          LDA.W $4217                         ;; 008B45 : AD 17 42    ; Product/Remainder Result (High Byte)
CODE_008B48:          CLC                                 ;; 008B48 : 18          ;
CODE_008B49:          ADC $01                             ;; 008B49 : 65 01       ;
CODE_008B4B:          XBA                                 ;; 008B4B : EB          ;
CODE_008B4C:          LDA.W $4216                         ;; 008B4C : AD 16 42    ; Product/Remainder Result (Low Byte)
CODE_008B4F:          REP #$20                            ;; 008B4F : C2 20       ; Accum (16 bit) 
CODE_008B51:          LSR                                 ;; 008B51 : 4A          ;
CODE_008B52:          LSR                                 ;; 008B52 : 4A          ;
CODE_008B53:          LSR                                 ;; 008B53 : 4A          ;
CODE_008B54:          LSR                                 ;; 008B54 : 4A          ;
CODE_008B55:          LSR                                 ;; 008B55 : 4A          ;
Return008B56:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008B57:          .db $00                             ;; 008B57               ;
                                                          ;;                      ;
DATA_008B58:          .db $00,$03,$00,$06,$00,$09,$00,$0C ;; 008B58               ;
                      .db $00,$0F,$00,$12,$00,$15,$00,$19 ;; ?QPWZ?               ;
                      .db $00,$1C,$00,$1F,$00,$22,$00,$25 ;; ?QPWZ?               ;
                      .db $00,$28,$00,$2B,$00,$2E,$00,$31 ;; ?QPWZ?               ;
                      .db $00,$35,$00,$38,$00,$3B,$00,$3E ;; ?QPWZ?               ;
                      .db $00,$41,$00,$44,$00,$47,$00,$4A ;; ?QPWZ?               ;
                      .db $00,$4D,$00,$50,$00,$53,$00,$56 ;; ?QPWZ?               ;
                      .db $00,$59,$00,$5C,$00,$5F,$00,$61 ;; ?QPWZ?               ;
                      .db $00,$64,$00,$67,$00,$6A,$00,$6D ;; ?QPWZ?               ;
                      .db $00,$70,$00,$73,$00,$75,$00,$78 ;; ?QPWZ?               ;
                      .db $00,$7B,$00,$7E,$00,$80,$00,$83 ;; ?QPWZ?               ;
                      .db $00,$86,$00,$88,$00,$8B,$00,$8E ;; ?QPWZ?               ;
                      .db $00,$90,$00,$93,$00,$95,$00,$98 ;; ?QPWZ?               ;
                      .db $00,$9B,$00,$9D,$00,$9F,$00,$A2 ;; ?QPWZ?               ;
                      .db $00,$A4,$00,$A7,$00,$A9,$00,$AB ;; ?QPWZ?               ;
                      .db $00,$AE,$00,$B0,$00,$B2,$00,$B5 ;; ?QPWZ?               ;
                      .db $00,$B7,$00,$B9,$00,$BB,$00,$BD ;; ?QPWZ?               ;
                      .db $00,$BF,$00,$C1,$00,$C3,$00,$C5 ;; ?QPWZ?               ;
                      .db $00,$C7,$00,$C9,$00,$CB,$00,$CD ;; ?QPWZ?               ;
                      .db $00,$CF,$00,$D1,$00,$D3,$00,$D4 ;; ?QPWZ?               ;
                      .db $00,$D6,$00,$D8,$00,$D9,$00,$DB ;; ?QPWZ?               ;
                      .db $00,$DD,$00,$DE,$00,$E0,$00,$E1 ;; ?QPWZ?               ;
                      .db $00,$E3,$00,$E4,$00,$E6,$00,$E7 ;; ?QPWZ?               ;
                      .db $00,$E8,$00,$EA,$00,$EB,$00,$EC ;; ?QPWZ?               ;
                      .db $00,$ED,$00,$EE,$00,$EF,$00,$F1 ;; ?QPWZ?               ;
                      .db $00,$F2,$00,$F3,$00,$F4,$00,$F4 ;; ?QPWZ?               ;
                      .db $00,$F5,$00,$F6,$00,$F7,$00,$F8 ;; ?QPWZ?               ;
                      .db $00,$F9,$00,$F9,$00,$FA,$00,$FB ;; ?QPWZ?               ;
                      .db $00,$FB,$00,$FC,$00,$FC,$00,$FD ;; ?QPWZ?               ;
                      .db $00,$FD,$00,$FE,$00,$FE,$00,$FE ;; ?QPWZ?               ;
                      .db $00,$FF,$00,$FF,$00,$FF,$00,$FF ;; ?QPWZ?               ;
                      .db $00,$FF,$00,$FF,$00,$FF,$00,$00 ;; ?QPWZ?               ;
                      .db $01,$B7,$3C,$B7,$BC,$B8,$3C,$B9 ;; ?QPWZ?               ;
                      .db $3C,$BA,$3C,$BB,$3C,$BA,$3C,$BA ;; ?QPWZ?               ;
                      .db $BC,$BC,$3C,$BD,$3C,$BE,$3C,$BF ;; ?QPWZ?               ;
                      .db $3C,$C0,$3C,$B7,$BC,$C1,$3C,$B9 ;; ?QPWZ?               ;
                      .db $3C,$C2,$3C,$C2,$BC,$B7,$3C,$C0 ;; ?QPWZ?               ;
                      .db $FC,$3A,$38,$3B,$38,$3B,$38,$3A ;; ?QPWZ?               ;
                      .db $78                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_008C89:          .db $30,$28,$31,$28,$32,$28,$33,$28 ;; 008C89               ;
                      .db $34,$28,$FC,$38,$FC,$3C,$FC,$3C ;; ?QPWZ?               ;
                      .db $FC,$3C,$FC,$3C,$FC,$38,$FC,$38 ;; ?QPWZ?               ;
                      .db $4A,$38,$FC,$38,$FC,$38,$4A,$78 ;; ?QPWZ?               ;
                      .db $FC,$38,$3D,$3C,$3E,$3C,$3F,$3C ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$FC,$38,$2E,$3C ;; ?QPWZ?               ;
                      .db $26,$38,$FC,$38,$FC,$38,$00,$38 ;; ?QPWZ?               ;
                      .db $26,$38,$FC,$38,$00,$38,$FC,$38 ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$64,$28,$26,$38 ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$FC,$38,$4A,$38 ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$4A,$78,$FC,$38 ;; ?QPWZ?               ;
                      .db $FE,$3C,$FE,$3C,$00,$3C,$FC,$38 ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$FC,$38,$FC,$38 ;; ?QPWZ?               ;
                      .db $FC,$38,$FC,$38,$00,$38,$3A,$B8 ;; ?QPWZ?               ;
                      .db $3B,$B8,$3B,$B8,$3A,$F8         ;; ?QPWZ?               ;
                                                          ;;                      ;
GM04DoDMA:            LDA.B #$80                          ;; ?QPWZ? : A9 80       ; More DMA ; Accum (8 bit) 
CODE_008D01:          STA.W $2115                         ;; 008D01 : 8D 15 21    ; Increment when $2119 accessed ; VRAM Address Increment Value
CODE_008D04:          LDA.B #$2E                          ;; 008D04 : A9 2E       ; \VRAM address = #$502E 
CODE_008D06:          STA.W $2116                         ;; 008D06 : 8D 16 21    ;  | ; Address for VRAM Read/Write (Low Byte)
CODE_008D09:          LDA.B #$50                          ;; 008D09 : A9 50       ;  | 
CODE_008D0B:          STA.W $2117                         ;; 008D0B : 8D 17 21    ; / ; Address for VRAM Read/Write (High Byte)
CODE_008D0E:          LDX.B #$06                          ;; 008D0E : A2 06       ;
CODE_008D10:          LDA.W DATA_008D90,X                 ;; 008D10 : BD 90 8D    ;
CODE_008D13:          STA.W $4310,X                       ;; 008D13 : 9D 10 43    ; Load up the DMA regs 
CODE_008D16:          DEX                                 ;; 008D16 : CA          ; DMA Source = 8C:8118 (...) 
CODE_008D17:          BPL CODE_008D10                     ;; 008D17 : 10 F7       ; Dest = $2118, Transfer: #$08 bytes 
CODE_008D19:          LDA.B #$02                          ;; 008D19 : A9 02       ;
CODE_008D1B:          STA.W $420B                         ;; 008D1B : 8D 0B 42    ; Do the DMA ; Regular DMA Channel Enable
CODE_008D1E:          LDA.B #$80                          ;; 008D1E : A9 80       ; \ Set VRAM mode = same as above 
CODE_008D20:          STA.W $2115                         ;; 008D20 : 8D 15 21    ;  |Address = #$5042 ; VRAM Address Increment Value
CODE_008D23:          LDA.B #$42                          ;; 008D23 : A9 42       ;  | 
CODE_008D25:          STA.W $2116                         ;; 008D25 : 8D 16 21    ;  | ; Address for VRAM Read/Write (Low Byte)
CODE_008D28:          LDA.B #$50                          ;; 008D28 : A9 50       ;  | 
CODE_008D2A:          STA.W $2117                         ;; 008D2A : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_008D2D:          LDX.B #$06                          ;; 008D2D : A2 06       ; \ Set up more DMA 
CODE_008D2F:          LDA.W DATA_008D97,X                 ;; 008D2F : BD 97 8D    ;  |Dest = $2100 
CODE_008D32:          STA.W $4310,X                       ;; 008D32 : 9D 10 43    ;  |Fixed source address = $89:1801 (Lunar Address: 7E:1801) 
CODE_008D35:          DEX                                 ;; 008D35 : CA          ;  |#$808C bytes to transfer 
CODE_008D36:          BPL CODE_008D2F                     ;; 008D36 : 10 F7       ; /Type = One reg write once 
CODE_008D38:          LDA.B #$02                          ;; 008D38 : A9 02       ;
CODE_008D3A:          STA.W $420B                         ;; 008D3A : 8D 0B 42    ; Start DMA ; Regular DMA Channel Enable
CODE_008D3D:          LDA.B #$80                          ;; 008D3D : A9 80       ; \prep VRAM for another write 
CODE_008D3F:          STA.W $2115                         ;; 008D3F : 8D 15 21    ;  | ; VRAM Address Increment Value
CODE_008D42:          LDA.B #$63                          ;; 008D42 : A9 63       ;  | 
CODE_008D44:          STA.W $2116                         ;; 008D44 : 8D 16 21    ;  | ; Address for VRAM Read/Write (Low Byte)
CODE_008D47:          LDA.B #$50                          ;; 008D47 : A9 50       ;  | 
CODE_008D49:          STA.W $2117                         ;; 008D49 : 8D 17 21    ; / ; Address for VRAM Read/Write (High Byte)
CODE_008D4C:          LDX.B #$06                          ;; 008D4C : A2 06       ; \ Load up DMA again 
CODE_008D4E:          LDA.W DATA_008D9E,X                 ;; 008D4E : BD 9E 8D    ;  |Dest = $2118 
CODE_008D51:          STA.W $4310,X                       ;; 008D51 : 9D 10 43    ;  |Source Address = $39:8CC1 
CODE_008D54:          DEX                                 ;; 008D54 : CA          ;  |Size = #$0100 bytes 
CODE_008D55:          BPL CODE_008D4E                     ;; 008D55 : 10 F7       ; /Type = Two reg write once 
CODE_008D57:          LDA.B #$02                          ;; 008D57 : A9 02       ; \Start Transfer 
CODE_008D59:          STA.W $420B                         ;; 008D59 : 8D 0B 42    ; / ; Regular DMA Channel Enable
CODE_008D5C:          LDA.B #$80                          ;; 008D5C : A9 80       ; \ 
CODE_008D5E:          STA.W $2115                         ;; 008D5E : 8D 15 21    ;  |Set up VRAM once more ; VRAM Address Increment Value
CODE_008D61:          LDA.B #$8E                          ;; 008D61 : A9 8E       ;  | 
CODE_008D63:          STA.W $2116                         ;; 008D63 : 8D 16 21    ;  | ; Address for VRAM Read/Write (Low Byte)
CODE_008D66:          LDA.B #$50                          ;; 008D66 : A9 50       ;  | 
CODE_008D68:          STA.W $2117                         ;; 008D68 : 8D 17 21    ; / ; Address for VRAM Read/Write (High Byte)
CODE_008D6B:          LDX.B #$06                          ;; 008D6B : A2 06       ; \Last DMA... 
CODE_008D6D:          LDA.W DATA_008DA5,X                 ;; 008D6D : BD A5 8D    ;  |Reg = $2118 Type = Two reg write once 
CODE_008D70:          STA.W $4310,X                       ;; 008D70 : 9D 10 43    ;  |Source Address = $08:8CF7 
CODE_008D73:          DEX                                 ;; 008D73 : CA          ;  |Size = #$9C00 bytes (o_o) 
CODE_008D74:          BPL CODE_008D6D                     ;; 008D74 : 10 F7       ; / 
CODE_008D76:          LDA.B #$02                          ;; 008D76 : A9 02       ; \Transfer 
CODE_008D78:          STA.W $420B                         ;; 008D78 : 8D 0B 42    ; / ; Regular DMA Channel Enable
CODE_008D7B:          LDX.B #$36                          ;; 008D7B : A2 36       ; \Copy some data into RAM 
CODE_008D7D:          LDY.B #$6C                          ;; 008D7D : A0 6C       ;  | 
CODE_008D7F:          LDA.W DATA_008C89,Y                 ;; 008D7F : B9 89 8C    ;  | 
CODE_008D82:          STA.W $0EF9,X                       ;; 008D82 : 9D F9 0E    ;  | 59
CODE_008D85:          DEY                                 ;; 008D85 : 88          ;  | 
CODE_008D86:          DEY                                 ;; 008D86 : 88          ;  | 
CODE_008D87:          DEX                                 ;; 008D87 : CA          ;  | 
CODE_008D88:          BPL CODE_008D7F                     ;; 008D88 : 10 F5       ; / 
CODE_008D8A:          LDA.B #$28                          ;; 008D8A : A9 28       ;
CODE_008D8C:          STA.W $0F30                         ;; 008D8C : 8D 30 0F    ; #$28 -> Timer frame counter 
Return008D8F:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008D90:          .db $01,$18,$81,$8C,$00,$08,$00     ;; 008D90               ;
                                                          ;;                      ;
DATA_008D97:          .db $01,$18,$89,$8C,$00,$38,$00     ;; 008D97               ;
                                                          ;;                      ;
DATA_008D9E:          .db $01,$18,$C1,$8C,$00,$36,$00     ;; 008D9E               ;
                                                          ;;                      ;
DATA_008DA5:          .db $01,$18,$F7,$8C,$00,$08,$00     ;; 008DA5               ;
                                                          ;;                      ;
DrawStatusBar:        STZ.W $2115                         ;; ?QPWZ? : 9C 15 21    ; Set VRAM Address Increment Value to x00 ; VRAM Address Increment Value
CODE_008DAF:          LDA.B #$42                          ;; 008DAF : A9 42       ; \  
CODE_008DB1:          STA.W $2116                         ;; 008DB1 : 8D 16 21    ;  |Set Address for VRAM Read/Write to x5042 ; Address for VRAM Read/Write (Low Byte)
CODE_008DB4:          LDA.B #$50                          ;; 008DB4 : A9 50       ;  | 
CODE_008DB6:          STA.W $2117                         ;; 008DB6 : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_008DB9:          LDX.B #$06                          ;; 008DB9 : A2 06       ; \  
CODE_008DBB:          LDA.W DMAdata_StBr1,X               ;; 008DBB : BD E7 8D    ;  |Load settings from DMAdata_StBr1 into DMA channel 1 
CODE_008DBE:          STA.W $4310,X                       ;; 008DBE : 9D 10 43    ;  | 
CODE_008DC1:          DEX                                 ;; 008DC1 : CA          ;  | 
CODE_008DC2:          BPL CODE_008DBB                     ;; 008DC2 : 10 F7       ; /  
CODE_008DC4:          LDA.B #$02                          ;; 008DC4 : A9 02       ; \ Activate DMA channel 1 
CODE_008DC6:          STA.W $420B                         ;; 008DC6 : 8D 0B 42    ; /  ; Regular DMA Channel Enable
CODE_008DC9:          STZ.W $2115                         ;; 008DC9 : 9C 15 21    ; Set VRAM Address Increment Value to x00 ; VRAM Address Increment Value
CODE_008DCC:          LDA.B #$63                          ;; 008DCC : A9 63       ; \  
CODE_008DCE:          STA.W $2116                         ;; 008DCE : 8D 16 21    ;  |Set Address for VRAM Read/Write to x5063 ; Address for VRAM Read/Write (Low Byte)
CODE_008DD1:          LDA.B #$50                          ;; 008DD1 : A9 50       ;  | 
CODE_008DD3:          STA.W $2117                         ;; 008DD3 : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_008DD6:          LDX.B #$06                          ;; 008DD6 : A2 06       ; \  
CODE_008DD8:          LDA.W DMAdata_StBr2,X               ;; 008DD8 : BD EE 8D    ;  |Load settings from DMAdata_StBr2 into DMA channel 1 
CODE_008DDB:          STA.W $4310,X                       ;; 008DDB : 9D 10 43    ;  | 
CODE_008DDE:          DEX                                 ;; 008DDE : CA          ;  | 
CODE_008DDF:          BPL CODE_008DD8                     ;; 008DDF : 10 F7       ; /  
CODE_008DE1:          LDA.B #$02                          ;; 008DE1 : A9 02       ; \ Activate DMA channel 1 
CODE_008DE3:          STA.W $420B                         ;; 008DE3 : 8D 0B 42    ; /  ; Regular DMA Channel Enable
Return008DE6:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DMAdata_StBr1:        .db $00,$18,$F9,$0E,$00,$1C,$00     ;; StBr1                ;
                                                          ;;                      ;
DMAdata_StBr2:        .db $00,$18,$15,$0F,$00,$1B,$00     ;; StBr2                ;
                                                          ;;                      ;
DATA_008DF5:          .db $40,$41,$42,$43                 ;; 008DF5               ;
                                                          ;;                      ;
DATA_008DF9:          .db $44,$24,$26,$48,$0E             ;; 008DF9               ;
                                                          ;;                      ;
DATA_008DFE:          .db $00,$02,$04                     ;; 008DFE               ;
                                                          ;;                      ;
DATA_008E01:          .db $02,$08,$0A,$00,$04             ;; 008E01               ;
                                                          ;;                      ;
DATA_008E06:          .db $B7                             ;; 008E06               ;
                                                          ;;                      ;
DATA_008E07:          .db $C3,$B8,$B9,$BA,$BB,$BA,$BF,$BC ;; 008E07               ;
                      .db $BD,$BE,$BF,$C0,$C3,$C1,$B9,$C2 ;; ?QPWZ?               ;
                      .db $C4,$B7,$C5                     ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_008E1A:          LDA.W $1493                         ;; 008E1A : AD 93 14    ; \  
CODE_008E1D:          ORA RAM_SpritesLocked               ;; 008E1D : 05 9D       ;  |If level is ending or sprites are locked, 
CODE_008E1F:          BNE CODE_008E6F                     ;; 008E1F : D0 4E       ; / branch to $8E6F 
CODE_008E21:          LDA.W $0D9B                         ;; 008E21 : AD 9B 0D    ;
CODE_008E24:          CMP.B #$C1                          ;; 008E24 : C9 C1       ;
CODE_008E26:          BEQ CODE_008E6F                     ;; 008E26 : F0 47       ;
CODE_008E28:          DEC.W $0F30                         ;; 008E28 : CE 30 0F    ;
CODE_008E2B:          BPL CODE_008E6F                     ;; 008E2B : 10 42       ;
CODE_008E2D:          LDA.B #$28                          ;; 008E2D : A9 28       ;
CODE_008E2F:          STA.W $0F30                         ;; 008E2F : 8D 30 0F    ;
CODE_008E32:          LDA.W $0F31                         ;; 008E32 : AD 31 0F    ; \  
CODE_008E35:          ORA.W $0F32                         ;; 008E35 : 0D 32 0F    ;  |If time is 0, 
CODE_008E38:          ORA.W $0F33                         ;; 008E38 : 0D 33 0F    ;  |branch to $8E6F 
CODE_008E3B:          BEQ CODE_008E6F                     ;; 008E3B : F0 32       ; /  
CODE_008E3D:          LDX.B #$02                          ;; 008E3D : A2 02       ;
CODE_008E3F:          DEC.W $0F31,X                       ;; 008E3F : DE 31 0F    ;
CODE_008E42:          BPL CODE_008E4C                     ;; 008E42 : 10 08       ;
CODE_008E44:          LDA.B #$09                          ;; 008E44 : A9 09       ;
CODE_008E46:          STA.W $0F31,X                       ;; 008E46 : 9D 31 0F    ;
CODE_008E49:          DEX                                 ;; 008E49 : CA          ;
CODE_008E4A:          BPL CODE_008E3F                     ;; 008E4A : 10 F3       ;
CODE_008E4C:          LDA.W $0F31                         ;; 008E4C : AD 31 0F    ; \  
CODE_008E4F:          BNE CODE_008E60                     ;; 008E4F : D0 0F       ;  | 
CODE_008E51:          LDA.W $0F32                         ;; 008E51 : AD 32 0F    ;  | 
CODE_008E54:          AND.W $0F33                         ;; 008E54 : 2D 33 0F    ;  |If time is 99, 
CODE_008E57:          CMP.B #$09                          ;; 008E57 : C9 09       ;  |speed up the music 
CODE_008E59:          BNE CODE_008E60                     ;; 008E59 : D0 05       ;  | 
CODE_008E5B:          LDA.B #$FF                          ;; 008E5B : A9 FF       ;  | 
CODE_008E5D:          STA.W $1DF9                         ;; 008E5D : 8D F9 1D    ;  | 
CODE_008E60:          LDA.W $0F31                         ;; 008E60 : AD 31 0F    ; \  
CODE_008E63:          ORA.W $0F32                         ;; 008E63 : 0D 32 0F    ;  | 
CODE_008E66:          ORA.W $0F33                         ;; 008E66 : 0D 33 0F    ;  |If time is 0, 
CODE_008E69:          BNE CODE_008E6F                     ;; 008E69 : D0 04       ;  |JSL to $00F606 
CODE_008E6B:          JSL.L KillMario                     ;; 008E6B : 22 06 F6 00 ;  | 
CODE_008E6F:          LDA.W $0F31                         ;; 008E6F : AD 31 0F    ; \  
CODE_008E72:          STA.W $0F25                         ;; 008E72 : 8D 25 0F    ;  | 
CODE_008E75:          LDA.W $0F32                         ;; 008E75 : AD 32 0F    ;  |Copy time to $0F25-$0F27 
CODE_008E78:          STA.W $0F26                         ;; 008E78 : 8D 26 0F    ;  | 
CODE_008E7B:          LDA.W $0F33                         ;; 008E7B : AD 33 0F    ;  | 
CODE_008E7E:          STA.W $0F27                         ;; 008E7E : 8D 27 0F    ; /  
CODE_008E81:          LDX.B #$10                          ;; 008E81 : A2 10       ;
CODE_008E83:          LDY.B #$00                          ;; 008E83 : A0 00       ;
CODE_008E85:          LDA.W $0F31,Y                       ;; 008E85 : B9 31 0F    ;
CODE_008E88:          BNE CODE_008E95                     ;; 008E88 : D0 0B       ;
CODE_008E8A:          LDA.B #$FC                          ;; 008E8A : A9 FC       ;
CODE_008E8C:          STA.W $0F15,X                       ;; 008E8C : 9D 15 0F    ;
CODE_008E8F:          INY                                 ;; 008E8F : C8          ;
CODE_008E90:          INX                                 ;; 008E90 : E8          ;
CODE_008E91:          CPY.B #$02                          ;; 008E91 : C0 02       ;
CODE_008E93:          BNE CODE_008E85                     ;; 008E93 : D0 F0       ;
CODE_008E95:          LDX.B #$03                          ;; 008E95 : A2 03       ;
CODE_008E97:          LDA.W $0F36,X                       ;; 008E97 : BD 36 0F    ;
CODE_008E9A:          STA $00                             ;; 008E9A : 85 00       ;
CODE_008E9C:          STZ $01                             ;; 008E9C : 64 01       ;
CODE_008E9E:          REP #$20                            ;; 008E9E : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_008EA0:          LDA.W $0F34,X                       ;; 008EA0 : BD 34 0F    ;
CODE_008EA3:          SEC                                 ;; 008EA3 : 38          ;
CODE_008EA4:          SBC.W #$423F                        ;; 008EA4 : E9 3F 42    ;
CODE_008EA7:          LDA $00                             ;; 008EA7 : A5 00       ;
CODE_008EA9:          SBC.W #$000F                        ;; 008EA9 : E9 0F 00    ;
CODE_008EAC:          BCC CODE_008EBF                     ;; 008EAC : 90 11       ;
ADDR_008EAE:          SEP #$20                            ;; 008EAE : E2 20       ; 8 bit A ; Accum (8 bit) 
ADDR_008EB0:          LDA.B #$0F                          ;; 008EB0 : A9 0F       ;
ADDR_008EB2:          STA.W $0F36,X                       ;; 008EB2 : 9D 36 0F    ;
ADDR_008EB5:          LDA.B #$42                          ;; 008EB5 : A9 42       ;
ADDR_008EB7:          STA.W $0F35,X                       ;; 008EB7 : 9D 35 0F    ;
ADDR_008EBA:          LDA.B #$3F                          ;; 008EBA : A9 3F       ;
ADDR_008EBC:          STA.W $0F34,X                       ;; 008EBC : 9D 34 0F    ;
CODE_008EBF:          SEP #$20                            ;; 008EBF : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_008EC1:          DEX                                 ;; 008EC1 : CA          ;
CODE_008EC2:          DEX                                 ;; 008EC2 : CA          ;
CODE_008EC3:          DEX                                 ;; 008EC3 : CA          ;
CODE_008EC4:          BPL CODE_008E97                     ;; 008EC4 : 10 D1       ;
CODE_008EC6:          LDA.W $0F36                         ;; 008EC6 : AD 36 0F    ; \ Store high byte of Mario's score in $00 
CODE_008EC9:          STA $00                             ;; 008EC9 : 85 00       ; /  
CODE_008ECB:          STZ $01                             ;; 008ECB : 64 01       ; Store x00 in $01 
CODE_008ECD:          LDA.W $0F35                         ;; 008ECD : AD 35 0F    ; \ Store mid byte of Mario's score in $03 
CODE_008ED0:          STA $03                             ;; 008ED0 : 85 03       ; / 
CODE_008ED2:          LDA.W $0F34                         ;; 008ED2 : AD 34 0F    ; \ Store low byte of Mario's score in $02 
CODE_008ED5:          STA $02                             ;; 008ED5 : 85 02       ; / 
CODE_008ED7:          LDX.B #$14                          ;; 008ED7 : A2 14       ;
CODE_008ED9:          LDY.B #$00                          ;; 008ED9 : A0 00       ;
CODE_008EDB:          JSR.W CODE_009012                   ;; 008EDB : 20 12 90    ;
CODE_008EDE:          LDX.B #$00                          ;; 008EDE : A2 00       ; \  
CODE_008EE0:          LDA.W $0F29,X                       ;; 008EE0 : BD 29 0F    ;  | 
CODE_008EE3:          BNE CODE_008EEF                     ;; 008EE3 : D0 0A       ;  | 
CODE_008EE5:          LDA.B #$FC                          ;; 008EE5 : A9 FC       ;  |Replace all leading zeroes in the score with spaces 
CODE_008EE7:          STA.W $0F29,X                       ;; 008EE7 : 9D 29 0F    ;  | 
CODE_008EEA:          INX                                 ;; 008EEA : E8          ;  | 
CODE_008EEB:          CPX.B #$06                          ;; 008EEB : E0 06       ;  | 
CODE_008EED:          BNE CODE_008EE0                     ;; 008EED : D0 F1       ;  | 
CODE_008EEF:          LDA.W $0DB3                         ;; 008EEF : AD B3 0D    ; Get current player 
CODE_008EF2:          BEQ CODE_008F1D                     ;; 008EF2 : F0 29       ; If player is Mario, branch to $8F1D 
CODE_008EF4:          LDA.W $0F39                         ;; 008EF4 : AD 39 0F    ; \ Store high byte of Luigi's score in $00 
CODE_008EF7:          STA $00                             ;; 008EF7 : 85 00       ; /  
CODE_008EF9:          STZ $01                             ;; 008EF9 : 64 01       ; Store x00 in $01 
CODE_008EFB:          LDA.W $0F38                         ;; 008EFB : AD 38 0F    ; \ Store mid byte of Luigi's score in $03 
CODE_008EFE:          STA $03                             ;; 008EFE : 85 03       ; /  
CODE_008F00:          LDA.W $0F37                         ;; 008F00 : AD 37 0F    ; \ Store low byte of Luigi's score in $02 
CODE_008F03:          STA $02                             ;; 008F03 : 85 02       ; /  
CODE_008F05:          LDX.B #$14                          ;; 008F05 : A2 14       ;
CODE_008F07:          LDY.B #$00                          ;; 008F07 : A0 00       ;
CODE_008F09:          JSR.W CODE_009012                   ;; 008F09 : 20 12 90    ;
CODE_008F0C:          LDX.B #$00                          ;; 008F0C : A2 00       ; \  
CODE_008F0E:          LDA.W $0F29,X                       ;; 008F0E : BD 29 0F    ;  | 
CODE_008F11:          BNE CODE_008F1D                     ;; 008F11 : D0 0A       ;  | 
CODE_008F13:          LDA.B #$FC                          ;; 008F13 : A9 FC       ;  |Replace all leading zeroes in the score with spaces 
CODE_008F15:          STA.W $0F29,X                       ;; 008F15 : 9D 29 0F    ;  | 
CODE_008F18:          INX                                 ;; 008F18 : E8          ;  | 
CODE_008F19:          CPX.B #$06                          ;; 008F19 : E0 06       ;  | 
CODE_008F1B:          BNE CODE_008F0E                     ;; 008F1B : D0 F1       ; /  
CODE_008F1D:          LDA.W $13CC                         ;; 008F1D : AD CC 13    ; \ If Coin increase isn't x00, 
CODE_008F20:          BEQ CODE_008F3B                     ;; 008F20 : F0 19       ; / branch to $8F3B 
CODE_008F22:          DEC.W $13CC                         ;; 008F22 : CE CC 13    ; Decrease "Coin increase" 
CODE_008F25:          INC.W RAM_StatusCoins               ;; 008F25 : EE BF 0D    ; Increase coins by 1 
CODE_008F28:          LDA.W RAM_StatusCoins               ;; 008F28 : AD BF 0D    ; \  
CODE_008F2B:          CMP.B #$64                          ;; 008F2B : C9 64       ;  |If coins<100, branch to $8F3B 
CODE_008F2D:          BCC CODE_008F3B                     ;; 008F2D : 90 0C       ; /  
CODE_008F2F:          INC.W $18E4                         ;; 008F2F : EE E4 18    ; Increase lives by 1 
CODE_008F32:          LDA.W RAM_StatusCoins               ;; 008F32 : AD BF 0D    ; \  
CODE_008F35:          SEC                                 ;; 008F35 : 38          ;  |Decrease coins by 100 
CODE_008F36:          SBC.B #$64                          ;; 008F36 : E9 64       ;  | 
CODE_008F38:          STA.W RAM_StatusCoins               ;; 008F38 : 8D BF 0D    ; /  
CODE_008F3B:          LDA.W RAM_StatusLives               ;; 008F3B : AD BE 0D    ; \ If amount of lives is negative, 
CODE_008F3E:          BMI CODE_008F49                     ;; 008F3E : 30 09       ; / branch to $8F49 
CODE_008F40:          CMP.B #$62                          ;; 008F40 : C9 62       ; \ If amount of lives is less than 98, 
CODE_008F42:          BCC CODE_008F49                     ;; 008F42 : 90 05       ; / branch to $8F49 
CODE_008F44:          LDA.B #$62                          ;; 008F44 : A9 62       ; \ Set amount of lives to 98 
CODE_008F46:          STA.W RAM_StatusLives               ;; 008F46 : 8D BE 0D    ; /  
CODE_008F49:          LDA.W RAM_StatusLives               ;; 008F49 : AD BE 0D    ; \  
CODE_008F4C:          INC A                               ;; 008F4C : 1A          ;  |Get amount of lives in decimal 
CODE_008F4D:          JSR.W HexToDec                      ;; 008F4D : 20 45 90    ; /  
CODE_008F50:          TXY                                 ;; 008F50 : 9B          ; \  
CODE_008F51:          BNE CODE_008F55                     ;; 008F51 : D0 02       ;  |If 10s is 0, replace with space 
CODE_008F53:          LDX.B #$FC                          ;; 008F53 : A2 FC       ;  | 
CODE_008F55:          STX.W $0F16                         ;; 008F55 : 8E 16 0F    ; \ Write lives to status bar 
CODE_008F58:          STA.W $0F17                         ;; 008F58 : 8D 17 0F    ; /  
CODE_008F5B:          LDX.W $0DB3                         ;; 008F5B : AE B3 0D    ; \ Get bonus stars 
CODE_008F5E:          LDA.W $0F48,X                       ;; 008F5E : BD 48 0F    ; /  
CODE_008F61:          CMP.B #$64                          ;; 008F61 : C9 64       ; \ If bonus stars is less than 100, 
CODE_008F63:          BCC CODE_008F73                     ;; 008F63 : 90 0E       ; / branch to $8F73 
CODE_008F65:          LDA.B #$FF                          ;; 008F65 : A9 FF       ; \ Start bonus game when the level ends 
CODE_008F67:          STA.W $1425                         ;; 008F67 : 8D 25 14    ; /  
CODE_008F6A:          LDA.W $0F48,X                       ;; 008F6A : BD 48 0F    ; \  
CODE_008F6D:          SEC                                 ;; 008F6D : 38          ;  |Subtract bonus stars by 100 
CODE_008F6E:          SBC.B #$64                          ;; 008F6E : E9 64       ;  | 
CODE_008F70:          STA.W $0F48,X                       ;; 008F70 : 9D 48 0F    ; /  
CODE_008F73:          LDA.W RAM_StatusCoins               ;; 008F73 : AD BF 0D    ; \ Get amount of coins in decimal 
CODE_008F76:          JSR.W HexToDec                      ;; 008F76 : 20 45 90    ; /  
CODE_008F79:          TXY                                 ;; 008F79 : 9B          ; \ 
CODE_008F7A:          BNE CODE_008F7E                     ;; 008F7A : D0 02       ;  |If 10s is 0, replace with space 
CODE_008F7C:          LDX.B #$FC                          ;; 008F7C : A2 FC       ;  | 
CODE_008F7E:          STA.W $0F14                         ;; 008F7E : 8D 14 0F    ; \ Write coins to status bar 
CODE_008F81:          STX.W $0F13                         ;; 008F81 : 8E 13 0F    ; /  
CODE_008F84:          SEP #$20                            ;; 008F84 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_008F86:          LDX.W $0DB3                         ;; 008F86 : AE B3 0D    ; Load Character into X 
CODE_008F89:          STZ $00                             ;; 008F89 : 64 00       ;
CODE_008F8B:          STZ $01                             ;; 008F8B : 64 01       ;
CODE_008F8D:          STZ $03                             ;; 008F8D : 64 03       ;
CODE_008F8F:          LDA.W $0F48,X                       ;; 008F8F : BD 48 0F    ;
CODE_008F92:          STA $02                             ;; 008F92 : 85 02       ;
CODE_008F94:          LDX.B #$09                          ;; 008F94 : A2 09       ;
CODE_008F96:          LDY.B #$10                          ;; 008F96 : A0 10       ;
CODE_008F98:          JSR.W CODE_009051                   ;; 008F98 : 20 51 90    ;
CODE_008F9B:          LDX.B #$00                          ;; 008F9B : A2 00       ;
CODE_008F9D:          LDA.W $0F1E,X                       ;; 008F9D : BD 1E 0F    ;
CODE_008FA0:          BNE CODE_008FAF                     ;; 008FA0 : D0 0D       ;
CODE_008FA2:          LDA.B #$FC                          ;; 008FA2 : A9 FC       ;
CODE_008FA4:          STA.W $0F1E,X                       ;; 008FA4 : 9D 1E 0F    ;
CODE_008FA7:          STA.W $0F03,X                       ;; 008FA7 : 9D 03 0F    ;
CODE_008FAA:          INX                                 ;; 008FAA : E8          ;
CODE_008FAB:          CPX.B #$01                          ;; 008FAB : E0 01       ;
CODE_008FAD:          BNE CODE_008F9D                     ;; 008FAD : D0 EE       ;
CODE_008FAF:          LDA.W $0F1E,X                       ;; 008FAF : BD 1E 0F    ;
CODE_008FB2:          ASL                                 ;; 008FB2 : 0A          ;
CODE_008FB3:          TAY                                 ;; 008FB3 : A8          ;
CODE_008FB4:          LDA.W DATA_008E06,Y                 ;; 008FB4 : B9 06 8E    ;
CODE_008FB7:          STA.W $0F03,X                       ;; 008FB7 : 9D 03 0F    ;
CODE_008FBA:          LDA.W DATA_008E07,Y                 ;; 008FBA : B9 07 8E    ;
CODE_008FBD:          STA.W $0F1E,X                       ;; 008FBD : 9D 1E 0F    ;
CODE_008FC0:          INX                                 ;; 008FC0 : E8          ;
CODE_008FC1:          CPX.B #$02                          ;; 008FC1 : E0 02       ;
CODE_008FC3:          BNE CODE_008FAF                     ;; 008FC3 : D0 EA       ;
CODE_008FC5:          JSR.W CODE_009079                   ;; 008FC5 : 20 79 90    ;
CODE_008FC8:          LDA.W $0DB3                         ;; 008FC8 : AD B3 0D    ;
CODE_008FCB:          BEQ CODE_008FD8                     ;; 008FCB : F0 0B       ;
CODE_008FCD:          LDX.B #$04                          ;; 008FCD : A2 04       ;
CODE_008FCF:          LDA.W DATA_008DF5,X                 ;; 008FCF : BD F5 8D    ;
CODE_008FD2:          STA.W $0EF9,X                       ;; 008FD2 : 9D F9 0E    ;
CODE_008FD5:          DEX                                 ;; 008FD5 : CA          ;
CODE_008FD6:          BPL CODE_008FCF                     ;; 008FD6 : 10 F7       ;
CODE_008FD8:          LDA.W $1422                         ;; 008FD8 : AD 22 14    ;
CODE_008FDB:          CMP.B #$05                          ;; 008FDB : C9 05       ;
CODE_008FDD:          BCC CODE_008FE1                     ;; 008FDD : 90 02       ;
CODE_008FDF:          LDA.B #$00                          ;; 008FDF : A9 00       ;
CODE_008FE1:          DEC A                               ;; 008FE1 : 3A          ;
CODE_008FE2:          STA $00                             ;; 008FE2 : 85 00       ;
CODE_008FE4:          LDX.B #$00                          ;; 008FE4 : A2 00       ;
CODE_008FE6:          LDY.B #$FC                          ;; 008FE6 : A0 FC       ;
CODE_008FE8:          LDA $00                             ;; 008FE8 : A5 00       ;
CODE_008FEA:          BMI CODE_008FEE                     ;; 008FEA : 30 02       ;
CODE_008FEC:          LDY.B #$2E                          ;; 008FEC : A0 2E       ;
CODE_008FEE:          TYA                                 ;; 008FEE : 98          ;
CODE_008FEF:          STA.W $0EFF,X                       ;; 008FEF : 9D FF 0E    ;
CODE_008FF2:          DEC $00                             ;; 008FF2 : C6 00       ;
CODE_008FF4:          INX                                 ;; 008FF4 : E8          ;
CODE_008FF5:          CPX.B #$04                          ;; 008FF5 : E0 04       ;
CODE_008FF7:          BNE CODE_008FE6                     ;; 008FF7 : D0 ED       ;
Return008FF9:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_008FFA:          .db $01,$00                         ;; 008FFA               ;
                                                          ;;                      ;
DATA_008FFC:          .db $A0,$86,$00,$00,$10,$27,$00,$00 ;; 008FFC               ;
                      .db $E8,$03,$00,$00,$64,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $0A,$00,$00,$00,$01,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_009012:          SEP #$20                            ;; 009012 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_009014:          STZ.W $0F15,X                       ;; 009014 : 9E 15 0F    ;
CODE_009017:          REP #$20                            ;; 009017 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_009019:          LDA $02                             ;; 009019 : A5 02       ;
CODE_00901B:          SEC                                 ;; 00901B : 38          ;
CODE_00901C:          SBC.W DATA_008FFC,Y                 ;; 00901C : F9 FC 8F    ;
CODE_00901F:          STA $06                             ;; 00901F : 85 06       ;
CODE_009021:          LDA $00                             ;; 009021 : A5 00       ;
CODE_009023:          SBC.W DATA_008FFA,Y                 ;; 009023 : F9 FA 8F    ;
CODE_009026:          STA $04                             ;; 009026 : 85 04       ;
CODE_009028:          BCC CODE_009039                     ;; 009028 : 90 0F       ;
CODE_00902A:          LDA $06                             ;; 00902A : A5 06       ;
CODE_00902C:          STA $02                             ;; 00902C : 85 02       ;
CODE_00902E:          LDA $04                             ;; 00902E : A5 04       ;
CODE_009030:          STA $00                             ;; 009030 : 85 00       ;
CODE_009032:          SEP #$20                            ;; 009032 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_009034:          INC.W $0F15,X                       ;; 009034 : FE 15 0F    ;
CODE_009037:          BRA CODE_009017                     ;; 009037 : 80 DE       ;
                                                          ;;                      ;
CODE_009039:          INX                                 ;; 009039 : E8          ;
CODE_00903A:          INY                                 ;; 00903A : C8          ;
CODE_00903B:          INY                                 ;; 00903B : C8          ;
CODE_00903C:          INY                                 ;; 00903C : C8          ;
CODE_00903D:          INY                                 ;; 00903D : C8          ;
CODE_00903E:          CPY.B #$18                          ;; 00903E : C0 18       ;
CODE_009040:          BNE CODE_009012                     ;; 009040 : D0 D0       ;
CODE_009042:          SEP #$20                            ;; 009042 : E2 20       ; 8 bit A ; Accum (8 bit) 
Return009044:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
HexToDec:             LDX.B #$00                          ;; ?QPWZ? : A2 00       ;  | 
CODE_009047:          CMP.B #$0A                          ;; 009047 : C9 0A       ;  | 
CODE_009049:          BCC Return009050                    ;; 009049 : 90 05       ;  |Sets A to 10s of original A 
CODE_00904B:          SBC.B #$0A                          ;; 00904B : E9 0A       ;  |Sets X to 1s of original A 
CODE_00904D:          INX                                 ;; 00904D : E8          ;  | 
CODE_00904E:          BRA CODE_009047                     ;; 00904E : 80 F7       ;  | 
                                                          ;;                      ;
Return009050:         RTS                                 ;; ?QPWZ? : 60          ; /  
                                                          ;;                      ;
CODE_009051:          SEP #$20                            ;; 009051 : E2 20       ; Accum (8 bit) 
CODE_009053:          STZ.W $0F15,X                       ;; 009053 : 9E 15 0F    ;
CODE_009056:          REP #$20                            ;; 009056 : C2 20       ; Accum (16 bit) 
CODE_009058:          LDA $02                             ;; 009058 : A5 02       ;
CODE_00905A:          SEC                                 ;; 00905A : 38          ;
CODE_00905B:          SBC.W DATA_008FFC,Y                 ;; 00905B : F9 FC 8F    ;
CODE_00905E:          STA $06                             ;; 00905E : 85 06       ;
CODE_009060:          BCC CODE_00906D                     ;; 009060 : 90 0B       ;
CODE_009062:          LDA $06                             ;; 009062 : A5 06       ;
CODE_009064:          STA $02                             ;; 009064 : 85 02       ;
CODE_009066:          SEP #$20                            ;; 009066 : E2 20       ; Accum (8 bit) 
CODE_009068:          INC.W $0F15,X                       ;; 009068 : FE 15 0F    ;
CODE_00906B:          BRA CODE_009056                     ;; 00906B : 80 E9       ;
                                                          ;;                      ;
CODE_00906D:          INX                                 ;; 00906D : E8          ;
CODE_00906E:          INY                                 ;; 00906E : C8          ;
CODE_00906F:          INY                                 ;; 00906F : C8          ;
CODE_009070:          INY                                 ;; 009070 : C8          ;
CODE_009071:          INY                                 ;; 009071 : C8          ;
CODE_009072:          CPY.B #$18                          ;; 009072 : C0 18       ;
CODE_009074:          BNE CODE_009051                     ;; 009074 : D0 DB       ;
CODE_009076:          SEP #$20                            ;; 009076 : E2 20       ; Accum (8 bit) 
Return009078:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009079:          LDY.B #$E0                          ;; 009079 : A0 E0       ;
CODE_00907B:          BIT.W $0D9B                         ;; 00907B : 2C 9B 0D    ;
CODE_00907E:          BVC CODE_00908E                     ;; 00907E : 50 0E       ;
CODE_009080:          LDY.B #$00                          ;; 009080 : A0 00       ;
CODE_009082:          LDA.W $0D9B                         ;; 009082 : AD 9B 0D    ;
CODE_009085:          CMP.B #$C1                          ;; 009085 : C9 C1       ;
CODE_009087:          BEQ CODE_00908E                     ;; 009087 : F0 05       ;
CODE_009089:          LDA.B #$F0                          ;; 009089 : A9 F0       ;
CODE_00908B:          STA.W OAM_ExtendedDispY,Y           ;; 00908B : 99 01 02    ;
CODE_00908E:          STY $01                             ;; 00908E : 84 01       ;
CODE_009090:          LDY.W $0DC2                         ;; 009090 : AC C2 0D    ;
CODE_009093:          BEQ Return0090D0                    ;; 009093 : F0 3B       ;
CODE_009095:          LDA.W DATA_008E01,Y                 ;; 009095 : B9 01 8E    ;
CODE_009098:          STA $00                             ;; 009098 : 85 00       ;
CODE_00909A:          CPY.B #$03                          ;; 00909A : C0 03       ;
CODE_00909C:          BNE CODE_0090AB                     ;; 00909C : D0 0D       ;
ADDR_00909E:          LDA RAM_FrameCounter                ;; 00909E : A5 13       ;
ADDR_0090A0:          LSR                                 ;; 0090A0 : 4A          ;
ADDR_0090A1:          AND.B #$03                          ;; 0090A1 : 29 03       ;
ADDR_0090A3:          PHY                                 ;; 0090A3 : 5A          ;
ADDR_0090A4:          TAY                                 ;; 0090A4 : A8          ;
ADDR_0090A5:          LDA.W DATA_008DFE,Y                 ;; 0090A5 : B9 FE 8D    ;
ADDR_0090A8:          PLY                                 ;; 0090A8 : 7A          ;
ADDR_0090A9:          STA $00                             ;; 0090A9 : 85 00       ;
CODE_0090AB:          LDY $01                             ;; 0090AB : A4 01       ;
CODE_0090AD:          LDA.B #$78                          ;; 0090AD : A9 78       ;
CODE_0090AF:          STA.W OAM_ExtendedDispX,Y           ;; 0090AF : 99 00 02    ;
CODE_0090B2:          LDA.B #$0F                          ;; 0090B2 : A9 0F       ;
CODE_0090B4:          STA.W OAM_ExtendedDispY,Y           ;; 0090B4 : 99 01 02    ;
CODE_0090B7:          LDA.B #$30                          ;; 0090B7 : A9 30       ;
CODE_0090B9:          ORA $00                             ;; 0090B9 : 05 00       ;
CODE_0090BB:          STA.W OAM_ExtendedProp,Y            ;; 0090BB : 99 03 02    ;
CODE_0090BE:          LDX.W $0DC2                         ;; 0090BE : AE C2 0D    ;
CODE_0090C1:          LDA.W DATA_008DF9,X                 ;; 0090C1 : BD F9 8D    ;
CODE_0090C4:          STA.W OAM_ExtendedTile,Y            ;; 0090C4 : 99 02 02    ;
CODE_0090C7:          TYA                                 ;; 0090C7 : 98          ;
CODE_0090C8:          LSR                                 ;; 0090C8 : 4A          ;
CODE_0090C9:          LSR                                 ;; 0090C9 : 4A          ;
CODE_0090CA:          TAY                                 ;; 0090CA : A8          ;
CODE_0090CB:          LDA.B #$02                          ;; 0090CB : A9 02       ;
CODE_0090CD:          STA.W $0420,Y                       ;; 0090CD : 99 20 04    ;
Return0090D0:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_0090D1:          .db $00,$FF,$4D,$4C,$03,$4D,$5D,$FF ;; 0090D1               ;
                      .db $03,$00,$4C,$03,$04,$15,$00,$02 ;; ?QPWZ?               ;
                      .db $00,$4A,$4E,$FF,$4C,$4B,$4A,$03 ;; ?QPWZ?               ;
                      .db $5F,$05,$04,$03,$02,$00,$FF,$01 ;; ?QPWZ?               ;
                      .db $4A,$5F,$05,$04,$00,$4D,$5D,$03 ;; ?QPWZ?               ;
                      .db $02,$01,$00,$FF,$5B,$14,$5F,$01 ;; ?QPWZ?               ;
                      .db $5E,$FF,$FF,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_009105:          .db $10,$FF,$00,$5C,$13,$00,$5D,$FF ;; 009105               ;
                      .db $03,$00,$5C,$13,$14,$15,$00,$12 ;; ?QPWZ?               ;
                      .db $00,$03,$5E,$FF,$5C,$4B,$5A,$03 ;; ?QPWZ?               ;
                      .db $5F,$05,$14,$13,$12,$10,$FF,$11 ;; ?QPWZ?               ;
                      .db $03,$5F,$05,$14,$00,$00,$5D,$03 ;; ?QPWZ?               ;
                      .db $12,$11,$10,$FF,$5B,$01,$5F,$01 ;; ?QPWZ?               ;
                      .db $5E,$FF,$FF,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_009139:          .db $34,$00,$34,$34,$34,$34,$30,$00 ;; 009139               ;
                      .db $34,$34,$34,$34,$74,$34,$34,$34 ;; ?QPWZ?               ;
                      .db $34,$34,$34,$00,$34,$34,$34,$34 ;; ?QPWZ?               ;
                      .db $34,$34,$34,$34,$34,$34,$00,$34 ;; ?QPWZ?               ;
                      .db $34,$34,$34,$34,$34,$34,$34,$34 ;; ?QPWZ?               ;
                      .db $34,$34,$34,$34,$34,$34,$34,$34 ;; ?QPWZ?               ;
                      .db $34                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00916A:          .db $34,$00,$B4,$34,$34,$B4,$F0,$00 ;; 00916A               ;
                      .db $B4,$B4,$34,$34,$74,$B4,$B4,$34 ;; ?QPWZ?               ;
                      .db $B4,$B4,$34,$00,$34,$B4,$34,$B4 ;; ?QPWZ?               ;
                      .db $B4,$B4,$34,$34,$34,$34,$00,$34 ;; ?QPWZ?               ;
                      .db $B4,$B4,$B4,$34,$B4,$B4,$B4,$B4 ;; ?QPWZ?               ;
                      .db $34,$34,$34,$34,$F4,$B4,$F4,$B4 ;; ?QPWZ?               ;
                      .db $B4                             ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00919B:          LDA RAM_MarioAnimation              ;; 00919B : A5 71       ;
CODE_00919D:          CMP.B #$0A                          ;; 00919D : C9 0A       ;
CODE_00919F:          BNE CODE_0091A6                     ;; 00919F : D0 05       ;
CODE_0091A1:          JSR.W CODE_00C593                   ;; 0091A1 : 20 93 C5    ;
CODE_0091A4:          BRA Return0091B0                    ;; 0091A4 : 80 0A       ;
                                                          ;;                      ;
CODE_0091A6:          LDA.W $141A                         ;; 0091A6 : AD 1A 14    ;
CODE_0091A9:          BNE Return0091B0                    ;; 0091A9 : D0 05       ;
CODE_0091AB:          LDA.B #$1E                          ;; 0091AB : A9 1E       ;
CODE_0091AD:          STA.W $0DC0                         ;; 0091AD : 8D C0 0D    ;
Return0091B0:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_0091B1:          JSR.W CODE_00A82D                   ;; 0091B1 : 20 2D A8    ;
CODE_0091B4:          LDX.B #$00                          ;; 0091B4 : A2 00       ;
CODE_0091B6:          LDA.B #$B0                          ;; 0091B6 : A9 B0       ;
CODE_0091B8:          LDY.W $1425                         ;; 0091B8 : AC 25 14    ;
CODE_0091BB:          BEQ CODE_0091CA                     ;; 0091BB : F0 0D       ;
CODE_0091BD:          STZ.W $0F31                         ;; 0091BD : 9C 31 0F    ; \  
CODE_0091C0:          STZ.W $0F32                         ;; 0091C0 : 9C 32 0F    ;  |Set timer to 000 
CODE_0091C3:          STZ.W $0F33                         ;; 0091C3 : 9C 33 0F    ; /  
CODE_0091C6:          LDX.B #$26                          ;; 0091C6 : A2 26       ;
CODE_0091C8:          LDA.B #$A4                          ;; 0091C8 : A9 A4       ;
CODE_0091CA:          STA $00                             ;; 0091CA : 85 00       ;
CODE_0091CC:          STZ $01                             ;; 0091CC : 64 01       ;
CODE_0091CE:          LDY.B #$70                          ;; 0091CE : A0 70       ;
CODE_0091D0:          JSR.W CODE_0091E9                   ;; 0091D0 : 20 E9 91    ;
CODE_0091D3:          INX                                 ;; 0091D3 : E8          ;
CODE_0091D4:          CPX.B #$08                          ;; 0091D4 : E0 08       ;
CODE_0091D6:          BNE CODE_0091DF                     ;; 0091D6 : D0 07       ;
CODE_0091D8:          LDA.W $0DB3                         ;; 0091D8 : AD B3 0D    ;
CODE_0091DB:          BEQ CODE_0091DF                     ;; 0091DB : F0 02       ;
CODE_0091DD:          LDX.B #$0E                          ;; 0091DD : A2 0E       ;
CODE_0091DF:          TYA                                 ;; 0091DF : 98          ;
CODE_0091E0:          SEC                                 ;; 0091E0 : 38          ;
CODE_0091E1:          SBC.B #$08                          ;; 0091E1 : E9 08       ;
CODE_0091E3:          TAY                                 ;; 0091E3 : A8          ;
CODE_0091E4:          BNE CODE_0091D0                     ;; 0091E4 : D0 EA       ;
CODE_0091E6:          JMP.W CODE_008494                   ;; 0091E6 : 4C 94 84    ;
                                                          ;;                      ;
CODE_0091E9:          LDA.W DATA_009139,X                 ;; 0091E9 : BD 39 91    ;
CODE_0091EC:          STA.W OAM_Tile3Prop,Y               ;; 0091EC : 99 0B 03    ;
CODE_0091EF:          LDA.W DATA_00916A,X                 ;; 0091EF : BD 6A 91    ;
CODE_0091F2:          STA.W OAM_Tile4Prop,Y               ;; 0091F2 : 99 0F 03    ;
CODE_0091F5:          LDA $00                             ;; 0091F5 : A5 00       ;
CODE_0091F7:          STA.W OAM_Tile3DispX,Y              ;; 0091F7 : 99 08 03    ;
CODE_0091FA:          STA.W OAM_Tile4DispX,Y              ;; 0091FA : 99 0C 03    ;
CODE_0091FD:          SEC                                 ;; 0091FD : 38          ;
CODE_0091FE:          SBC.B #$08                          ;; 0091FE : E9 08       ;
CODE_009200:          STA $00                             ;; 009200 : 85 00       ;
CODE_009202:          BCS CODE_009206                     ;; 009202 : B0 02       ;
CODE_009204:          DEC $01                             ;; 009204 : C6 01       ;
CODE_009206:          PHY                                 ;; 009206 : 5A          ;
CODE_009207:          TYA                                 ;; 009207 : 98          ;
CODE_009208:          LSR                                 ;; 009208 : 4A          ;
CODE_009209:          LSR                                 ;; 009209 : 4A          ;
CODE_00920A:          TAY                                 ;; 00920A : A8          ;
CODE_00920B:          LDA $01                             ;; 00920B : A5 01       ;
CODE_00920D:          AND.B #$01                          ;; 00920D : 29 01       ;
CODE_00920F:          STA.W $0462,Y                       ;; 00920F : 99 62 04    ;
CODE_009212:          STA.W $0463,Y                       ;; 009212 : 99 63 04    ;
CODE_009215:          PLY                                 ;; 009215 : 7A          ;
CODE_009216:          LDA.W DATA_0090D1,X                 ;; 009216 : BD D1 90    ;
CODE_009219:          BMI Return00922E                    ;; 009219 : 30 13       ;
CODE_00921B:          STA.W OAM_Tile3,Y                   ;; 00921B : 99 0A 03    ;
CODE_00921E:          LDA.W DATA_009105,X                 ;; 00921E : BD 05 91    ;
CODE_009221:          STA.W OAM_Tile4,Y                   ;; 009221 : 99 0E 03    ;
CODE_009224:          LDA.B #$68                          ;; 009224 : A9 68       ;
CODE_009226:          STA.W OAM_Tile3DispY,Y              ;; 009226 : 99 09 03    ;
CODE_009229:          LDA.B #$70                          ;; 009229 : A9 70       ;
CODE_00922B:          STA.W OAM_Tile4DispY,Y              ;; 00922B : 99 0D 03    ;
Return00922E:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00922F:          STZ.W $0703                         ;; 00922F : 9C 03 07    ;
CODE_009232:          STZ.W $0704                         ;; 009232 : 9C 04 07    ;
CODE_009235:          STZ.W $2121                         ;; 009235 : 9C 21 21    ; Set "Address for CG-RAM Write" to 0 ; Address for CG-RAM Write
CODE_009238:          LDX.B #$06                          ;; 009238 : A2 06       ;
CODE_00923A:          LDA.W DATA_009249,X                 ;; 00923A : BD 49 92    ;
CODE_00923D:          STA.W $4320,X                       ;; 00923D : 9D 20 43    ;
CODE_009240:          DEX                                 ;; 009240 : CA          ;
CODE_009241:          BPL CODE_00923A                     ;; 009241 : 10 F7       ;
CODE_009243:          LDA.B #$04                          ;; 009243 : A9 04       ;
CODE_009245:          STA.W $420B                         ;; 009245 : 8D 0B 42    ; Regular DMA Channel Enable
Return009248:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009249:          .db $00,$22,$03,$07,$00,$00,$02     ;; 009249               ;
                                                          ;;                      ;
CODE_009250:          LDX.B #$04                          ;; 009250 : A2 04       ;
CODE_009252:          LDA.W DATA_009277,X                 ;; 009252 : BD 77 92    ;
CODE_009255:          STA.W $4370,X                       ;; 009255 : 9D 70 43    ;
CODE_009258:          DEX                                 ;; 009258 : CA          ;
CODE_009259:          BPL CODE_009252                     ;; 009259 : 10 F7       ;
CODE_00925B:          LDA.B #$00                          ;; 00925B : A9 00       ;
CODE_00925D:          STA.W $4377                         ;; 00925D : 8D 77 43    ; Data Bank (H-DMA)
CODE_009260:          STZ.W $0D9F                         ;; 009260 : 9C 9F 0D    ; Disable all HDMA channels 
CODE_009263:          REP #$10                            ;; 009263 : C2 10       ; 16 bit A ; Index (16 bit) 
CODE_009265:          LDX.W #$01BE                        ;; 009265 : A2 BE 01    ; \  
CODE_009268:          LDA.B #$FF                          ;; 009268 : A9 FF       ;  | 
CODE_00926A:          STA.W $04A0,X                       ;; 00926A : 9D A0 04    ;  |Clear "HDMA table for windowing effects" 
CODE_00926D:          STZ.W $04A1,X                       ;; 00926D : 9E A1 04    ;  |...hang on again.  It clears one set of RAM here, but not the same 
CODE_009270:          DEX                                 ;; 009270 : CA          ;  | 
CODE_009271:          DEX                                 ;; 009271 : CA          ;  | 
CODE_009272:          BPL CODE_00926A                     ;; 009272 : 10 F6       ; /  
CODE_009274:          SEP #$10                            ;; 009274 : E2 10       ; \ Set A to 8bit and return ; Index (8 bit) 
Return009276:         RTS                                 ;; ?QPWZ? : 60          ; /  
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009277:          .db $41,$26,$7C,$92,$00,$F0,$A0,$04 ;; 009277               ;
                      .db $F0,$80,$05,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_009283:          JSR.W CODE_009263                   ;; 009283 : 20 63 92    ;
CODE_009286:          LDA.W $0D9B                         ;; 009286 : AD 9B 0D    ;
CODE_009289:          LSR                                 ;; 009289 : 4A          ;
CODE_00928A:          BCS CODE_0092A0                     ;; 00928A : B0 14       ;
CODE_00928C:          REP #$10                            ;; 00928C : C2 10       ; Index (16 bit) 
CODE_00928E:          LDX.W #$01BE                        ;; 00928E : A2 BE 01    ;
WindowHDMAenable:     STZ.W $04A0,X                       ;; ?QPWZ? : 9E A0 04    ; out? 
CODE_009294:          LDA.B #$FF                          ;; 009294 : A9 FF       ; *note to self: ctrl+insert, not shift+insert* 
CODE_009296:          STA.W $04A1,X                       ;; 009296 : 9D A1 04    ; ...  This is, uh, strange.  It pastes $00FF into the $04A0,x table 
CODE_009299:          INX                                 ;; 009299 : E8          ; instead of $FF00 o_O 
CODE_00929A:          INX                                 ;; 00929A : E8          ;
CODE_00929B:          CPX.W #$01C0                        ;; 00929B : E0 C0 01    ;
CODE_00929E:          BCC WindowHDMAenable                ;; 00929E : 90 F1       ;
CODE_0092A0:          LDA.B #$80                          ;; 0092A0 : A9 80       ;  Enable channel 7 in HDMA, disable all other HDMA channels 
CODE_0092A2:          STA.W $0D9F                         ;; 0092A2 : 8D 9F 0D    ;  $7E:0D9F - H-DMA Channel Enable RAM Mirror 
CODE_0092A5:          SEP #$10                            ;; 0092A5 : E2 10       ; Index (8 bit) 
Return0092A7:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_0092A8:          JSR.W CODE_009263                   ;; 0092A8 : 20 63 92    ; these are somewhat the same subroutine, but also not >_> 
CODE_0092AB:          REP #$10                            ;; 0092AB : C2 10       ; Index (16 bit) 
CODE_0092AD:          LDX.W #$0198                        ;; 0092AD : A2 98 01    ;
CODE_0092B0:          BRA WindowHDMAenable                ;; 0092B0 : 80 DF       ;
                                                          ;;                      ;
CODE_0092B2:          LDA.B #$58                          ;; 0092B2 : A9 58       ; Index (8 bit) 
CODE_0092B4:          STA.W $04A0                         ;; 0092B4 : 8D A0 04    ;
CODE_0092B7:          STA.W $04AA                         ;; 0092B7 : 8D AA 04    ;
CODE_0092BA:          STA.W $04B4                         ;; 0092BA : 8D B4 04    ;
CODE_0092BD:          STZ.W $04A9                         ;; 0092BD : 9C A9 04    ;
CODE_0092C0:          STZ.W $04B3                         ;; 0092C0 : 9C B3 04    ;
CODE_0092C3:          STZ.W $04BD                         ;; 0092C3 : 9C BD 04    ;
CODE_0092C6:          LDX.B #$04                          ;; 0092C6 : A2 04       ;
CODE_0092C8:          LDA.W DATA_009313,X                 ;; 0092C8 : BD 13 93    ;
CODE_0092CB:          STA.W $4350,X                       ;; 0092CB : 9D 50 43    ;
CODE_0092CE:          LDA.W DATA_009318,X                 ;; 0092CE : BD 18 93    ;
CODE_0092D1:          STA.W $4360,X                       ;; 0092D1 : 9D 60 43    ;
CODE_0092D4:          LDA.W DATA_00931D,X                 ;; 0092D4 : BD 1D 93    ;
CODE_0092D7:          STA.W $4370,X                       ;; 0092D7 : 9D 70 43    ;
CODE_0092DA:          DEX                                 ;; 0092DA : CA          ;
CODE_0092DB:          BPL CODE_0092C8                     ;; 0092DB : 10 EB       ;
CODE_0092DD:          LDA.B #$00                          ;; 0092DD : A9 00       ;
CODE_0092DF:          STA.W $4357                         ;; 0092DF : 8D 57 43    ; Data Bank (H-DMA)
CODE_0092E2:          STA.W $4367                         ;; 0092E2 : 8D 67 43    ; Data Bank (H-DMA)
CODE_0092E5:          STA.W $4377                         ;; 0092E5 : 8D 77 43    ; Data Bank (H-DMA)
CODE_0092E8:          LDA.B #$E0                          ;; 0092E8 : A9 E0       ;
CODE_0092EA:          STA.W $0D9F                         ;; 0092EA : 8D 9F 0D    ;
CODE_0092ED:          REP #$30                            ;; 0092ED : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_0092EF:          LDY.W #$0008                        ;; 0092EF : A0 08 00    ;
CODE_0092F2:          LDX.W #$0014                        ;; 0092F2 : A2 14 00    ;
CODE_0092F5:          LDA.W RAM_ScreenBndryXLo,Y          ;; 0092F5 : B9 1A 00    ;
CODE_0092F8:          STA.W $04A1,X                       ;; 0092F8 : 9D A1 04    ;
CODE_0092FB:          STA.W $04A4,X                       ;; 0092FB : 9D A4 04    ;
CODE_0092FE:          LDA.W $1462,Y                       ;; 0092FE : B9 62 14    ;
CODE_009301:          STA.W $04A7,X                       ;; 009301 : 9D A7 04    ;
CODE_009304:          TXA                                 ;; 009304 : 8A          ;
CODE_009305:          SEC                                 ;; 009305 : 38          ;
CODE_009306:          SBC.W #$000A                        ;; 009306 : E9 0A 00    ;
CODE_009309:          TAX                                 ;; 009309 : AA          ;
CODE_00930A:          DEY                                 ;; 00930A : 88          ;
CODE_00930B:          DEY                                 ;; 00930B : 88          ;
CODE_00930C:          DEY                                 ;; 00930C : 88          ;
CODE_00930D:          DEY                                 ;; 00930D : 88          ;
CODE_00930E:          BPL CODE_0092F5                     ;; 00930E : 10 E5       ;
CODE_009310:          SEP #$30                            ;; 009310 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return009312:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009313:          .db $02,$0D,$A0,$04,$00             ;; 009313               ;
                                                          ;;                      ;
DATA_009318:          .db $02,$0F,$AA,$04,$00             ;; 009318               ;
                                                          ;;                      ;
DATA_00931D:          .db $02,$11,$B4,$04,$00             ;; 00931D               ;
                                                          ;;                      ;
GetGameMode:          LDA.W RAM_GameMode                  ;; ?QPWZ? : AD 00 01    ; Load game mode 
CODE_009325:          JSL.L ExecutePtr                    ;; 009325 : 22 DF 86 00 ;
                                                          ;;                      ;
Ptrs009329:           .dw CODE_009391                     ;; ?QPWZ? : 91 93       ; 00 - 
                      .dw CODE_00940F                     ;; ?QPWZ? : 0F 94       ; 01 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 02 - 
                      .dw CODE_0096AE                     ;; ?QPWZ? : AE 96       ; 03 - 
                      .dw CODE_009A8B                     ;; ?QPWZ? : 8B 9A       ; 04 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 05 - 
                      .dw CODE_00941B                     ;; ?QPWZ? : 1B 94       ; 06 - 
                      .dw GAMEMODE_07                     ;; ?QPWZ? : 64 9C       ; 07 - 
                      .dw CODE_009CD1                     ;; ?QPWZ? : D1 9C       ; 08 - 
                      .dw CODE_009B1A                     ;; ?QPWZ? : 1A 9B       ; 09 - 
                      .dw CODE_009DFA                     ;; ?QPWZ? : FA 9D       ; 0A - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 0B - 
                      .dw CODE_00A087                     ;; ?QPWZ? : 87 A0       ; 0C - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 0D - 
                      .dw CODE_00A1BE                     ;; ?QPWZ? : BE A1       ; 0E - 
                      .dw TmpFade                         ;; ?QPWZ? : 37 9F       ; 0F - 
                      .dw CODE_00968E                     ;; ?QPWZ? : 8E 96       ; 10 - 
                      .dw CODE_0096D5                     ;; ?QPWZ? : D5 96       ; 11 - 
                      .dw GM04Load                        ;; ?QPWZ? : 9C A5       ; 12 - 
                      .dw TmpFade                         ;; ?QPWZ? : 37 9F       ; 13 - 
                      .dw CODE_00A1DA                     ;; ?QPWZ? : DA A1       ; 14 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 15 - 
                      .dw CODE_009750                     ;; ?QPWZ? : 50 97       ; 16 - 
                      .dw CODE_009759                     ;; ?QPWZ? : 59 97       ; 17 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 18 - 
                      .dw CODE_009468                     ;; ?QPWZ? : 68 94       ; 19 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 1A - 
                      .dw CODE_0094FD                     ;; ?QPWZ? : FD 94       ; 1B - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 1C - 
                      .dw CODE_009583                     ;; ?QPWZ? : 83 95       ; 1D - f
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 1E - 
                      .dw CODE_0095AB                     ;; ?QPWZ? : AB 95       ; 1F - f
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 20 - 
                      .dw CODE_0095BC                     ;; ?QPWZ? : BC 95       ; 21 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 22 - 
                      .dw CODE_0095C1                     ;; ?QPWZ? : C1 95       ; 23 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 24 - 
                      .dw CODE_00962C                     ;; ?QPWZ? : 2C 96       ; 25 - 
                      .dw CODE_009F6F                     ;; ?QPWZ? : 6F 9F       ; 26 - 
                      .dw CODE_00963D                     ;; ?QPWZ? : 3D 96       ; 27 - 
                      .dw CODE_009F7C                     ;; ?QPWZ? : 7C 9F       ; 28 - 
                      .dw Return00968D                    ;; ?QPWZ? : 8D 96       ; 29 - 
                                                          ;;                      ;
TurnOffIO:            STZ.W $4200                         ;; ?QPWZ? : 9C 00 42    ; Disable NMI ,VIRQ, HIRQ, Joypads ; NMI, V/H Count, and Joypad Enable
CODE_009380:          STZ.W $420C                         ;; 009380 : 9C 0C 42    ; Turn off all HDMA ; H-DMA Channel Enable
CODE_009383:          LDA.B #$80                          ;; 009383 : A9 80       ; \ 
CODE_009385:          STA.W $2100                         ;; 009385 : 8D 00 21    ; /Disable Screen ; Screen Display Register
Return009388:         RTS                                 ;; ?QPWZ? : 60          ; And return 
                                                          ;;                      ;
                                                          ;;                      ;
NintendoPos:          .db $60,$70,$80,$90                 ;; ?QPWZ?               ;
                                                          ;;                      ;
NintendoTile:         .db $02,$04,$06,$08                 ;; ?QPWZ?               ; Nintendo Presents tilemap 
                                                          ;;                      ;
CODE_009391:          JSR.W CODE_0085FA                   ;; 009391 : 20 FA 85    ;
CODE_009394:          JSR.W SetUpScreen                   ;; 009394 : 20 79 8A    ;
CODE_009397:          JSR.W CODE_00A993                   ;; 009397 : 20 93 A9    ;
CODE_00939A:          LDY.B #$0C                          ;; 00939A : A0 0C       ; \ Load Nintendo Presents logo 
CODE_00939C:          LDX.B #$03                          ;; 00939C : A2 03       ;  | 
CODE_00939E:          LDA.W NintendoPos,X                 ;; 00939E : BD 89 93    ;  | 
CODE_0093A1:          STA.W OAM_ExtendedDispX,Y           ;; 0093A1 : 99 00 02    ;  | 
CODE_0093A4:          LDA.B #$70                          ;; 0093A4 : A9 70       ;  |   <-Y position of logo 
CODE_0093A6:          STA.W OAM_ExtendedDispY,Y           ;; 0093A6 : 99 01 02    ;  | 
CODE_0093A9:          LDA.W NintendoTile,X                ;; 0093A9 : BD 8D 93    ;  | 
CODE_0093AC:          STA.W OAM_ExtendedTile,Y            ;; 0093AC : 99 02 02    ;  | 
CODE_0093AF:          LDA.B #$30                          ;; 0093AF : A9 30       ;  | 
CODE_0093B1:          STA.W OAM_ExtendedProp,Y            ;; 0093B1 : 99 03 02    ;  | 
CODE_0093B4:          DEY                                 ;; 0093B4 : 88          ;  | 
CODE_0093B5:          DEY                                 ;; 0093B5 : 88          ;  | 
CODE_0093B6:          DEY                                 ;; 0093B6 : 88          ;  | 
CODE_0093B7:          DEY                                 ;; 0093B7 : 88          ;  | 
CODE_0093B8:          DEX                                 ;; 0093B8 : CA          ;  | 
CODE_0093B9:          BPL CODE_00939E                     ;; 0093B9 : 10 E3       ; /  
CODE_0093BB:          LDA.B #$AA                          ;; 0093BB : A9 AA       ; \ Related to making the sprites 16x16? 
CODE_0093BD:          STA.W $0400                         ;; 0093BD : 8D 00 04    ; /  
CODE_0093C0:          LDA.B #$01                          ;; 0093C0 : A9 01       ; \ Play "Bing" sound? 
CODE_0093C2:          STA.W $1DFC                         ;; 0093C2 : 8D FC 1D    ; /  
CODE_0093C5:          LDA.B #$40                          ;; 0093C5 : A9 40       ; \ Set timer to x40 
CODE_0093C7:          STA.W $1DF5                         ;; 0093C7 : 8D F5 1D    ; /  
CODE_0093CA:          LDA.B #$0F                          ;; 0093CA : A9 0F       ; \ Set brightness to max 
CODE_0093CC:          STA.W $0DAE                         ;; 0093CC : 8D AE 0D    ; /  
CODE_0093CF:          LDA.B #$01                          ;; 0093CF : A9 01       ;
CODE_0093D1:          STA.W $0DAF                         ;; 0093D1 : 8D AF 0D    ;
CODE_0093D4:          STZ.W $192E                         ;; 0093D4 : 9C 2E 19    ; Sprite palette setting = 0 
CODE_0093D7:          JSR.W LoadPalette                   ;; 0093D7 : 20 ED AB    ; Load the palette 
CODE_0093DA:          STZ.W $0701                         ;; 0093DA : 9C 01 07    ; \ Black background 
CODE_0093DD:          STZ.W $0702                         ;; 0093DD : 9C 02 07    ; / 
CODE_0093E0:          JSR.W CODE_00922F                   ;; 0093E0 : 20 2F 92    ;
CODE_0093E3:          STZ.W $1B92                         ;; 0093E3 : 9C 92 1B    ; Set menu pointer position to 0 
CODE_0093E6:          LDX.B #$10                          ;; 0093E6 : A2 10       ; Enable sprites, disable layers 
CODE_0093E8:          LDY.B #$04                          ;; 0093E8 : A0 04       ; Set Layer 3 to subscreen 
CODE_0093EA:          LDA.B #$01                          ;; 0093EA : A9 01       ;
CODE_0093EC:          STA.W $0D9B                         ;; 0093EC : 8D 9B 0D    ;
CODE_0093EF:          LDA.B #$20                          ;; 0093EF : A9 20       ; CGADSUB = 20 
CODE_0093F1:          JSR.W ScreenSettings                ;; 0093F1 : 20 FD 93    ; Apply above settings 
CODE_0093F4:          INC.W RAM_GameMode                  ;; 0093F4 : EE 00 01    ; Move on to Game Mode 01 
Mode04Finish:         LDA.B #$81                          ;; ?QPWZ? : A9 81       ; \ Enable NMI and joypad, Disable V-count and H-cout 
CODE_0093F9:          STA.W $4200                         ;; 0093F9 : 8D 00 42    ; /  ; NMI, V/H Count, and Joypad Enable
Return0093FC:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
ScreenSettings:       STA.W $2131                         ;; ?QPWZ? : 8D 31 21    ; \ Set CGADSUB settings to A ; Add/Subtract Select and Enable
CODE_009400:          STA $40                             ;; 009400 : 85 40       ; /  
CODE_009402:          STX.W $212C                         ;; 009402 : 8E 2C 21    ; Set "Background and Object Enable" to X ; Background and Object Enable
CODE_009405:          STY.W $212D                         ;; 009405 : 8C 2D 21    ; Set "Sub Screen Designation" Y ; Sub Screen Designation
CODE_009408:          STZ.W $212E                         ;; 009408 : 9C 2E 21    ; \ Set "Window Mask Designation" for main and sub screen to x00 ; Window Mask Designation for Main Screen
CODE_00940B:          STZ.W $212F                         ;; 00940B : 9C 2F 21    ; /  ; Window Mask Designation for Sub Screen
Return00940E:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00940F:          DEC.W $1DF5                         ;; 00940F : CE F5 1D    ; Decrease timer 
CODE_009412:          BNE Return00941A                    ;; 009412 : D0 06       ; \ If timer is 0: 
CODE_009414:          JSR.W CODE_00B888                   ;; 009414 : 20 88 B8    ;  |Jump to sub $B888 
CODE_009417:          INC.W RAM_GameMode                  ;; 009417 : EE 00 01    ;  |Move on to Game Mode 02 
Return00941A:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00941B:          JSR.W SetUp0DA0GM4                  ;; 00941B : 20 74 9A    ;
CODE_00941E:          JSR.W CODE_009CBE                   ;; 00941E : 20 BE 9C    ;
CODE_009421:          BEQ CODE_00942E                     ;; 009421 : F0 0B       ;
CODE_009423:          LDA.B #$EC                          ;; 009423 : A9 EC       ;
CODE_009425:          JSR.W CODE_009440                   ;; 009425 : 20 40 94    ;
CODE_009428:          INC.W RAM_GameMode                  ;; 009428 : EE 00 01    ;
CODE_00942B:          JMP.W CODE_009C9F                   ;; 00942B : 4C 9F 9C    ;
                                                          ;;                      ;
CODE_00942E:          DEC.W $1DF5                         ;; 00942E : CE F5 1D    ;
CODE_009431:          BNE Return00941A                    ;; 009431 : D0 E7       ;
CODE_009433:          INC.W $1DF5                         ;; 009433 : EE F5 1D    ;
CODE_009436:          LDA.W $1433                         ;; 009436 : AD 33 14    ;
CODE_009439:          CLC                                 ;; 009439 : 18          ;
CODE_00943A:          ADC.B #$04                          ;; 00943A : 69 04       ;
CODE_00943C:          CMP.B #$F0                          ;; 00943C : C9 F0       ;
CODE_00943E:          BCS CODE_009417                     ;; 00943E : B0 D7       ;
CODE_009440:          STA.W $1433                         ;; 009440 : 8D 33 14    ;
CODE_009443:          JSR.W CODE_00CA61                   ;; 009443 : 20 61 CA    ;
CODE_009446:          LDA.B #$80                          ;; 009446 : A9 80       ; \  
CODE_009448:          STA $00                             ;; 009448 : 85 00       ;  |Store x80 in $00, 
CODE_00944A:          LDA.B #$70                          ;; 00944A : A9 70       ;  |Store x70 in $01 
CODE_00944C:          STA $01                             ;; 00944C : 85 01       ; /  
CODE_00944E:          JMP.W CODE_00CA88                   ;; 00944E : 4C 88 CA    ;
                                                          ;;                      ;
                                                          ;;                      ;
CutsceneBgColor:      .db $02,$00,$04,$01,$00,$06,$04     ;; ?QPWZ?               ;
                                                          ;;                      ;
CutsceneCastlePal:    .db $03,$06,$05,$06,$03,$03,$06,$06 ;; ?QPWZ?               ; Castle palette to use for cutscenes ; Purpose of first byte is unknown 
DATA_009460:          .db $03,$FF,$FF,$C9,$0F,$FF,$CC,$C9 ;; 009460               ;
                                                          ;;                      ;
CODE_009468:          JSR.W CODE_0085FA                   ;; 009468 : 20 FA 85    ;
CODE_00946B:          JSR.W Clear_1A_13D3                 ;; 00946B : 20 A6 A1    ;
CODE_00946E:          JSR.W SetUpScreen                   ;; 00946E : 20 79 8A    ;
CODE_009471:          LDX.W $13C6                         ;; 009471 : AE C6 13    ; Cutscene number 
CODE_009474:          LDA.B #$18                          ;; 009474 : A9 18       ;
CODE_009476:          STA.W $1931                         ;; 009476 : 8D 31 19    ;
CODE_009479:          LDA.B #$14                          ;; 009479 : A9 14       ;
CODE_00947B:          STA.W $192B                         ;; 00947B : 8D 2B 19    ;
CODE_00947E:          LDA.W CutsceneBgColor-1,X           ;; 00947E : BD 50 94    ;
CODE_009481:          STA.W $192F                         ;; 009481 : 8D 2F 19    ;
CODE_009484:          LDA.W CutsceneCastlePal,X           ;; 009484 : BD 58 94    ;
CODE_009487:          STA.W $1930                         ;; 009487 : 8D 30 19    ;
CODE_00948A:          STZ.W $192E                         ;; 00948A : 9C 2E 19    ;
CODE_00948D:          LDA.B #$01                          ;; 00948D : A9 01       ;
CODE_00948F:          STA.W $192D                         ;; 00948F : 8D 2D 19    ;
CODE_009492:          CPX.B #$08                          ;; 009492 : E0 08       ;
CODE_009494:          BNE CODE_0094B2                     ;; 009494 : D0 1C       ;
CODE_009496:          JSR.W CODE_00955E                   ;; 009496 : 20 5E 95    ;
CODE_009499:          LDA.B #$D2                          ;; 009499 : A9 D2       ;
CODE_00949B:          STA $12                             ;; 00949B : 85 12       ;
CODE_00949D:          JSR.W LoadScrnImage                 ;; 00949D : 20 D2 85    ;
CODE_0094A0:          JSR.W UploadMusicBank3              ;; 0094A0 : 20 59 81    ;
CODE_0094A3:          JSL.L CODE_0C93DD                   ;; 0094A3 : 22 DD 93 0C ;
CODE_0094A7:          JSR.W CODE_009260                   ;; 0094A7 : 20 60 92    ;
CODE_0094AA:          INC.W $1931                         ;; 0094AA : EE 31 19    ;
CODE_0094AD:          INC.W $192B                         ;; 0094AD : EE 2B 19    ;
CODE_0094B0:          BRA CODE_0094D7                     ;; 0094B0 : 80 25       ;
                                                          ;;                      ;
CODE_0094B2:          LDA.B #$15                          ;; 0094B2 : A9 15       ;
CODE_0094B4:          STA.W $1DFB                         ;; 0094B4 : 8D FB 1D    ;
CODE_0094B7:          LDA.W DATA_009460,X                 ;; 0094B7 : BD 60 94    ;
CODE_0094BA:          STA $12                             ;; 0094BA : 85 12       ;
CODE_0094BC:          JSR.W LoadScrnImage                 ;; 0094BC : 20 D2 85    ;
CODE_0094BF:          LDA.B #$CF                          ;; 0094BF : A9 CF       ;
CODE_0094C1:          STA $12                             ;; 0094C1 : 85 12       ;
CODE_0094C3:          JSR.W LoadScrnImage                 ;; 0094C3 : 20 D2 85    ;
CODE_0094C6:          REP #$20                            ;; 0094C6 : C2 20       ; Accum (16 bit) 
CODE_0094C8:          LDA.W #$0090                        ;; 0094C8 : A9 90 00    ;
CODE_0094CB:          STA RAM_MarioXPos                   ;; 0094CB : 85 94       ;
CODE_0094CD:          LDA.W #$0058                        ;; 0094CD : A9 58 00    ;
CODE_0094D0:          STA RAM_MarioYPos                   ;; 0094D0 : 85 96       ;
CODE_0094D2:          SEP #$20                            ;; 0094D2 : E2 20       ; Accum (8 bit) 
CODE_0094D4:          INC.W $148F                         ;; 0094D4 : EE 8F 14    ;
CODE_0094D7:          JSR.W UploadSpriteGFX               ;; 0094D7 : 20 DA A9    ;
CODE_0094DA:          JSR.W LoadPalette                   ;; 0094DA : 20 ED AB    ;
CODE_0094DD:          JSR.W CODE_00922F                   ;; 0094DD : 20 2F 92    ;
CODE_0094E0:          LDX.B #$0B                          ;; 0094E0 : A2 0B       ;
CODE_0094E2:          STZ RAM_ScreenBndryXLo,X            ;; 0094E2 : 74 1A       ;
CODE_0094E4:          DEX                                 ;; 0094E4 : CA          ;
CODE_0094E5:          BPL CODE_0094E2                     ;; 0094E5 : 10 FB       ;
CODE_0094E7:          LDA.B #$20                          ;; 0094E7 : A9 20       ;
CODE_0094E9:          STA $64                             ;; 0094E9 : 85 64       ;
CODE_0094EB:          JSR.W CODE_00A635                   ;; 0094EB : 20 35 A6    ;
CODE_0094EE:          STZ RAM_MarioDirection              ;; 0094EE : 64 76       ;
CODE_0094F0:          STZ RAM_IsFlying                    ;; 0094F0 : 64 72       ;
CODE_0094F2:          JSL.L CODE_00CEB1                   ;; 0094F2 : 22 B1 CE 00 ;
CODE_0094F6:          LDX.B #$17                          ;; 0094F6 : A2 17       ;
CODE_0094F8:          LDY.B #$00                          ;; 0094F8 : A0 00       ;
CODE_0094FA:          JSR.W CODE_009622                   ;; 0094FA : 20 22 96    ;
CODE_0094FD:          JSL.L RAM_7F8000                    ;; 0094FD : 22 00 80 7F ;
CODE_009501:          LDA.W $13C6                         ;; 009501 : AD C6 13    ;
CODE_009504:          CMP.B #$08                          ;; 009504 : C9 08       ;
CODE_009506:          BEQ CODE_009557                     ;; 009506 : F0 4F       ;
CODE_009508:          LDA RAM_ControllerB                 ;; 009508 : A5 17       ;
CODE_00950A:          AND.B #$00                          ;; 00950A : 29 00       ; Change to #$30 to enter debug region below 
CODE_00950C:          CMP.B #$30                          ;; 00950C : C9 30       ;
CODE_00950E:          BNE CODE_009529                     ;; 00950E : D0 19       ;
ADDR_009510:          LDA RAM_ControllerA                 ;; 009510 : A5 15       ; \ Unreachable 
ADDR_009512:          AND.B #$08                          ;; 009512 : 29 08       ;  | Debug: Boss defeated scene select 
ADDR_009514:          BEQ ADDR_009523                     ;; 009514 : F0 0D       ;  | 
ADDR_009516:          LDA.W $13C6                         ;; 009516 : AD C6 13    ;  | 
ADDR_009519:          INC A                               ;; 009519 : 1A          ;  | 
ADDR_00951A:          CMP.B #$09                          ;; 00951A : C9 09       ;  | 
ADDR_00951C:          BCC ADDR_009520                     ;; 00951C : 90 02       ;  | 
ADDR_00951E:          LDA.B #$01                          ;; 00951E : A9 01       ;  | 
ADDR_009520:          STA.W $13C6                         ;; 009520 : 8D C6 13    ;  | 
ADDR_009523:          LDA.B #$18                          ;; 009523 : A9 18       ;  | 
ADDR_009525:          STA.W RAM_GameMode                  ;; 009525 : 8D 00 01    ;  | 
Return009528:         RTS                                 ;; ?QPWZ? : 60          ; / 
                                                          ;;                      ;
CODE_009529:          JSL.L CODE_0CC97E                   ;; 009529 : 22 7E C9 0C ;
CODE_00952D:          REP #$20                            ;; 00952D : C2 20       ; Accum (16 bit) 
CODE_00952F:          LDA RAM_ScreenBndryXLo              ;; 00952F : A5 1A       ;
CODE_009531:          PHA                                 ;; 009531 : 48          ;
CODE_009532:          LDA RAM_ScreenBndryYLo              ;; 009532 : A5 1C       ;
CODE_009534:          PHA                                 ;; 009534 : 48          ;
CODE_009535:          LDA $1E                             ;; 009535 : A5 1E       ;
CODE_009537:          STA RAM_ScreenBndryXLo              ;; 009537 : 85 1A       ;
CODE_009539:          LDA $20                             ;; 009539 : A5 20       ;
CODE_00953B:          STA RAM_ScreenBndryYLo              ;; 00953B : 85 1C       ;
CODE_00953D:          SEP #$20                            ;; 00953D : E2 20       ; Accum (8 bit) 
CODE_00953F:          JSL.L CODE_00E2BD                   ;; 00953F : 22 BD E2 00 ;
CODE_009543:          REP #$20                            ;; 009543 : C2 20       ; Accum (16 bit) 
CODE_009545:          PLA                                 ;; 009545 : 68          ;
CODE_009546:          STA RAM_ScreenBndryYLo              ;; 009546 : 85 1C       ;
CODE_009548:          PLA                                 ;; 009548 : 68          ;
CODE_009549:          STA RAM_ScreenBndryXLo              ;; 009549 : 85 1A       ;
CODE_00954B:          SEP #$20                            ;; 00954B : E2 20       ; Accum (8 bit) 
CODE_00954D:          LDA.B #$0C                          ;; 00954D : A9 0C       ;
CODE_00954F:          STA RAM_MarioAnimation              ;; 00954F : 85 71       ;
CODE_009551:          JSR.W CODE_00C47E                   ;; 009551 : 20 7E C4    ;
CODE_009554:          JMP.W CODE_008494                   ;; 009554 : 4C 94 84    ;
                                                          ;;                      ;
CODE_009557:          JSL.L CODE_0C938D                   ;; 009557 : 22 8D 93 0C ;
CODE_00955B:          JMP.W CODE_008494                   ;; 00955B : 4C 94 84    ;
                                                          ;;                      ;
CODE_00955E:          LDY.B #$2F                          ;; 00955E : A0 2F       ;
CODE_009560:          JSL.L CODE_00BA28                   ;; 009560 : 22 28 BA 00 ;
CODE_009564:          LDA.B #$80                          ;; 009564 : A9 80       ;
CODE_009566:          STA.W $2115                         ;; 009566 : 8D 15 21    ; VRAM Address Increment Value
CODE_009569:          REP #$30                            ;; 009569 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00956B:          LDA.W #$4600                        ;; 00956B : A9 00 46    ;
CODE_00956E:          STA.W $2116                         ;; 00956E : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_009571:          LDX.W #$0200                        ;; 009571 : A2 00 02    ;
CODE_009574:          LDA [$00]                           ;; 009574 : A7 00       ;
CODE_009576:          STA.W $2118                         ;; 009576 : 8D 18 21    ; Data for VRAM Write (Low Byte)
CODE_009579:          INC $00                             ;; 009579 : E6 00       ;
CODE_00957B:          INC $00                             ;; 00957B : E6 00       ;
CODE_00957D:          DEX                                 ;; 00957D : CA          ;
CODE_00957E:          BNE CODE_009574                     ;; 00957E : D0 F4       ;
CODE_009580:          SEP #$30                            ;; 009580 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return009582:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009583:          INC.W $13C6                         ;; 009583 : EE C6 13    ;
CODE_009586:          LDA.B #$28                          ;; 009586 : A9 28       ;
CODE_009588:          LDY.B #$01                          ;; 009588 : A0 01       ;
CODE_00958A:          JSR.W CODE_0096CF                   ;; 00958A : 20 CF 96    ;
CODE_00958D:          DEC.W RAM_GameMode                  ;; 00958D : CE 00 01    ;
CODE_009590:          LDA.B #$16                          ;; 009590 : A9 16       ;
CODE_009592:          STA.W $192B                         ;; 009592 : 8D 2B 19    ;
CODE_009595:          JSR.W GM04Load                      ;; 009595 : 20 9C A5    ;
CODE_009598:          DEC.W RAM_GameMode                  ;; 009598 : CE 00 01    ;
CODE_00959B:          JSR.W TurnOffIO                     ;; 00959B : 20 7D 93    ;
CODE_00959E:          JSR.W CODE_0085FA                   ;; 00959E : 20 FA 85    ;
CODE_0095A1:          JSR.W CODE_00A993                   ;; 0095A1 : 20 93 A9    ;
CODE_0095A4:          JSL.L CODE_0CA3C9                   ;; 0095A4 : 22 C9 A3 0C ;
CODE_0095A8:          JSR.W CODE_00961E                   ;; 0095A8 : 20 1E 96    ;
CODE_0095AB:          JSL.L RAM_7F8000                    ;; 0095AB : 22 00 80 7F ;
CODE_0095AF:          JSL.L CODE_0C939A                   ;; 0095AF : 22 9A 93 0C ;
CODE_0095B3:          INC RAM_FrameCounterB               ;; 0095B3 : E6 14       ;
CODE_0095B5:          JSL.L CODE_05BB39                   ;; 0095B5 : 22 39 BB 05 ;
CODE_0095B9:          JMP.W CODE_008494                   ;; 0095B9 : 4C 94 84    ;
                                                          ;;                      ;
CODE_0095BC:          JSL.L CODE_0C93AD                   ;; 0095BC : 22 AD 93 0C ;
Return0095C0:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_0095C1:          JSR.W CODE_0085FA                   ;; 0095C1 : 20 FA 85    ;
CODE_0095C4:          JSR.W Clear_1A_13D3                 ;; 0095C4 : 20 A6 A1    ;
CODE_0095C7:          JSR.W SetUpScreen                   ;; 0095C7 : 20 79 8A    ;
CODE_0095CA:          JSL.L CODE_0CAD8C                   ;; 0095CA : 22 8C AD 0C ;
CODE_0095CE:          JSL.L CODE_05801E                   ;; 0095CE : 22 1E 80 05 ;
CODE_0095D2:          LDA.W $1DE9                         ;; 0095D2 : AD E9 1D    ;
CODE_0095D5:          CMP.B #$0A                          ;; 0095D5 : C9 0A       ;
CODE_0095D7:          BNE CODE_0095E0                     ;; 0095D7 : D0 07       ;
CODE_0095D9:          LDA.B #$13                          ;; 0095D9 : A9 13       ;
CODE_0095DB:          STA.W $192B                         ;; 0095DB : 8D 2B 19    ;
CODE_0095DE:          BRA CODE_0095E9                     ;; 0095DE : 80 09       ;
                                                          ;;                      ;
CODE_0095E0:          CMP.B #$0C                          ;; 0095E0 : C9 0C       ;
CODE_0095E2:          BNE CODE_0095E9                     ;; 0095E2 : D0 05       ;
CODE_0095E4:          LDA.B #$17                          ;; 0095E4 : A9 17       ;
CODE_0095E6:          STA.W $192B                         ;; 0095E6 : 8D 2B 19    ;
CODE_0095E9:          JSR.W UploadSpriteGFX               ;; 0095E9 : 20 DA A9    ;
CODE_0095EC:          JSR.W LoadPalette                   ;; 0095EC : 20 ED AB    ;
CODE_0095EF:          JSL.L CODE_05809E                   ;; 0095EF : 22 9E 80 05 ;
CODE_0095F3:          JSR.W CODE_00A5F9                   ;; 0095F3 : 20 F9 A5    ;
CODE_0095F6:          JSL.L CODE_0CADF6                   ;; 0095F6 : 22 F6 AD 0C ;
CODE_0095FA:          LDA.W $1DE9                         ;; 0095FA : AD E9 1D    ;
CODE_0095FD:          CMP.B #$0C                          ;; 0095FD : C9 0C       ;
CODE_0095FF:          BNE CODE_009612                     ;; 0095FF : D0 11       ;
CODE_009601:          LDX.B #$0B                          ;; 009601 : A2 0B       ;
CODE_009603:          LDA.W BowserEndPalette,X            ;; 009603 : BD C0 B3    ;
CODE_009606:          STA.W $0807,X                       ;; 009606 : 9D 07 08    ;
CODE_009609:          LDA.W DATA_00B3CC,X                 ;; 009609 : BD CC B3    ;
CODE_00960C:          STA.W $0827,X                       ;; 00960C : 9D 27 08    ;
CODE_00960F:          DEX                                 ;; 00960F : CA          ;
CODE_009610:          BPL CODE_009603                     ;; 009610 : 10 F1       ;
CODE_009612:          JSR.W CODE_00922F                   ;; 009612 : 20 2F 92    ;
CODE_009615:          JSR.W CODE_0092B2                   ;; 009615 : 20 B2 92    ;
CODE_009618:          JSR.W LoadScrnImage                 ;; 009618 : 20 D2 85    ;
CODE_00961B:          JSR.W CODE_00962C                   ;; 00961B : 20 2C 96    ;
CODE_00961E:          LDX.B #$15                          ;; 00961E : A2 15       ;
CODE_009620:          LDY.B #$02                          ;; 009620 : A0 02       ;
CODE_009622:          JSR.W KeepModeActive                ;; 009622 : 20 29 9F    ;
CODE_009625:          LDA.B #$09                          ;; 009625 : A9 09       ;
CODE_009627:          STA $3E                             ;; 009627 : 85 3E       ;
CODE_009629:          JMP.W CODE_0093EA                   ;; 009629 : 4C EA 93    ;
                                                          ;;                      ;
CODE_00962C:          STZ.W $0D84                         ;; 00962C : 9C 84 0D    ;
CODE_00962F:          JSR.W CODE_0092ED                   ;; 00962F : 20 ED 92    ;
CODE_009632:          JSL.L RAM_7F8000                    ;; 009632 : 22 00 80 7F ;
CODE_009636:          JSL.L CODE_0C93A5                   ;; 009636 : 22 A5 93 0C ;
CODE_00963A:          JMP.W CODE_008494                   ;; 00963A : 4C 94 84    ;
                                                          ;;                      ;
CODE_00963D:          JSR.W CODE_0085FA                   ;; 00963D : 20 FA 85    ;
CODE_009640:          JSR.W Clear_1A_13D3                 ;; 009640 : 20 A6 A1    ;
CODE_009643:          JSR.W SetUpScreen                   ;; 009643 : 20 79 8A    ;
CODE_009646:          JSR.W CODE_00955E                   ;; 009646 : 20 5E 95    ;
CODE_009649:          LDA.B #$19                          ;; 009649 : A9 19       ;
CODE_00964B:          STA.W $192B                         ;; 00964B : 8D 2B 19    ;
CODE_00964E:          LDA.B #$03                          ;; 00964E : A9 03       ;
CODE_009650:          STA.W $192F                         ;; 009650 : 8D 2F 19    ;
CODE_009653:          LDA.B #$03                          ;; 009653 : A9 03       ;
CODE_009655:          STA.W $1930                         ;; 009655 : 8D 30 19    ;
CODE_009658:          JSR.W UploadSpriteGFX               ;; 009658 : 20 DA A9    ;
CODE_00965B:          JSR.W LoadPalette                   ;; 00965B : 20 ED AB    ;
CODE_00965E:          LDX.B #$0B                          ;; 00965E : A2 0B       ;
CODE_009660:          LDA.W TheEndPalettes,X              ;; 009660 : BD 0E B7    ;
CODE_009663:          STA.W $08A7,X                       ;; 009663 : 9D A7 08    ;
CODE_009666:          LDA.W DATA_00B71A,X                 ;; 009666 : BD 1A B7    ;
CODE_009669:          STA.W $08C7,X                       ;; 009669 : 9D C7 08    ;
CODE_00966C:          LDA.W DATA_00B726,X                 ;; 00966C : BD 26 B7    ;
CODE_00966F:          STA.W $08E7,X                       ;; 00966F : 9D E7 08    ;
CODE_009672:          DEX                                 ;; 009672 : CA          ;
CODE_009673:          BPL CODE_009660                     ;; 009673 : 10 EB       ;
CODE_009675:          JSR.W CODE_00922F                   ;; 009675 : 20 2F 92    ;
CODE_009678:          LDA.B #$D5                          ;; 009678 : A9 D5       ;
CODE_00967A:          STA $12                             ;; 00967A : 85 12       ;
CODE_00967C:          JSR.W LoadScrnImage                 ;; 00967C : 20 D2 85    ;
CODE_00967F:          JSL.L CODE_0CAADF                   ;; 00967F : 22 DF AA 0C ;
CODE_009683:          JSR.W CODE_008494                   ;; 009683 : 20 94 84    ;
CODE_009686:          LDX.B #$14                          ;; 009686 : A2 14       ;
CODE_009688:          LDY.B #$00                          ;; 009688 : A0 00       ;
CODE_00968A:          JMP.W CODE_009622                   ;; 00968A : 4C 22 96    ;
                                                          ;;                      ;
Return00968D:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00968E:          JSR.W CODE_0085FA                   ;; 00968E : 20 FA 85    ;
CODE_009691:          LDA.W $1425                         ;; 009691 : AD 25 14    ;
CODE_009694:          BNE CODE_0096A8                     ;; 009694 : D0 12       ;
CODE_009696:          LDA.W $141A                         ;; 009696 : AD 1A 14    ;
CODE_009699:          ORA.W $141D                         ;; 009699 : 0D 1D 14    ;
CODE_00969C:          ORA.W $0109                         ;; 00969C : 0D 09 01    ;
CODE_00969F:          BNE CODE_0096AB                     ;; 00969F : D0 0A       ;
CODE_0096A1:          LDA.W $13C1                         ;; 0096A1 : AD C1 13    ;
CODE_0096A4:          CMP.B #$56                          ;; 0096A4 : C9 56       ;
CODE_0096A6:          BEQ CODE_0096AB                     ;; 0096A6 : F0 03       ;
CODE_0096A8:          JSR.W CODE_0091B1                   ;; 0096A8 : 20 B1 91    ;
CODE_0096AB:          JMP.W CODE_0093CA                   ;; 0096AB : 4C CA 93    ;
                                                          ;;                      ;
CODE_0096AE:          STZ.W $4200                         ;; 0096AE : 9C 00 42    ; NMI, V/H Count, and Joypad Enable
CODE_0096B1:          JSR.W ClearStack                    ;; 0096B1 : 20 4E 8A    ;
CODE_0096B4:          LDX.B #$07                          ;; 0096B4 : A2 07       ;
CODE_0096B6:          LDA.B #$FF                          ;; 0096B6 : A9 FF       ;
CODE_0096B8:          STA.W $0101,X                       ;; 0096B8 : 9D 01 01    ;
CODE_0096BB:          DEX                                 ;; 0096BB : CA          ;
CODE_0096BC:          BPL CODE_0096B8                     ;; 0096BC : 10 FA       ;
CODE_0096BE:          LDA.W $0109                         ;; 0096BE : AD 09 01    ;
CODE_0096C1:          BNE CODE_0096CB                     ;; 0096C1 : D0 08       ;
CODE_0096C3:          JSR.W UploadMusicBank1              ;; 0096C3 : 20 0E 81    ;
CODE_0096C6:          LDA.B #$01                          ;; 0096C6 : A9 01       ; \ Set title screen music 
CODE_0096C8:          STA.W $1DFB                         ;; 0096C8 : 8D FB 1D    ; / 
CODE_0096CB:          LDA.B #$EB                          ;; 0096CB : A9 EB       ;
CODE_0096CD:          LDY.B #$00                          ;; 0096CD : A0 00       ;
CODE_0096CF:          STA.W $0109                         ;; 0096CF : 8D 09 01    ;
CODE_0096D2:          STY.W $1F11                         ;; 0096D2 : 8C 11 1F    ;
CODE_0096D5:          STZ.W $4200                         ;; 0096D5 : 9C 00 42    ; NMI, V/H Count, and Joypad Enable
CODE_0096D8:          JSR.W NoButtons                     ;; 0096D8 : 20 2D F6    ;
CODE_0096DB:          LDA.W $141A                         ;; 0096DB : AD 1A 14    ;
CODE_0096DE:          BNE CODE_0096E9                     ;; 0096DE : D0 09       ;
CODE_0096E0:          LDA.W $141D                         ;; 0096E0 : AD 1D 14    ;
CODE_0096E3:          BEQ CODE_0096E9                     ;; 0096E3 : F0 04       ;
CODE_0096E5:          JSL.L CODE_04DC09                   ;; 0096E5 : 22 09 DC 04 ;
CODE_0096E9:          STZ.W $13D5                         ;; 0096E9 : 9C D5 13    ;
CODE_0096EC:          STZ.W $13D9                         ;; 0096EC : 9C D9 13    ;
CODE_0096EF:          LDA.B #$50                          ;; 0096EF : A9 50       ;
CODE_0096F1:          STA.W $13D6                         ;; 0096F1 : 8D D6 13    ;
CODE_0096F4:          JSL.L CODE_05D796                   ;; 0096F4 : 22 96 D7 05 ;
CODE_0096F8:          LDX.B #$07                          ;; 0096F8 : A2 07       ;
CODE_0096FA:          LDA RAM_ScreenBndryXLo,X            ;; 0096FA : B5 1A       ;
CODE_0096FC:          STA.W $1462,X                       ;; 0096FC : 9D 62 14    ;
CODE_0096FF:          DEX                                 ;; 0096FF : CA          ;
CODE_009700:          BPL CODE_0096FA                     ;; 009700 : 10 F8       ;
CODE_009702:          JSR.W CODE_008134                   ;; 009702 : 20 34 81    ;
CODE_009705:          JSR.W CODE_00A635                   ;; 009705 : 20 35 A6    ;
CODE_009708:          LDA.B #$20                          ;; 009708 : A9 20       ;
CODE_00970A:          STA $5E                             ;; 00970A : 85 5E       ;
CODE_00970C:          JSR.W CODE_00A796                   ;; 00970C : 20 96 A7    ;
CODE_00970F:          INC.W $1404                         ;; 00970F : EE 04 14    ;
CODE_009712:          JSL.L CODE_00F6DB                   ;; 009712 : 22 DB F6 00 ;
CODE_009716:          JSL.L CODE_05801E                   ;; 009716 : 22 1E 80 05 ;
CODE_00971A:          LDA.W $0109                         ;; 00971A : AD 09 01    ;
CODE_00971D:          BEQ CODE_009728                     ;; 00971D : F0 09       ;
CODE_00971F:          CMP.B #$E9                          ;; 00971F : C9 E9       ;
CODE_009721:          BNE CODE_009740                     ;; 009721 : D0 1D       ;
CODE_009723:          LDA.B #$13                          ;; 009723 : A9 13       ;
CODE_009725:          STA.W $0DDA                         ;; 009725 : 8D DA 0D    ;
CODE_009728:          LDA.W $0DDA                         ;; 009728 : AD DA 0D    ;
CODE_00972B:          CMP.B #$40                          ;; 00972B : C9 40       ;
CODE_00972D:          BCS CODE_00973B                     ;; 00972D : B0 0C       ;
CODE_00972F:          LDY.W $0D9B                         ;; 00972F : AC 9B 0D    ;
CODE_009732:          CPY.B #$C1                          ;; 009732 : C0 C1       ;
CODE_009734:          BNE CODE_009738                     ;; 009734 : D0 02       ;
CODE_009736:          LDA.B #$16                          ;; 009736 : A9 16       ;
CODE_009738:          STA.W $1DFB                         ;; 009738 : 8D FB 1D    ;
CODE_00973B:          AND.B #$BF                          ;; 00973B : 29 BF       ;
CODE_00973D:          STA.W $0DDA                         ;; 00973D : 8D DA 0D    ;
CODE_009740:          STZ.W $0DAE                         ;; 009740 : 9C AE 0D    ;
CODE_009743:          STZ.W $0DAF                         ;; 009743 : 9C AF 0D    ;
CODE_009746:          INC.W RAM_GameMode                  ;; 009746 : EE 00 01    ;
CODE_009749:          JMP.W Mode04Finish                  ;; 009749 : 4C F7 93    ;
                                                          ;;                      ;
CODE_00974C:          JSR.W HexToDec                      ;; 00974C : 20 45 90    ;
Return00974F:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
CODE_009750:          JSR.W CODE_0085FA                   ;; 009750 : 20 FA 85    ;
CODE_009753:          JSR.W CODE_00A82D                   ;; 009753 : 20 2D A8    ;
CODE_009756:          JMP.W CODE_0093CA                   ;; 009756 : 4C CA 93    ;
                                                          ;;                      ;
CODE_009759:          JSL.L RAM_7F8000                    ;; 009759 : 22 00 80 7F ;
CODE_00975D:          LDA.W $143C                         ;; 00975D : AD 3C 14    ;
CODE_009760:          BNE CODE_00978B                     ;; 009760 : D0 29       ;
CODE_009762:          DEC.W $143D                         ;; 009762 : CE 3D 14    ;
CODE_009765:          BNE CODE_00978E                     ;; 009765 : D0 27       ;
CODE_009767:          LDA.W RAM_StatusLives               ;; 009767 : AD BE 0D    ;
CODE_00976A:          BPL CODE_009788                     ;; 00976A : 10 1C       ;
CODE_00976C:          STZ.W RAM_OWHasYoshi                ;; 00976C : 9C C1 0D    ;
CODE_00976F:          LDA.W RAM_PlayerLives               ;; 00976F : AD B4 0D    ;
CODE_009772:          ORA.W $0DB5                         ;; 009772 : 0D B5 0D    ;
CODE_009775:          BPL CODE_009788                     ;; 009775 : 10 11       ;
CODE_009777:          LDX.B #$0C                          ;; 009777 : A2 0C       ;
CODE_009779:          STZ.W $1F2F,X                       ;; 009779 : 9E 2F 1F    ;
CODE_00977C:          STZ.W $0006,X                       ;; 00977C : 9E 06 00    ;
CODE_00977F:          STZ.W $1FEE,X                       ;; 00977F : 9E EE 1F    ;
CODE_009782:          DEX                                 ;; 009782 : CA          ;
CODE_009783:          BPL CODE_009779                     ;; 009783 : 10 F4       ;
CODE_009785:          INC.W $13C9                         ;; 009785 : EE C9 13    ;
CODE_009788:          JMP.W CODE_009E62                   ;; 009788 : 4C 62 9E    ;
                                                          ;;                      ;
CODE_00978B:          SEC                                 ;; 00978B : 38          ;
CODE_00978C:          SBC.B #$04                          ;; 00978C : E9 04       ;
CODE_00978E:          STA.W $143C                         ;; 00978E : 8D 3C 14    ;
CODE_009791:          CLC                                 ;; 009791 : 18          ;
CODE_009792:          ADC.B #$A0                          ;; 009792 : 69 A0       ;
CODE_009794:          STA $00                             ;; 009794 : 85 00       ;
CODE_009796:          ROL $01                             ;; 009796 : 26 01       ;
CODE_009798:          LDX.W $143B                         ;; 009798 : AE 3B 14    ;
CODE_00979B:          LDY.B #$48                          ;; 00979B : A0 48       ;
CODE_00979D:          CPY.B #$28                          ;; 00979D : C0 28       ;
CODE_00979F:          BNE CODE_0097AE                     ;; 00979F : D0 0D       ;
CODE_0097A1:          LDA.B #$78                          ;; 0097A1 : A9 78       ;
CODE_0097A3:          SEC                                 ;; 0097A3 : 38          ;
CODE_0097A4:          SBC.W $143C                         ;; 0097A4 : ED 3C 14    ;
CODE_0097A7:          STA $00                             ;; 0097A7 : 85 00       ;
CODE_0097A9:          ROL                                 ;; 0097A9 : 2A          ;
CODE_0097AA:          EOR.B #$01                          ;; 0097AA : 49 01       ;
CODE_0097AC:          STA $01                             ;; 0097AC : 85 01       ;
CODE_0097AE:          JSR.W CODE_0091E9                   ;; 0097AE : 20 E9 91    ;
CODE_0097B1:          INX                                 ;; 0097B1 : E8          ;
CODE_0097B2:          TYA                                 ;; 0097B2 : 98          ;
CODE_0097B3:          SEC                                 ;; 0097B3 : 38          ;
CODE_0097B4:          SBC.B #$08                          ;; 0097B4 : E9 08       ;
CODE_0097B6:          TAY                                 ;; 0097B6 : A8          ;
CODE_0097B7:          BNE CODE_00979D                     ;; 0097B7 : D0 E4       ;
CODE_0097B9:          JMP.W CODE_008494                   ;; 0097B9 : 4C 94 84    ;
                                                          ;;                      ;
CODE_0097BC:          LDA.B #$0F                          ;; 0097BC : A9 0F       ;
CODE_0097BE:          STA.W $0DAE                         ;; 0097BE : 8D AE 0D    ; Set brightness to full (RAM mirror) 
CODE_0097C1:          STZ.W $0DB0                         ;; 0097C1 : 9C B0 0D    ;
CODE_0097C4:          JSR.W GM++Mosaic                    ;; 0097C4 : 20 5B 9F    ;
CODE_0097C7:          LDA.B #$20                          ;; 0097C7 : A9 20       ; \ 
CODE_0097C9:          STA $38                             ;; 0097C9 : 85 38       ; |Not sure what these bytes are used for yet, unless they're just more  
CODE_0097CB:          STA $39                             ;; 0097CB : 85 39       ; /scratch (I find that unlikely) 
CODE_0097CD:          STZ.W RAM_Layer1DispYLo             ;; 0097CD : 9C 88 18    ;
CODE_0097D0:          JSR.W CODE_0085FA                   ;; 0097D0 : 20 FA 85    ;
CODE_0097D3:          LDA.B #$FF                          ;; 0097D3 : A9 FF       ;
CODE_0097D5:          STA.W $1931                         ;; 0097D5 : 8D 31 19    ;
CODE_0097D8:          JSL.L CODE_03D958                   ;; 0097D8 : 22 58 D9 03 ;
CODE_0097DC:          BIT.W $0D9B                         ;; 0097DC : 2C 9B 0D    ;
CODE_0097DF:          BVC CODE_009801                     ;; 0097DF : 50 20       ;
CODE_0097E1:          JSR.W CODE_009925                   ;; 0097E1 : 20 25 99    ;
CODE_0097E4:          LDY.W $13FC                         ;; 0097E4 : AC FC 13    ;
CODE_0097E7:          CPY.B #$03                          ;; 0097E7 : C0 03       ;
CODE_0097E9:          BCC CODE_0097F1                     ;; 0097E9 : 90 06       ;
CODE_0097EB:          BNE CODE_00983B                     ;; 0097EB : D0 4E       ;
CODE_0097ED:          LDA.B #$18                          ;; 0097ED : A9 18       ;
CODE_0097EF:          BRA CODE_0097FC                     ;; 0097EF : 80 0B       ;
                                                          ;;                      ;
CODE_0097F1:          LDA.B #$03                          ;; 0097F1 : A9 03       ;
CODE_0097F3:          STA.W RAM_IsBehindScenery           ;; 0097F3 : 8D F9 13    ;
CODE_0097F6:          LDA.B #$C8                          ;; 0097F6 : A9 C8       ;
CODE_0097F8:          STA $3F                             ;; 0097F8 : 85 3F       ;
CODE_0097FA:          LDA.B #$12                          ;; 0097FA : A9 12       ;
CODE_0097FC:          DEC.W $1931                         ;; 0097FC : CE 31 19    ;
CODE_0097FF:          BRA CODE_00983D                     ;; 0097FF : 80 3C       ;
                                                          ;;                      ;
CODE_009801:          JSR.W CODE_00ADD9                   ;; 009801 : 20 D9 AD    ;
CODE_009804:          JSR.W CODE_0092A8                   ;; 009804 : 20 A8 92    ;
CODE_009807:          LDX.B #$50                          ;; 009807 : A2 50       ;
CODE_009809:          JSR.W CODE_009A3D                   ;; 009809 : 20 3D 9A    ;
CODE_00980C:          REP #$20                            ;; 00980C : C2 20       ; Accum (16 bit) 
CODE_00980E:          LDA.W #$0050                        ;; 00980E : A9 50 00    ;
CODE_009811:          STA RAM_MarioXPos                   ;; 009811 : 85 94       ;
CODE_009813:          LDA.W #$FFD0                        ;; 009813 : A9 D0 FF    ;
CODE_009816:          STA RAM_MarioYPos                   ;; 009816 : 85 96       ;
CODE_009818:          STZ RAM_ScreenBndryXLo              ;; 009818 : 64 1A       ;
CODE_00981A:          STZ.W $1462                         ;; 00981A : 9C 62 14    ;
CODE_00981D:          LDA.W #$FF90                        ;; 00981D : A9 90 FF    ;
CODE_009820:          STA RAM_ScreenBndryYLo              ;; 009820 : 85 1C       ;
CODE_009822:          STA.W $1464                         ;; 009822 : 8D 64 14    ;
CODE_009825:          LDA.W #$0080                        ;; 009825 : A9 80 00    ;
CODE_009828:          STA $2A                             ;; 009828 : 85 2A       ;
CODE_00982A:          LDA.W #$0050                        ;; 00982A : A9 50 00    ;
CODE_00982D:          STA $2C                             ;; 00982D : 85 2C       ;
CODE_00982F:          LDA.W #$0080                        ;; 00982F : A9 80 00    ;
CODE_009832:          STA $3A                             ;; 009832 : 85 3A       ;
CODE_009834:          LDA.W #$0010                        ;; 009834 : A9 10 00    ;
CODE_009837:          STA $3C                             ;; 009837 : 85 3C       ;
CODE_009839:          SEP #$20                            ;; 009839 : E2 20       ; Accum (8 bit) 
CODE_00983B:          LDA.B #$13                          ;; 00983B : A9 13       ;
CODE_00983D:          STA.W $192B                         ;; 00983D : 8D 2B 19    ;
CODE_009840:          JSR.W UploadSpriteGFX               ;; 009840 : 20 DA A9    ;
CODE_009843:          LDA.B #$11                          ;; 009843 : A9 11       ;
CODE_009845:          STA.W $212E                         ;; 009845 : 8D 2E 21    ; Window Mask Designation for Main Screen
CODE_009848:          STZ.W $212D                         ;; 009848 : 9C 2D 21    ; Sub Screen Designation
CODE_00984B:          STZ.W $212F                         ;; 00984B : 9C 2F 21    ; Window Mask Designation for Sub Screen
CODE_00984E:          LDA.B #$02                          ;; 00984E : A9 02       ;
CODE_009850:          STA $41                             ;; 009850 : 85 41       ;
CODE_009852:          LDA.B #$32                          ;; 009852 : A9 32       ;
CODE_009854:          STA $43                             ;; 009854 : 85 43       ;
CODE_009856:          LDA.B #$20                          ;; 009856 : A9 20       ;
CODE_009858:          STA $44                             ;; 009858 : 85 44       ;
CODE_00985A:          JSR.W GM04DoDMA                     ;; 00985A : 20 FF 8C    ;
CODE_00985D:          JSR.W CODE_008ACD                   ;; 00985D : 20 CD 8A    ;
CODE_009860:          JSL.L CODE_00E2BD                   ;; 009860 : 22 BD E2 00 ;
CODE_009864:          JSR.W CODE_00A2F3                   ;; 009864 : 20 F3 A2    ;
CODE_009867:          JSR.W CODE_00C593                   ;; 009867 : 20 93 C5    ;
CODE_00986A:          STZ RAM_MarioSpeedY                 ;; 00986A : 64 7D       ; Y speed = 0 
CODE_00986C:          JSL.L CODE_01808C                   ;; 00986C : 22 8C 80 01 ;
CODE_009870:          JSL.L RAM_7F8000                    ;; 009870 : 22 00 80 7F ;
Return009874:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009875:          .db $01,$00,$FF,$FF,$40,$00,$C0,$01 ;; 009875               ;
                                                          ;;                      ;
CODE_00987D:          JSR.W CODE_008ACD                   ;; 00987D : 20 CD 8A    ;
CODE_009880:          BIT.W $0D9B                         ;; 009880 : 2C 9B 0D    ;
CODE_009883:          BVC CODE_009888                     ;; 009883 : 50 03       ;
CODE_009885:          JMP.W CODE_009A52                   ;; 009885 : 4C 52 9A    ;
                                                          ;;                      ;
CODE_009888:          JSL.L RAM_7F8000                    ;; 009888 : 22 00 80 7F ;
CODE_00988C:          JSL.L CODE_03C0C6                   ;; 00988C : 22 C6 C0 03 ;
Return009890:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009891:          .db $9E,$12,$1E,$12,$9E,$11,$1E,$11 ;; 009891               ;
                      .db $1E,$16,$9E,$15,$1E,$15,$9E,$14 ;; ?QPWZ?               ;
                      .db $1E,$14,$9E,$13,$1E,$13,$9E,$16 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_0098A9:          LDA.W $0D9B                         ;; 0098A9 : AD 9B 0D    ; \  
CODE_0098AC:          LSR                                 ;; 0098AC : 4A          ;  |If "Special level" is even, 
CODE_0098AD:          BCS CODE_0098E1                     ;; 0098AD : B0 32       ; / branch to $98E1 
CODE_0098AF:          LDA RAM_FrameCounterB               ;; 0098AF : A5 14       ;
CODE_0098B1:          LSR                                 ;; 0098B1 : 4A          ;
CODE_0098B2:          LSR                                 ;; 0098B2 : 4A          ;
CODE_0098B3:          AND.B #$06                          ;; 0098B3 : 29 06       ;
CODE_0098B5:          TAX                                 ;; 0098B5 : AA          ;
CODE_0098B6:          REP #$20                            ;; 0098B6 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_0098B8:          LDY.B #$80                          ;; 0098B8 : A0 80       ;
CODE_0098BA:          STY.W $2115                         ;; 0098BA : 8C 15 21    ; VRAM Address Increment Value
CODE_0098BD:          LDA.W #$1801                        ;; 0098BD : A9 01 18    ;
CODE_0098C0:          STA.W $4320                         ;; 0098C0 : 8D 20 43    ; Parameters for DMA Transfer
CODE_0098C3:          LDA.W #$7800                        ;; 0098C3 : A9 00 78    ;
CODE_0098C6:          STA.W $2116                         ;; 0098C6 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_0098C9:          LDA.L DATA_05BA39,X                 ;; 0098C9 : BF 39 BA 05 ;
CODE_0098CD:          STA.W $4322                         ;; 0098CD : 8D 22 43    ; A Address (Low Byte)
CODE_0098D0:          LDY.B #$7E                          ;; 0098D0 : A0 7E       ;
CODE_0098D2:          STY.W $4324                         ;; 0098D2 : 8C 24 43    ; A Address Bank
CODE_0098D5:          LDA.W #$0080                        ;; 0098D5 : A9 80 00    ;
CODE_0098D8:          STA.W $4325                         ;; 0098D8 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_0098DB:          LDY.B #$04                          ;; 0098DB : A0 04       ;
CODE_0098DD:          STY.W $420B                         ;; 0098DD : 8C 0B 42    ; Regular DMA Channel Enable
CODE_0098E0:          CLC                                 ;; 0098E0 : 18          ;
CODE_0098E1:          REP #$20                            ;; 0098E1 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_0098E3:          LDA.W #$0004                        ;; 0098E3 : A9 04 00    ;
CODE_0098E6:          LDY.B #$06                          ;; 0098E6 : A0 06       ;
CODE_0098E8:          BCC CODE_0098EF                     ;; 0098E8 : 90 05       ;
CODE_0098EA:          LDA.W #$0008                        ;; 0098EA : A9 08 00    ;
CODE_0098ED:          LDY.B #$16                          ;; 0098ED : A0 16       ;
CODE_0098EF:          STA $00                             ;; 0098EF : 85 00       ;
CODE_0098F1:          LDA.W #$C680                        ;; 0098F1 : A9 80 C6    ;
CODE_0098F4:          STA $02                             ;; 0098F4 : 85 02       ;
CODE_0098F6:          STZ.W $2115                         ;; 0098F6 : 9C 15 21    ; VRAM Address Increment Value
CODE_0098F9:          LDA.W #$1800                        ;; 0098F9 : A9 00 18    ;
CODE_0098FC:          STA.W $4320                         ;; 0098FC : 8D 20 43    ; Parameters for DMA Transfer
CODE_0098FF:          LDX.B #$7E                          ;; 0098FF : A2 7E       ;
CODE_009901:          STX.W $4324                         ;; 009901 : 8E 24 43    ; A Address Bank
CODE_009904:          LDX.B #$04                          ;; 009904 : A2 04       ;
CODE_009906:          LDA.W DATA_009891,Y                 ;; 009906 : B9 91 98    ;
CODE_009909:          STA.W $2116                         ;; 009909 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00990C:          LDA $02                             ;; 00990C : A5 02       ;
CODE_00990E:          STA.W $4322                         ;; 00990E : 8D 22 43    ; A Address (Low Byte)
CODE_009911:          CLC                                 ;; 009911 : 18          ;
CODE_009912:          ADC $00                             ;; 009912 : 65 00       ;
CODE_009914:          STA $02                             ;; 009914 : 85 02       ;
CODE_009916:          LDA $00                             ;; 009916 : A5 00       ;
CODE_009918:          STA.W $4325                         ;; 009918 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00991B:          STX.W $420B                         ;; 00991B : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00991E:          DEY                                 ;; 00991E : 88          ;
CODE_00991F:          DEY                                 ;; 00991F : 88          ;
CODE_009920:          BPL CODE_009906                     ;; 009920 : 10 E4       ;
CODE_009922:          SEP #$20                            ;; 009922 : E2 20       ; 8 bit A ; Accum (8 bit) 
Return009924:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009925:          STZ RAM_MarioYPosHi                 ;; 009925 : 64 97       ;
CODE_009927:          REP #$20                            ;; 009927 : C2 20       ; Accum (16 bit) 
CODE_009929:          LDA.W #$0020                        ;; 009929 : A9 20 00    ;
CODE_00992C:          STA RAM_MarioXPos                   ;; 00992C : 85 94       ;
CODE_00992E:          STZ RAM_ScreenBndryXLo              ;; 00992E : 64 1A       ;
CODE_009930:          STZ.W $1462                         ;; 009930 : 9C 62 14    ;
CODE_009933:          STZ RAM_ScreenBndryYLo              ;; 009933 : 64 1C       ;
CODE_009935:          STZ.W $1464                         ;; 009935 : 9C 64 14    ;
CODE_009938:          LDA.W #$0080                        ;; 009938 : A9 80 00    ;
CODE_00993B:          STA $2A                             ;; 00993B : 85 2A       ;
CODE_00993D:          LDA.W #$00A0                        ;; 00993D : A9 A0 00    ;
CODE_009940:          STA $2C                             ;; 009940 : 85 2C       ;
CODE_009942:          SEP #$20                            ;; 009942 : E2 20       ; Accum (8 bit) 
CODE_009944:          JSR.W CODE_00AE15                   ;; 009944 : 20 15 AE    ;
CODE_009947:          JSL.L CODE_01808C                   ;; 009947 : 22 8C 80 01 ;
CODE_00994B:          LDA.W $0D9B                         ;; 00994B : AD 9B 0D    ;
CODE_00994E:          LSR                                 ;; 00994E : 4A          ;
CODE_00994F:          LDX.B #$C0                          ;; 00994F : A2 C0       ;
CODE_009951:          LDA.B #$A0                          ;; 009951 : A9 A0       ;
CODE_009953:          BCC CODE_00995B                     ;; 009953 : 90 06       ;
CODE_009955:          STZ.W $1411                         ;; 009955 : 9C 11 14    ;
CODE_009958:          JMP.W CODE_009A17                   ;; 009958 : 4C 17 9A    ;
                                                          ;;                      ;
CODE_00995B:          REP #$30                            ;; 00995B : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00995D:          LDA.W $13FC                         ;; 00995D : AD FC 13    ;
CODE_009960:          AND.W #$00FF                        ;; 009960 : 29 FF 00    ;
CODE_009963:          ASL                                 ;; 009963 : 0A          ;
CODE_009964:          TAX                                 ;; 009964 : AA          ;
CODE_009965:          LDY.W #$02C0                        ;; 009965 : A0 C0 02    ;
CODE_009968:          LDA.W DATA_00F8E8,X                 ;; 009968 : BD E8 F8    ;
CODE_00996B:          BPL CODE_009970                     ;; 00996B : 10 03       ;
CODE_00996D:          LDY.W #$FB80                        ;; 00996D : A0 80 FB    ;
CODE_009970:          CMP.W #$0012                        ;; 009970 : C9 12 00    ;
CODE_009973:          BNE CODE_009978                     ;; 009973 : D0 03       ;
CODE_009975:          LDY.W #$0320                        ;; 009975 : A0 20 03    ;
CODE_009978:          STY $00                             ;; 009978 : 84 00       ;
CODE_00997A:          LDX.W #$0000                        ;; 00997A : A2 00 00    ;
CODE_00997D:          LDA.W #$C05A                        ;; 00997D : A9 5A C0    ;
CODE_009980:          STA.L $7F837D,X                     ;; 009980 : 9F 7D 83 7F ;
CODE_009984:          XBA                                 ;; 009984 : EB          ;
CODE_009985:          CLC                                 ;; 009985 : 18          ;
CODE_009986:          ADC.W #$0080                        ;; 009986 : 69 80 00    ;
CODE_009989:          XBA                                 ;; 009989 : EB          ;
CODE_00998A:          STA.L $7F8401,X                     ;; 00998A : 9F 01 84 7F ;
CODE_00998E:          XBA                                 ;; 00998E : EB          ;
CODE_00998F:          SEC                                 ;; 00998F : 38          ;
CODE_009990:          SBC $00                             ;; 009990 : E5 00       ;
CODE_009992:          XBA                                 ;; 009992 : EB          ;
CODE_009993:          STA.L $7F8485,X                     ;; 009993 : 9F 85 84 7F ;
CODE_009997:          LDA.W #$7F00                        ;; 009997 : A9 00 7F    ;
CODE_00999A:          STA.L $7F837F,X                     ;; 00999A : 9F 7F 83 7F ;
CODE_00999E:          STA.L $7F8403,X                     ;; 00999E : 9F 03 84 7F ;
CODE_0099A2:          STA.L $7F8487,X                     ;; 0099A2 : 9F 87 84 7F ;
CODE_0099A6:          LDY.W #$0010                        ;; 0099A6 : A0 10 00    ;
CODE_0099A9:          LDA.W #$38A2                        ;; 0099A9 : A9 A2 38    ;
CODE_0099AC:          STA.L $7F8381,X                     ;; 0099AC : 9F 81 83 7F ;
CODE_0099B0:          INC A                               ;; 0099B0 : 1A          ;
CODE_0099B1:          STA.L $7F8383,X                     ;; 0099B1 : 9F 83 83 7F ;
CODE_0099B5:          LDA.W #$38B2                        ;; 0099B5 : A9 B2 38    ;
CODE_0099B8:          STA.L $7F83C1,X                     ;; 0099B8 : 9F C1 83 7F ;
CODE_0099BC:          INC A                               ;; 0099BC : 1A          ;
CODE_0099BD:          STA.L $7F83C3,X                     ;; 0099BD : 9F C3 83 7F ;
CODE_0099C1:          LDA.W #$2C80                        ;; 0099C1 : A9 80 2C    ;
CODE_0099C4:          STA.L $7F8405,X                     ;; 0099C4 : 9F 05 84 7F ;
CODE_0099C8:          INC A                               ;; 0099C8 : 1A          ;
CODE_0099C9:          STA.L $7F8407,X                     ;; 0099C9 : 9F 07 84 7F ;
CODE_0099CD:          INC A                               ;; 0099CD : 1A          ;
CODE_0099CE:          STA.L $7F8445,X                     ;; 0099CE : 9F 45 84 7F ;
CODE_0099D2:          INC A                               ;; 0099D2 : 1A          ;
CODE_0099D3:          STA.L $7F8447,X                     ;; 0099D3 : 9F 47 84 7F ;
CODE_0099D7:          LDA.W #$28A0                        ;; 0099D7 : A9 A0 28    ;
CODE_0099DA:          STA.L $7F8489,X                     ;; 0099DA : 9F 89 84 7F ;
CODE_0099DE:          INC A                               ;; 0099DE : 1A          ;
CODE_0099DF:          STA.L $7F848B,X                     ;; 0099DF : 9F 8B 84 7F ;
CODE_0099E3:          LDA.W #$28B0                        ;; 0099E3 : A9 B0 28    ;
CODE_0099E6:          STA.L $7F84C9,X                     ;; 0099E6 : 9F C9 84 7F ;
CODE_0099EA:          INC A                               ;; 0099EA : 1A          ;
CODE_0099EB:          STA.L $7F84CB,X                     ;; 0099EB : 9F CB 84 7F ;
CODE_0099EF:          INX                                 ;; 0099EF : E8          ;
CODE_0099F0:          INX                                 ;; 0099F0 : E8          ;
CODE_0099F1:          INX                                 ;; 0099F1 : E8          ;
CODE_0099F2:          INX                                 ;; 0099F2 : E8          ;
CODE_0099F3:          DEY                                 ;; 0099F3 : 88          ;
CODE_0099F4:          BNE CODE_0099A9                     ;; 0099F4 : D0 B3       ;
CODE_0099F6:          TXA                                 ;; 0099F6 : 8A          ;
CODE_0099F7:          CLC                                 ;; 0099F7 : 18          ;
CODE_0099F8:          ADC.W #$014C                        ;; 0099F8 : 69 4C 01    ;
CODE_0099FB:          TAX                                 ;; 0099FB : AA          ;
CODE_0099FC:          LDA.W #$C05E                        ;; 0099FC : A9 5E C0    ;
CODE_0099FF:          CPX.W #$0318                        ;; 0099FF : E0 18 03    ;
CODE_009A02:          BCS CODE_009A07                     ;; 009A02 : B0 03       ;
CODE_009A04:          JMP.W CODE_009980                   ;; 009A04 : 4C 80 99    ;
                                                          ;;                      ;
CODE_009A07:          LDA.W #$00FF                        ;; 009A07 : A9 FF 00    ;
CODE_009A0A:          STA.L $7F837D,X                     ;; 009A0A : 9F 7D 83 7F ;
CODE_009A0E:          SEP #$30                            ;; 009A0E : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_009A10:          JSR.W LoadScrnImage                 ;; 009A10 : 20 D2 85    ;
CODE_009A13:          LDX.B #$B0                          ;; 009A13 : A2 B0       ;
CODE_009A15:          LDA.B #$90                          ;; 009A15 : A9 90       ;
CODE_009A17:          STA RAM_MarioYPos                   ;; 009A17 : 85 96       ;
CODE_009A19:          JSR.W CODE_009A1F                   ;; 009A19 : 20 1F 9A    ;
CODE_009A1C:          JMP.W CODE_009283                   ;; 009A1C : 4C 83 92    ;
                                                          ;;                      ;
CODE_009A1F:          LDY.B #$10                          ;; 009A1F : A0 10       ;
CODE_009A21:          LDA.B #$32                          ;; 009A21 : A9 32       ;
CODE_009A23:          STA.L $7EC800,X                     ;; 009A23 : 9F 00 C8 7E ;
CODE_009A27:          STA.L $7EC9B0,X                     ;; 009A27 : 9F B0 C9 7E ;
CODE_009A2B:          STA.L $7FC800,X                     ;; 009A2B : 9F 00 C8 7F ;
CODE_009A2F:          STA.L $7FC9B0,X                     ;; 009A2F : 9F B0 C9 7F ;
CODE_009A33:          INX                                 ;; 009A33 : E8          ;
CODE_009A34:          DEY                                 ;; 009A34 : 88          ;
CODE_009A35:          BNE CODE_009A23                     ;; 009A35 : D0 EC       ;
CODE_009A37:          CPX.B #$C0                          ;; 009A37 : E0 C0       ;
CODE_009A39:          BNE Return009A4D                    ;; 009A39 : D0 12       ;
CODE_009A3B:          LDX.B #$D0                          ;; 009A3B : A2 D0       ;
CODE_009A3D:          LDY.B #$10                          ;; 009A3D : A0 10       ;
CODE_009A3F:          LDA.B #$05                          ;; 009A3F : A9 05       ;
CODE_009A41:          STA.L $7EC800,X                     ;; 009A41 : 9F 00 C8 7E ;
CODE_009A45:          STA.L $7EC9B0,X                     ;; 009A45 : 9F B0 C9 7E ;
CODE_009A49:          INX                                 ;; 009A49 : E8          ;
CODE_009A4A:          DEY                                 ;; 009A4A : 88          ;
CODE_009A4B:          BNE CODE_009A41                     ;; 009A4B : D0 F4       ;
Return009A4D:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009A4E:          .db $FF,$01,$18,$30                 ;; 009A4E               ;
                                                          ;;                      ;
CODE_009A52:          LDA.W $0D9B                         ;; 009A52 : AD 9B 0D    ;
CODE_009A55:          LSR                                 ;; 009A55 : 4A          ;
CODE_009A56:          BCS CODE_009A6F                     ;; 009A56 : B0 17       ;
CODE_009A58:          JSL.L CODE_00F6DB                   ;; 009A58 : 22 DB F6 00 ;
CODE_009A5C:          JSL.L CODE_05BC00                   ;; 009A5C : 22 00 BC 05 ;
CODE_009A60:          LDA.W $13FC                         ;; 009A60 : AD FC 13    ;
CODE_009A63:          CMP.B #$04                          ;; 009A63 : C9 04       ;
CODE_009A65:          BEQ CODE_009A6F                     ;; 009A65 : F0 08       ;
CODE_009A67:          JSR.W CODE_0086C7                   ;; 009A67 : 20 C7 86    ;
CODE_009A6A:          JSL.L CODE_02827D                   ;; 009A6A : 22 7D 82 02 ;
Return009A6E:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009A6F:          JSL.L RAM_7F8000                    ;; 009A6F : 22 00 80 7F ;
Return009A73:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
SetUp0DA0GM4:         LDA.W $4016                         ;; ?QPWZ? : AD 16 40    ; \Read old-style controller register for player 1 
CODE_009A77:          LSR                                 ;; 009A77 : 4A          ; /LSR A, but then discard (Is this for carry flag or something?) 
CODE_009A78:          LDA.W $4017                         ;; 009A78 : AD 17 40    ; \Load And Rotate left A (player 2 old-style controller regs) 
CODE_009A7B:          ROL                                 ;; 009A7B : 2A          ; / 
CODE_009A7C:          AND.B #$03                          ;; 009A7C : 29 03       ; AND A with #$03 
CODE_009A7E:          BEQ CODE_009A87                     ;; 009A7E : F0 07       ; If A AND #$03 = 0 Then STA $0DA0 (A=0) 
CODE_009A80:          CMP.B #$03                          ;; 009A80 : C9 03       ;
CODE_009A82:          BNE CODE_009A86                     ;; 009A82 : D0 02       ;
ADDR_009A84:          ORA.B #$80                          ;; 009A84 : 09 80       ;
CODE_009A86:          DEC A                               ;; 009A86 : 3A          ;
CODE_009A87:          STA.W $0DA0                         ;; 009A87 : 8D A0 0D    ;
Return009A8A:         RTS                                 ;; ?QPWZ? : 60          ; *yawn* 
                                                          ;;                      ;
CODE_009A8B:          JSR.W SetUp0DA0GM4                  ;; 009A8B : 20 74 9A    ;
CODE_009A8E:          JSR.W GM04Load                      ;; 009A8E : 20 9C A5    ;
CODE_009A91:          STZ.W $0F31                         ;; 009A91 : 9C 31 0F    ; Zero the timer 
CODE_009A94:          JSR.W CODE_0085FA                   ;; 009A94 : 20 FA 85    ;
CODE_009A97:          LDA.B #$03                          ;; 009A97 : A9 03       ; \ Load title screen Layer 3 image 
CODE_009A99:          STA $12                             ;; 009A99 : 85 12       ;  | 
CODE_009A9B:          JSR.W LoadScrnImage                 ;; 009A9B : 20 D2 85    ; /  
CODE_009A9E:          JSR.W CODE_00ADA6                   ;; 009A9E : 20 A6 AD    ;
CODE_009AA1:          JSR.W CODE_00922F                   ;; 009AA1 : 20 2F 92    ;
CODE_009AA4:          JSL.L CODE_04F675                   ;; 009AA4 : 22 75 F6 04 ; todo: NOTE TO SELF: Check this routine out after making Bank4.asm 
CODE_009AA8:          LDA.B #$01                          ;; 009AA8 : A9 01       ; \ Set special level to x01 
CODE_009AAA:          STA.W $0D9B                         ;; 009AAA : 8D 9B 0D    ; /  
CODE_009AAD:          LDA.B #$33                          ;; 009AAD : A9 33       ;
CODE_009AAF:          STA $41                             ;; 009AAF : 85 41       ;
CODE_009AB1:          LDA.B #$00                          ;; 009AB1 : A9 00       ;
CODE_009AB3:          STA $42                             ;; 009AB3 : 85 42       ;
CODE_009AB5:          LDA.B #$23                          ;; 009AB5 : A9 23       ;
CODE_009AB7:          STA $43                             ;; 009AB7 : 85 43       ;
CODE_009AB9:          LDA.B #$12                          ;; 009AB9 : A9 12       ;
CODE_009ABB:          STA $44                             ;; 009ABB : 85 44       ;
CODE_009ABD:          JSR.W CODE_009443                   ;; 009ABD : 20 43 94    ;
CODE_009AC0:          LDA.B #$10                          ;; 009AC0 : A9 10       ;
CODE_009AC2:          STA.W $1DF5                         ;; 009AC2 : 8D F5 1D    ;
CODE_009AC5:          JMP.W Mode04Finish                  ;; 009AC5 : 4C F7 93    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009AC8:          .db $01,$FF,$FF                     ;; 009AC8               ;
                                                          ;;                      ;
CODE_009ACB:          PHY                                 ;; 009ACB : 5A          ;
CODE_009ACC:          JSR.W SetUp0DA0GM4                  ;; 009ACC : 20 74 9A    ;
CODE_009ACF:          PLY                                 ;; 009ACF : 7A          ;
CODE_009AD0:          INC.W $1B91                         ;; 009AD0 : EE 91 1B    ; Blinking cursor frame counter (file select, save prompt, etc) 
CODE_009AD3:          JSR.W CODE_009E82                   ;; 009AD3 : 20 82 9E    ;
CODE_009AD6:          LDX.W $1B92                         ;; 009AD6 : AE 92 1B    ;
CODE_009AD9:          LDA $16                             ;; 009AD9 : A5 16       ;
CODE_009ADB:          AND.B #$90                          ;; 009ADB : 29 90       ;
CODE_009ADD:          BNE CODE_009AE3                     ;; 009ADD : D0 04       ;
CODE_009ADF:          LDA $18                             ;; 009ADF : A5 18       ;
CODE_009AE1:          BPL CODE_009AEA                     ;; 009AE1 : 10 07       ;
CODE_009AE3:          LDA.B #$01                          ;; 009AE3 : A9 01       ;
CODE_009AE5:          STA.W $1DFC                         ;; 009AE5 : 8D FC 1D    ;
CODE_009AE8:          BRA CODE_009B11                     ;; 009AE8 : 80 27       ;
                                                          ;;                      ;
CODE_009AEA:          PLA                                 ;; 009AEA : 68          ;
CODE_009AEB:          PLA                                 ;; 009AEB : 68          ;
CODE_009AEC:          LDA $16                             ;; 009AEC : A5 16       ;
CODE_009AEE:          AND.B #$20                          ;; 009AEE : 29 20       ;
CODE_009AF0:          LSR                                 ;; 009AF0 : 4A          ;
CODE_009AF1:          LSR                                 ;; 009AF1 : 4A          ;
CODE_009AF2:          LSR                                 ;; 009AF2 : 4A          ;
CODE_009AF3:          ORA $16                             ;; 009AF3 : 05 16       ;
CODE_009AF5:          AND.B #$0C                          ;; 009AF5 : 29 0C       ;
CODE_009AF7:          BEQ Return009B16                    ;; 009AF7 : F0 1D       ;
CODE_009AF9:          LDY.B #$06                          ;; 009AF9 : A0 06       ;
CODE_009AFB:          STY.W $1DFC                         ;; 009AFB : 8C FC 1D    ;
CODE_009AFE:          STZ.W $1B91                         ;; 009AFE : 9C 91 1B    ;
CODE_009B01:          LSR                                 ;; 009B01 : 4A          ;
CODE_009B02:          LSR                                 ;; 009B02 : 4A          ;
CODE_009B03:          TAY                                 ;; 009B03 : A8          ;
CODE_009B04:          TXA                                 ;; 009B04 : 8A          ;
CODE_009B05:          ADC.W DATA_009AC8-1,Y               ;; 009B05 : 79 C7 9A    ;
CODE_009B08:          BPL CODE_009B0D                     ;; 009B08 : 10 03       ;
CODE_009B0A:          LDA $8A                             ;; 009B0A : A5 8A       ;
CODE_009B0C:          DEC A                               ;; 009B0C : 3A          ;
CODE_009B0D:          CMP $8A                             ;; 009B0D : C5 8A       ;
CODE_009B0F:          BCC CODE_009B13                     ;; 009B0F : 90 02       ;
CODE_009B11:          LDA.B #$00                          ;; 009B11 : A9 00       ;
CODE_009B13:          STA.W $1B92                         ;; 009B13 : 8D 92 1B    ;
Return009B16:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009B17:          .db $04,$02,$01                     ;; 009B17               ;
                                                          ;;                      ;
CODE_009B1A:          REP #$20                            ;; 009B1A : C2 20       ; Accum (16 bit) 
CODE_009B1C:          LDA.W #$39C9                        ;; 009B1C : A9 C9 39    ;
CODE_009B1F:          LDY.B #$60                          ;; 009B1F : A0 60       ;
CODE_009B21:          JSR.W CODE_009D30                   ;; 009B21 : 20 30 9D    ;
CODE_009B24:          LDA $16                             ;; 009B24 : A5 16       ; Accum (8 bit) 
CODE_009B26:          ORA $18                             ;; 009B26 : 05 18       ;
CODE_009B28:          AND.B #$40                          ;; 009B28 : 29 40       ;
CODE_009B2A:          BEQ CODE_009B38                     ;; 009B2A : F0 0C       ;
CODE_009B2C:          DEC.W RAM_GameMode                  ;; 009B2C : CE 00 01    ;
CODE_009B2F:          DEC.W RAM_GameMode                  ;; 009B2F : CE 00 01    ;
CODE_009B32:          JSR.W CODE_009B11                   ;; 009B32 : 20 11 9B    ;
CODE_009B35:          JMP.W CODE_009CB0                   ;; 009B35 : 4C B0 9C    ;
                                                          ;;                      ;
CODE_009B38:          LDY.B #$08                          ;; 009B38 : A0 08       ;
CODE_009B3A:          JSR.W CODE_009AD0                   ;; 009B3A : 20 D0 9A    ;
CODE_009B3D:          CPX.B #$03                          ;; 009B3D : E0 03       ;
CODE_009B3F:          BNE CODE_009B6D                     ;; 009B3F : D0 2C       ;
CODE_009B41:          LDY.B #$02                          ;; 009B41 : A0 02       ;
CODE_009B43:          LSR.W $0DDE                         ;; 009B43 : 4E DE 0D    ;
CODE_009B46:          BCC CODE_009B67                     ;; 009B46 : 90 1F       ;
CODE_009B48:          PHY                                 ;; 009B48 : 5A          ;
CODE_009B49:          LDA.W DATA_009CCB,Y                 ;; 009B49 : B9 CB 9C    ;
CODE_009B4C:          XBA                                 ;; 009B4C : EB          ;
CODE_009B4D:          LDA.W DATA_009CCE,Y                 ;; 009B4D : B9 CE 9C    ;
CODE_009B50:          REP #$10                            ;; 009B50 : C2 10       ; Index (16 bit) 
CODE_009B52:          TAX                                 ;; 009B52 : AA          ;
CODE_009B53:          LDY.W #$008F                        ;; 009B53 : A0 8F 00    ;
CODE_009B56:          LDA.B #$00                          ;; 009B56 : A9 00       ;
CODE_009B58:          STA.L $700000,X                     ;; 009B58 : 9F 00 00 70 ;
CODE_009B5C:          STA.L $7001AD,X                     ;; 009B5C : 9F AD 01 70 ;
CODE_009B60:          INX                                 ;; 009B60 : E8          ;
CODE_009B61:          DEY                                 ;; 009B61 : 88          ;
CODE_009B62:          BNE CODE_009B58                     ;; 009B62 : D0 F4       ;
CODE_009B64:          SEP #$10                            ;; 009B64 : E2 10       ; Index (8 bit) 
CODE_009B66:          PLY                                 ;; 009B66 : 7A          ;
CODE_009B67:          DEY                                 ;; 009B67 : 88          ;
CODE_009B68:          BPL CODE_009B43                     ;; 009B68 : 10 D9       ;
CODE_009B6A:          JMP.W CODE_009C89                   ;; 009B6A : 4C 89 9C    ;
                                                          ;;                      ;
CODE_009B6D:          STX.W $1B92                         ;; 009B6D : 8E 92 1B    ;
CODE_009B70:          LDA.W DATA_009B17,X                 ;; 009B70 : BD 17 9B    ;
CODE_009B73:          ORA.W $0DDE                         ;; 009B73 : 0D DE 0D    ;
CODE_009B76:          STA.W $0DDE                         ;; 009B76 : 8D DE 0D    ;
CODE_009B79:          STA $05                             ;; 009B79 : 85 05       ;
CODE_009B7B:          LDX.B #$00                          ;; 009B7B : A2 00       ;
CODE_009B7D:          JMP.W CODE_009D3C                   ;; 009B7D : 4C 3C 9D    ;
                                                          ;;                      ;
CODE_009B80:          PHB                                 ;; 009B80 : 8B          ; Wrapper 
CODE_009B81:          PHK                                 ;; 009B81 : 4B          ;
CODE_009B82:          PLB                                 ;; 009B82 : AB          ;
CODE_009B83:          JSR.W CODE_009B88                   ;; 009B83 : 20 88 9B    ;
CODE_009B86:          PLB                                 ;; 009B86 : AB          ;
Return009B87:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
CODE_009B88:          DEC A                               ;; 009B88 : 3A          ;
CODE_009B89:          JSL.L ExecutePtr                    ;; 009B89 : 22 DF 86 00 ;
                                                          ;;                      ;
Ptrs009B8D:           .dw CODE_009B91                     ;; ?QPWZ? : 91 9B       ;
                      .dw CODE_009B9A                     ;; ?QPWZ? : 9A 9B       ;
                                                          ;;                      ;
CODE_009B91:          LDY.B #$0C                          ;; 009B91 : A0 0C       ;
CODE_009B93:          JSR.W CODE_009D29                   ;; 009B93 : 20 29 9D    ;
CODE_009B96:          INC.W $13C9                         ;; 009B96 : EE C9 13    ;
Return009B99:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009B9A:          LDY.B #$00                          ;; 009B9A : A0 00       ;
CODE_009B9C:          JSR.W CODE_009AD0                   ;; 009B9C : 20 D0 9A    ;
CODE_009B9F:          TXA                                 ;; 009B9F : 8A          ;
CODE_009BA0:          BNE ADDR_009BA5                     ;; 009BA0 : D0 03       ;
CODE_009BA2:          JMP.W CODE_009E17                   ;; 009BA2 : 4C 17 9E    ;
                                                          ;;                      ;
ADDR_009BA5:          JMP.W CODE_009C89                   ;; 009BA5 : 4C 89 9C    ;
                                                          ;;                      ;
CODE_009BA8:          PHB                                 ;; 009BA8 : 8B          ; Wrapper 
CODE_009BA9:          PHK                                 ;; 009BA9 : 4B          ;
CODE_009BAA:          PLB                                 ;; 009BAA : AB          ;
CODE_009BAB:          JSR.W CODE_009BB0                   ;; 009BAB : 20 B0 9B    ;
CODE_009BAE:          PLB                                 ;; 009BAE : AB          ;
Return009BAF:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
CODE_009BB0:          LDY.B #$06                          ;; 009BB0 : A0 06       ;
CODE_009BB2:          JSR.W CODE_009AD0                   ;; 009BB2 : 20 D0 9A    ;
CODE_009BB5:          TXA                                 ;; 009BB5 : 8A          ;
CODE_009BB6:          BNE CODE_009BC4                     ;; 009BB6 : D0 0C       ;
CODE_009BB8:          STZ.W $1DFC                         ;; 009BB8 : 9C FC 1D    ;
CODE_009BBB:          LDA.B #$05                          ;; 009BBB : A9 05       ;
CODE_009BBD:          STA.W $1DF9                         ;; 009BBD : 8D F9 1D    ;
CODE_009BC0:          JSL.L CODE_009BC9                   ;; 009BC0 : 22 C9 9B 00 ;
CODE_009BC4:          JSL.L CODE_009C13                   ;; 009BC4 : 22 13 9C 00 ;
Return009BC8:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009BC9:          PHB                                 ;; 009BC9 : 8B          ;
CODE_009BCA:          PHK                                 ;; 009BCA : 4B          ;
CODE_009BCB:          PLB                                 ;; 009BCB : AB          ;
CODE_009BCC:          LDX.W $010A                         ;; 009BCC : AE 0A 01    ;
CODE_009BCF:          LDA.W DATA_009CCB,X                 ;; 009BCF : BD CB 9C    ;
CODE_009BD2:          XBA                                 ;; 009BD2 : EB          ;
CODE_009BD3:          LDA.W DATA_009CCE,X                 ;; 009BD3 : BD CE 9C    ;
CODE_009BD6:          REP #$10                            ;; 009BD6 : C2 10       ; Index (16 bit) 
CODE_009BD8:          TAX                                 ;; 009BD8 : AA          ;
CODE_009BD9:          LDY.W #$0000                        ;; 009BD9 : A0 00 00    ;
CODE_009BDC:          STY $8A                             ;; 009BDC : 84 8A       ;
CODE_009BDE:          LDA.W $1F49,Y                       ;; 009BDE : B9 49 1F    ;
CODE_009BE1:          STA.L $700000,X                     ;; 009BE1 : 9F 00 00 70 ;
CODE_009BE5:          CLC                                 ;; 009BE5 : 18          ;
CODE_009BE6:          ADC $8A                             ;; 009BE6 : 65 8A       ;
CODE_009BE8:          STA $8A                             ;; 009BE8 : 85 8A       ;
CODE_009BEA:          BCC CODE_009BEE                     ;; 009BEA : 90 02       ;
CODE_009BEC:          INC $8B                             ;; 009BEC : E6 8B       ;
CODE_009BEE:          INX                                 ;; 009BEE : E8          ;
CODE_009BEF:          INY                                 ;; 009BEF : C8          ;
CODE_009BF0:          CPY.W #$008D                        ;; 009BF0 : C0 8D 00    ;
CODE_009BF3:          BCC CODE_009BDE                     ;; 009BF3 : 90 E9       ;
CODE_009BF5:          REP #$20                            ;; 009BF5 : C2 20       ; Accum (16 bit) 
CODE_009BF7:          LDA.W #$5A5A                        ;; 009BF7 : A9 5A 5A    ;
CODE_009BFA:          SEC                                 ;; 009BFA : 38          ;
CODE_009BFB:          SBC $8A                             ;; 009BFB : E5 8A       ;
CODE_009BFD:          STA.L $700000,X                     ;; 009BFD : 9F 00 00 70 ;
CODE_009C01:          CPX.W #$01AD                        ;; 009C01 : E0 AD 01    ;
CODE_009C04:          BCS CODE_009C0F                     ;; 009C04 : B0 09       ;
CODE_009C06:          TXA                                 ;; 009C06 : 8A          ;
CODE_009C07:          ADC.W #$0120                        ;; 009C07 : 69 20 01    ;
CODE_009C0A:          TAX                                 ;; 009C0A : AA          ;
CODE_009C0B:          SEP #$20                            ;; 009C0B : E2 20       ; Accum (8 bit) 
CODE_009C0D:          BRA CODE_009BD9                     ;; 009C0D : 80 CA       ;
                                                          ;;                      ;
CODE_009C0F:          SEP #$30                            ;; 009C0F : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_009C11:          PLB                                 ;; 009C11 : AB          ;
Return009C12:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
CODE_009C13:          INC.W $1B87                         ;; 009C13 : EE 87 1B    ;
CODE_009C16:          INC.W $1B88                         ;; 009C16 : EE 88 1B    ;
CODE_009C19:          LDY.B #$1B                          ;; 009C19 : A0 1B       ;
                                                          ;;                      ;
Instr009C1B:          .db $20,$29,$9D                     ;; ?QPWZ?               ;
                                                          ;;                      ;
Return009C1E:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
                                                          ;;                      ;
IntroControlData:     .db $41                             ;; ?QPWZ?               ;
                                                          ;;                      ;
ItrCntrlrSqnc:        .db $0F,$C1,$30,$00,$10,$42,$20,$41 ;; ?QPWZ?               ;
                      .db $70,$81,$11,$00,$80,$82,$0C,$00 ;; ?QPWZ?               ;
                      .db $30,$C1,$30,$41,$60,$C1,$10,$00 ;; ?QPWZ?               ;
                      .db $40,$01,$30,$E1,$01,$00,$60,$41 ;; ?QPWZ?               ;
                      .db $4E,$80,$10,$00,$30,$41,$58,$00 ;; ?QPWZ?               ;
                      .db $20,$60,$01,$00,$30,$60,$01,$00 ;; ?QPWZ?               ;
                      .db $30,$60,$01,$00,$30,$60,$01,$00 ;; ?QPWZ?               ;
                      .db $30,$60,$01,$00,$30,$41,$1A,$C1 ;; ?QPWZ?               ;
                      .db $30,$00,$30,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
GAMEMODE_07:          JSR.W SetUp0DA0GM4                  ;;     07 : 20 74 9A    ;
CODE_009C67:          JSR.W CODE_009CBE                   ;; 009C67 : 20 BE 9C    ;
CODE_009C6A:          BNE CODE_009C9F                     ;; 009C6A : D0 33       ;
CODE_009C6C:          JSR.W NoButtons                     ;; 009C6C : 20 2D F6    ; Zero controller RAM mirror 
CODE_009C6F:          LDX.W $1DF4                         ;; 009C6F : AE F4 1D    ; (Unknown byte) -> X 
CODE_009C72:          DEC.W $1DF5                         ;; 009C72 : CE F5 1D    ; Decrement $1DF5 (unknown byte) 
CODE_009C75:          BNE CODE_009C82                     ;; 009C75 : D0 0B       ; if !=  0 branch forward 
CODE_009C77:          LDA.W ItrCntrlrSqnc,X               ;; 009C77 : BD 20 9C    ; Load $00/9C20,$1DF4 
CODE_009C7A:          STA.W $1DF5                         ;; 009C7A : 8D F5 1D    ; And store to $1DF5 
CODE_009C7D:          INX                                 ;; 009C7D : E8          ;
CODE_009C7E:          INX                                 ;; 009C7E : E8          ; $1DF4+=2 
CODE_009C7F:          STX.W $1DF4                         ;; 009C7F : 8E F4 1D    ;
CODE_009C82:          LDA.W ADDR_009C1D,X                 ;; 009C82 : BD 1D 9C    ; With the +=2 above, this is effectively LDA $9C20,$1DF4 
CODE_009C85:          CMP.B #$FF                          ;; 009C85 : C9 FF       ;
CODE_009C87:          BNE CODE_009C8F                     ;; 009C87 : D0 06       ;
CODE_009C89:          LDY.B #$02                          ;; 009C89 : A0 02       ; If = #$FF, switch to game mode #$02... 
CODE_009C8B:          STY.W RAM_GameMode                  ;; 009C8B : 8C 00 01    ;
Return009C8E:         RTS                                 ;; ?QPWZ? : 60          ; ...And finish 
                                                          ;;                      ;
CODE_009C8F:          AND.B #$DF                          ;; 009C8F : 29 DF       ;
CODE_009C91:          STA RAM_ControllerA                 ;; 009C91 : 85 15       ; Write to controller RAM byte 01 
CODE_009C93:          CMP.W ADDR_009C1D,X                 ;; 009C93 : DD 1D 9C    ;
CODE_009C96:          BNE CODE_009C9A                     ;; 009C96 : D0 02       ;
CODE_009C98:          AND.B #$9F                          ;; 009C98 : 29 9F       ;
CODE_009C9A:          STA $16                             ;; 009C9A : 85 16       ; Write to byte 01, Just-pressed variant 
CODE_009C9C:          JMP.W CODE_00A1DA                   ;; 009C9C : 4C DA A1    ; Jump to another section of this routine 
                                                          ;;                      ;
CODE_009C9F:          JSL.L RAM_7F8000                    ;; 009C9F : 22 00 80 7F ; IIRC, this contains a lot of STZ instructions 
CODE_009CA3:          LDA.B #$04                          ;; 009CA3 : A9 04       ;
CODE_009CA5:          STA.W $212C                         ;; 009CA5 : 8D 2C 21    ; Zero something related to PPU ; Background and Object Enable
CODE_009CA8:          LDA.B #$13                          ;; 009CA8 : A9 13       ;
CODE_009CAA:          STA.W $212D                         ;; 009CAA : 8D 2D 21    ; Sub Screen Designation
CODE_009CAD:          STZ.W $0D9F                         ;; 009CAD : 9C 9F 0D    ; Disable all HDMA 
CODE_009CB0:          LDA.B #$E9                          ;; 009CB0 : A9 E9       ;
CODE_009CB2:          STA.W $0109                         ;; 009CB2 : 8D 09 01    ; #$E9 -> Uknown RAM byte 
CODE_009CB5:          JSR.W CODE_WRITEOW                  ;; 009CB5 : 20 06 9F    ;
CODE_009CB8:          JSR.W CODE_009D38                   ;; 009CB8 : 20 38 9D    ; -> here 
CODE_009CBB:          JMP.W CODE_009417                   ;; 009CBB : 4C 17 94    ; Increase the Game mode and return (at jump point) 
                                                          ;;                      ;
CODE_009CBE:          LDA RAM_ControllerB                 ;; 009CBE : A5 17       ;
CODE_009CC0:          AND.B #$C0                          ;; 009CC0 : 29 C0       ;
CODE_009CC2:          BNE Return009CCA                    ;; 009CC2 : D0 06       ;
CODE_009CC4:          LDA RAM_ControllerA                 ;; 009CC4 : A5 15       ;
CODE_009CC6:          AND.B #$F0                          ;; 009CC6 : 29 F0       ;
CODE_009CC8:          BNE Return009CCA                    ;; 009CC8 : D0 00       ;
Return009CCA:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009CCB:          .db $00,$00,$01                     ;; 009CCB               ;
                                                          ;;                      ;
DATA_009CCE:          .db $00,$8F,$1E                     ;; 009CCE               ;
                                                          ;;                      ;
CODE_009CD1:          REP #$20                            ;; 009CD1 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_009CD3:          LDA.W #$7393                        ;; 009CD3 : A9 93 73    ;
CODE_009CD6:          LDY.B #$20                          ;; 009CD6 : A0 20       ;
CODE_009CD8:          JSR.W CODE_009D30                   ;; 009CD8 : 20 30 9D    ;
CODE_009CDB:          LDY.B #$02                          ;; 009CDB : A0 02       ;
CODE_009CDD:          JSR.W CODE_009ACB                   ;; 009CDD : 20 CB 9A    ;
CODE_009CE0:          INC.W RAM_GameMode                  ;; 009CE0 : EE 00 01    ;
CODE_009CE3:          CPX.B #$03                          ;; 009CE3 : E0 03       ;
CODE_009CE5:          BNE CODE_009CEF                     ;; 009CE5 : D0 08       ;
CODE_009CE7:          STZ.W $0DDE                         ;; 009CE7 : 9C DE 0D    ;
CODE_009CEA:          LDX.B #$00                          ;; 009CEA : A2 00       ;
CODE_009CEC:          JMP.W CODE_009D3A                   ;; 009CEC : 4C 3A 9D    ;
                                                          ;;                      ;
CODE_009CEF:          STX.W $010A                         ;; 009CEF : 8E 0A 01    ; Index (16 bit) Accum (8 bit) 
CODE_009CF2:          JSR.W CODE_009DB5                   ;; 009CF2 : 20 B5 9D    ;
CODE_009CF5:          BNE CODE_009D22                     ;; 009CF5 : D0 2B       ;
CODE_009CF7:          PHX                                 ;; 009CF7 : DA          ;
CODE_009CF8:          STZ.W $0109                         ;; 009CF8 : 9C 09 01    ;
CODE_009CFB:          LDA.B #$8F                          ;; 009CFB : A9 8F       ;
CODE_009CFD:          STA $00                             ;; 009CFD : 85 00       ;
CODE_009CFF:          LDA.L $700000,X                     ;; 009CFF : BF 00 00 70 ;
CODE_009D03:          PHX                                 ;; 009D03 : DA          ;
CODE_009D04:          TYX                                 ;; 009D04 : BB          ;
CODE_009D05:          STA.L $700000,X                     ;; 009D05 : 9F 00 00 70 ;
CODE_009D09:          PLX                                 ;; 009D09 : FA          ;
CODE_009D0A:          INX                                 ;; 009D0A : E8          ;
CODE_009D0B:          INY                                 ;; 009D0B : C8          ;
CODE_009D0C:          DEC $00                             ;; 009D0C : C6 00       ;
CODE_009D0E:          BNE CODE_009CFF                     ;; 009D0E : D0 EF       ;
CODE_009D10:          PLX                                 ;; 009D10 : FA          ;
CODE_009D11:          LDY.W #$0000                        ;; 009D11 : A0 00 00    ;
CODE_009D14:          LDA.L $700000,X                     ;; 009D14 : BF 00 00 70 ;
CODE_009D18:          STA.W $1F49,Y                       ;; 009D18 : 99 49 1F    ;
CODE_009D1B:          INX                                 ;; 009D1B : E8          ;
CODE_009D1C:          INY                                 ;; 009D1C : C8          ;
CODE_009D1D:          CPY.W #$008D                        ;; 009D1D : C0 8D 00    ;
CODE_009D20:          BCC CODE_009D14                     ;; 009D20 : 90 F2       ;
CODE_009D22:          SEP #$10                            ;; 009D22 : E2 10       ; Index (8 bit) 
CODE_009D24:          LDY.B #$12                          ;; 009D24 : A0 12       ; \ Draw 1 PLAYER GAME/2 PLAYER GAME text 
CODE_009D26:          INC.W RAM_GameMode                  ;; 009D26 : EE 00 01    ;  |Increase Game Mode 
CODE_009D29:          STY $12                             ;; 009D29 : 84 12       ; /  
CODE_009D2B:          LDX.B #$00                          ;; 009D2B : A2 00       ;
CODE_009D2D:          JMP.W CODE_009ED4                   ;; 009D2D : 4C D4 9E    ;
                                                          ;;                      ;
CODE_009D30:          STA.W $0701                         ;; 009D30 : 8D 01 07    ; Store A in BG color 
CODE_009D33:          STY $40                             ;; 009D33 : 84 40       ; Store Y in CGADSUB 
CODE_009D35:          SEP #$20                            ;; 009D35 : E2 20       ; 8 bit A ; Accum (8 bit) 
Return009D37:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009D38:          LDX.B #$CB                          ;; 009D38 : A2 CB       ;
CODE_009D3A:          STZ $05                             ;; 009D3A : 64 05       ;
CODE_009D3C:          REP #$10                            ;; 009D3C : C2 10       ; Index (16 bit) 
CODE_009D3E:          LDY.W #$0000                        ;; 009D3E : A0 00 00    ;
CODE_009D41:          LDA.L DATA_05B6FE,X                 ;; 009D41 : BF FE B6 05 ; X =  read index 
CODE_009D45:          PHX                                 ;; 009D45 : DA          ; Y = write index 
CODE_009D46:          TYX                                 ;; 009D46 : BB          ;
CODE_009D47:          STA.L $7F837D,X                     ;; 009D47 : 9F 7D 83 7F ; Layer 3-related table 
CODE_009D4B:          PLX                                 ;; 009D4B : FA          ;
CODE_009D4C:          INX                                 ;; 009D4C : E8          ;
CODE_009D4D:          INY                                 ;; 009D4D : C8          ;
CODE_009D4E:          CPY.W #$00CC                        ;; 009D4E : C0 CC 00    ; If not at end of loop, continue 
CODE_009D51:          BNE CODE_009D41                     ;; 009D51 : D0 EE       ;
CODE_009D53:          SEP #$10                            ;; 009D53 : E2 10       ; Index (8 bit) 
CODE_009D55:          LDA.B #$84                          ;; 009D55 : A9 84       ;
CODE_009D57:          STA $00                             ;; 009D57 : 85 00       ;
CODE_009D59:          LDX.B #$02                          ;; 009D59 : A2 02       ;
CODE_009D5B:          STX $04                             ;; 009D5B : 86 04       ;
CODE_009D5D:          LSR $05                             ;; 009D5D : 46 05       ;  $05 = $05 / 2 
CODE_009D5F:          BCS CODE_009DA6                     ;; 009D5F : B0 45       ;
CODE_009D61:          JSR.W CODE_009DB5                   ;; 009D61 : 20 B5 9D    ;
CODE_009D64:          BNE CODE_009DA6                     ;; 009D64 : D0 40       ;
CODE_009D66:          LDA.L $70008C,X                     ;; 009D66 : BF 8C 00 70 ;
CODE_009D6A:          SEP #$10                            ;; 009D6A : E2 10       ; Index (8 bit) 
CODE_009D6C:          CMP.B #$60                          ;; 009D6C : C9 60       ;
CODE_009D6E:          BCC CODE_009D76                     ;; 009D6E : 90 06       ;
CODE_009D70:          LDY.B #$87                          ;; 009D70 : A0 87       ;
CODE_009D72:          LDA.B #$88                          ;; 009D72 : A9 88       ;
CODE_009D74:          BRA CODE_009D7A                     ;; 009D74 : 80 04       ;
                                                          ;;                      ;
CODE_009D76:          JSR.W HexToDec                      ;; 009D76 : 20 45 90    ;
CODE_009D79:          TXY                                 ;; 009D79 : 9B          ;
CODE_009D7A:          LDX $00                             ;; 009D7A : A6 00       ;
CODE_009D7C:          STA.L $7F8381,X                     ;; 009D7C : 9F 81 83 7F ;
CODE_009D80:          TYA                                 ;; 009D80 : 98          ;
CODE_009D81:          BNE CODE_009D85                     ;; 009D81 : D0 02       ;
CODE_009D83:          LDY.B #$FC                          ;; 009D83 : A0 FC       ;
CODE_009D85:          TYA                                 ;; 009D85 : 98          ;
CODE_009D86:          STA.L $7F837F,X                     ;; 009D86 : 9F 7F 83 7F ;
CODE_009D8A:          LDA.B #$38                          ;; 009D8A : A9 38       ;
CODE_009D8C:          STA.L $7F8380,X                     ;; 009D8C : 9F 80 83 7F ;
CODE_009D90:          STA.L $7F8382,X                     ;; 009D90 : 9F 82 83 7F ;
CODE_009D94:          REP #$20                            ;; 009D94 : C2 20       ; Accum (16 bit) 
CODE_009D96:          LDY.B #$03                          ;; 009D96 : A0 03       ;
CODE_009D98:          LDA.W #$38FC                        ;; 009D98 : A9 FC 38    ;
CODE_009D9B:          STA.L $7F8383,X                     ;; 009D9B : 9F 83 83 7F ;
CODE_009D9F:          INX                                 ;; 009D9F : E8          ;
CODE_009DA0:          INX                                 ;; 009DA0 : E8          ;
CODE_009DA1:          DEY                                 ;; 009DA1 : 88          ;
CODE_009DA2:          BNE CODE_009D98                     ;; 009DA2 : D0 F4       ;
CODE_009DA4:          SEP #$20                            ;; 009DA4 : E2 20       ; Accum (8 bit) 
CODE_009DA6:          SEP #$10                            ;; 009DA6 : E2 10       ; Index (8 bit) 
CODE_009DA8:          LDA $00                             ;; 009DA8 : A5 00       ;
CODE_009DAA:          SEC                                 ;; 009DAA : 38          ;
CODE_009DAB:          SBC.B #$24                          ;; 009DAB : E9 24       ;
CODE_009DAD:          STA $00                             ;; 009DAD : 85 00       ;
CODE_009DAF:          LDX $04                             ;; 009DAF : A6 04       ;
CODE_009DB1:          DEX                                 ;; 009DB1 : CA          ;
CODE_009DB2:          BPL CODE_009D5B                     ;; 009DB2 : 10 A7       ;
Return009DB4:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009DB5:          LDA.W DATA_009CCB,X                 ;; 009DB5 : BD CB 9C    ;
CODE_009DB8:          XBA                                 ;; 009DB8 : EB          ;
CODE_009DB9:          LDA.W DATA_009CCE,X                 ;; 009DB9 : BD CE 9C    ;
CODE_009DBC:          REP #$30                            ;; 009DBC : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_009DBE:          TAX                                 ;; 009DBE : AA          ;
CODE_009DBF:          CLC                                 ;; 009DBF : 18          ;
CODE_009DC0:          ADC.W #$01AD                        ;; 009DC0 : 69 AD 01    ;
CODE_009DC3:          TAY                                 ;; 009DC3 : A8          ;
CODE_009DC4:          PHX                                 ;; 009DC4 : DA          ;
CODE_009DC5:          PHY                                 ;; 009DC5 : 5A          ;
CODE_009DC6:          LDA.L $70008D,X                     ;; 009DC6 : BF 8D 00 70 ;
CODE_009DCA:          STA $8A                             ;; 009DCA : 85 8A       ;
CODE_009DCC:          SEP #$20                            ;; 009DCC : E2 20       ; Accum (8 bit) 
CODE_009DCE:          LDY.W #$008D                        ;; 009DCE : A0 8D 00    ;
CODE_009DD1:          LDA.L $700000,X                     ;; 009DD1 : BF 00 00 70 ;
CODE_009DD5:          CLC                                 ;; 009DD5 : 18          ;
CODE_009DD6:          ADC $8A                             ;; 009DD6 : 65 8A       ;
CODE_009DD8:          STA $8A                             ;; 009DD8 : 85 8A       ;
CODE_009DDA:          BCC CODE_009DDE                     ;; 009DDA : 90 02       ;
CODE_009DDC:          INC $8B                             ;; 009DDC : E6 8B       ;
CODE_009DDE:          INX                                 ;; 009DDE : E8          ;
CODE_009DDF:          DEY                                 ;; 009DDF : 88          ;
CODE_009DE0:          BNE CODE_009DD1                     ;; 009DE0 : D0 EF       ;
CODE_009DE2:          REP #$20                            ;; 009DE2 : C2 20       ; Accum (16 bit) 
CODE_009DE4:          PLY                                 ;; 009DE4 : 7A          ;
CODE_009DE5:          PLX                                 ;; 009DE5 : FA          ;
CODE_009DE6:          LDA $8A                             ;; 009DE6 : A5 8A       ;
CODE_009DE8:          CMP.W #$5A5A                        ;; 009DE8 : C9 5A 5A    ;
CODE_009DEB:          BEQ CODE_009DF7                     ;; 009DEB : F0 0A       ;
CODE_009DED:          CPX.W #$01AC                        ;; 009DED : E0 AC 01    ;
CODE_009DF0:          BCS CODE_009DF7                     ;; 009DF0 : B0 05       ;
CODE_009DF2:          PHX                                 ;; 009DF2 : DA          ;
CODE_009DF3:          TYX                                 ;; 009DF3 : BB          ;
CODE_009DF4:          PLY                                 ;; 009DF4 : 7A          ;
CODE_009DF5:          BRA CODE_009DC4                     ;; 009DF5 : 80 CD       ;
                                                          ;;                      ;
CODE_009DF7:          SEP #$20                            ;; 009DF7 : E2 20       ; Accum (8 bit) 
Return009DF9:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_009DFA:          LDA $16                             ;; 009DFA : A5 16       ; Index (8 bit) 
CODE_009DFC:          ORA $18                             ;; 009DFC : 05 18       ;
CODE_009DFE:          AND.B #$40                          ;; 009DFE : 29 40       ;
CODE_009E00:          BEQ CODE_009E08                     ;; 009E00 : F0 06       ;
CODE_009E02:          DEC.W RAM_GameMode                  ;; 009E02 : CE 00 01    ;
CODE_009E05:          JMP.W CODE_009B2C                   ;; 009E05 : 4C 2C 9B    ;
                                                          ;;                      ;
CODE_009E08:          LDY.B #$04                          ;; 009E08 : A0 04       ;
CODE_009E0A:          JSR.W CODE_009ACB                   ;; 009E0A : 20 CB 9A    ;
CODE_009E0D:          STX.W $0DB2                         ;; 009E0D : 8E B2 0D    ;
CODE_009E10:          JSR.W CODE_00A195                   ;; 009E10 : 20 95 A1    ;
CODE_009E13:          JSL.L CODE_04DAAD                   ;; 009E13 : 22 AD DA 04 ;
CODE_009E17:          LDA.B #$80                          ;; 009E17 : A9 80       ;
CODE_009E19:          STA.W $1DFB                         ;; 009E19 : 8D FB 1D    ;
CODE_009E1C:          LDA.B #$FF                          ;; 009E1C : A9 FF       ;
CODE_009E1E:          STA.W $0DB5                         ;; 009E1E : 8D B5 0D    ;
CODE_009E21:          LDX.W $0DB2                         ;; 009E21 : AE B2 0D    ;
CODE_009E24:          LDA.B #$04                          ;; 009E24 : A9 04       ;
CODE_009E26:          STA.W RAM_PlayerLives,X             ;; 009E26 : 9D B4 0D    ;
CODE_009E29:          DEX                                 ;; 009E29 : CA          ;
CODE_009E2A:          BPL CODE_009E26                     ;; 009E2A : 10 FA       ;
CODE_009E2C:          STA.W RAM_StatusLives               ;; 009E2C : 8D BE 0D    ;
CODE_009E2F:          STZ.W RAM_StatusCoins               ;; 009E2F : 9C BF 0D    ;
CODE_009E32:          STZ.W RAM_OWHasYoshi                ;; 009E32 : 9C C1 0D    ;
CODE_009E35:          STZ RAM_MarioPowerUp                ;; 009E35 : 64 19       ;
CODE_009E37:          STZ.W $0DC2                         ;; 009E37 : 9C C2 0D    ;
CODE_009E3A:          STZ.W $13C9                         ;; 009E3A : 9C C9 13    ;
CODE_009E3D:          REP #$20                            ;; 009E3D : C2 20       ; Accum (16 bit) 
CODE_009E3F:          STZ.W RAM_PlayerCoins               ;; 009E3F : 9C B6 0D    ;
CODE_009E42:          STZ.W RAM_PlayerPowerUp             ;; 009E42 : 9C B8 0D    ;
CODE_009E45:          STZ.W RAM_PlyrYoshiColor            ;; 009E45 : 9C BA 0D    ;
CODE_009E48:          STZ.W $0DC2                         ;; 009E48 : 9C C2 0D    ;
CODE_009E4B:          STZ.W $0F48                         ;; 009E4B : 9C 48 0F    ;
CODE_009E4E:          STZ.W $0F34                         ;; 009E4E : 9C 34 0F    ;
CODE_009E51:          STZ.W $0F37                         ;; 009E51 : 9C 37 0F    ;
CODE_009E54:          SEP #$20                            ;; 009E54 : E2 20       ; Accum (8 bit) 
CODE_009E56:          STZ.W $0F36                         ;; 009E56 : 9C 36 0F    ;
CODE_009E59:          STZ.W $0F39                         ;; 009E59 : 9C 39 0F    ;
CODE_009E5C:          STZ.W $0DD5                         ;; 009E5C : 9C D5 0D    ;
CODE_009E5F:          STZ.W $0DB3                         ;; 009E5F : 9C B3 0D    ;
CODE_009E62:          JSR.W KeepModeActive                ;; 009E62 : 20 29 9F    ;
CODE_009E65:          LDY.B #$0B                          ;; 009E65 : A0 0B       ;
CODE_009E67:          JMP.W CODE_009C8B                   ;; 009E67 : 4C 8B 9C    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009E6A:          .db $02,$00,$04,$00,$02,$00,$02,$00 ;; 009E6A               ;
                      .db $04,$00                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_009E74:          .db $CB,$51,$E8,$51,$08,$52,$C4,$51 ;; 009E74               ;
                      .db $E5,$51                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_009E7E:          .db $01,$02,$04,$08                 ;; 009E7E               ;
                                                          ;;                      ;
CODE_009E82:          LDX.W $1B92                         ;; 009E82 : AE 92 1B    ;
CODE_009E85:          LDA.W DATA_009E7E,X                 ;; 009E85 : BD 7E 9E    ;
CODE_009E88:          TAX                                 ;; 009E88 : AA          ;
CODE_009E89:          LDA.W $1B91                         ;; 009E89 : AD 91 1B    ;
CODE_009E8C:          EOR.B #$1F                          ;; 009E8C : 49 1F       ;
CODE_009E8E:          AND.B #$18                          ;; 009E8E : 29 18       ;
CODE_009E90:          BNE CODE_009E94                     ;; 009E90 : D0 02       ;
CODE_009E92:          LDX.B #$00                          ;; 009E92 : A2 00       ;
CODE_009E94:          STX $00                             ;; 009E94 : 86 00       ;
CODE_009E96:          LDA.L $7F837B                       ;; 009E96 : AF 7B 83 7F ;
CODE_009E9A:          TAX                                 ;; 009E9A : AA          ;
CODE_009E9B:          REP #$20                            ;; 009E9B : C2 20       ; Accum (16 bit) 
CODE_009E9D:          LDA.W DATA_009E6A,Y                 ;; 009E9D : B9 6A 9E    ;
CODE_009EA0:          STA $8A                             ;; 009EA0 : 85 8A       ;
CODE_009EA2:          STA $02                             ;; 009EA2 : 85 02       ;
CODE_009EA4:          LDA.W DATA_009E74,Y                 ;; 009EA4 : B9 74 9E    ;
CODE_009EA7:          XBA                                 ;; 009EA7 : EB          ;
CODE_009EA8:          STA.L $7F837D,X                     ;; 009EA8 : 9F 7D 83 7F ;
CODE_009EAC:          XBA                                 ;; 009EAC : EB          ;
CODE_009EAD:          CLC                                 ;; 009EAD : 18          ;
CODE_009EAE:          ADC.W #$0040                        ;; 009EAE : 69 40 00    ;
CODE_009EB1:          PHA                                 ;; 009EB1 : 48          ;
CODE_009EB2:          LDA.W #$0100                        ;; 009EB2 : A9 00 01    ;
CODE_009EB5:          STA.L $7F837F,X                     ;; 009EB5 : 9F 7F 83 7F ;
CODE_009EB9:          LDA.W #$38FC                        ;; 009EB9 : A9 FC 38    ;
CODE_009EBC:          LSR $00                             ;; 009EBC : 46 00       ;
CODE_009EBE:          BCC CODE_009EC3                     ;; 009EBE : 90 03       ;
CODE_009EC0:          LDA.W #$3D2E                        ;; 009EC0 : A9 2E 3D    ;
CODE_009EC3:          STA.L $7F8381,X                     ;; 009EC3 : 9F 81 83 7F ;
CODE_009EC7:          PLA                                 ;; 009EC7 : 68          ;
CODE_009EC8:          INX                                 ;; 009EC8 : E8          ;
CODE_009EC9:          INX                                 ;; 009EC9 : E8          ;
CODE_009ECA:          INX                                 ;; 009ECA : E8          ;
CODE_009ECB:          INX                                 ;; 009ECB : E8          ;
CODE_009ECC:          INX                                 ;; 009ECC : E8          ;
CODE_009ECD:          INX                                 ;; 009ECD : E8          ;
CODE_009ECE:          DEC $02                             ;; 009ECE : C6 02       ;
CODE_009ED0:          BNE CODE_009EA7                     ;; 009ED0 : D0 D5       ;
CODE_009ED2:          SEP #$20                            ;; 009ED2 : E2 20       ; Accum (8 bit) 
CODE_009ED4:          TXA                                 ;; 009ED4 : 8A          ;
CODE_009ED5:          STA.L $7F837B                       ;; 009ED5 : 8F 7B 83 7F ;
CODE_009ED9:          LDA.B #$FF                          ;; 009ED9 : A9 FF       ;
CODE_009EDB:          STA.L $7F837D,X                     ;; 009EDB : 9F 7D 83 7F ;
Return009EDF:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
TBL_009EE0:           .db $28                             ;; 009EE0               ;
                                                          ;;                      ;
DATA_009EE1:          .db $03,$4D,$01,$52,$01,$53,$01,$5B ;; 009EE1               ;
                      .db $08,$5C,$02,$57,$04,$30,$01     ;; ?QPWZ?               ;
                                                          ;;                      ;
TBL_009EF0:           .db $01,$01,$02,$00,$02,$00,$68,$00 ;; 009EF0               ;
                      .db $78,$00,$68,$00,$78,$00,$06,$00 ;; ?QPWZ?               ;
                      .db $07,$00,$06,$00,$07,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_WRITEOW:         LDX.B #$8D                          ;; WRITEOW : A2 8D       ; Index (8 bit) 
CODE_009F08:          STZ.W $1F48,X                       ;; 009F08 : 9E 48 1F    ;
CODE_009F0B:          DEX                                 ;; 009F0B : CA          ;
CODE_009F0C:          BNE CODE_009F08                     ;; 009F0C : D0 FA       ;
CODE_009F0E:          LDX.B #$0E                          ;; 009F0E : A2 0E       ;
CODE_009F10:          LDY.W TBL_009EE0,X                  ;; 009F10 : BC E0 9E    ; \ 
CODE_009F13:          LDA.W DATA_009EE1,X                 ;; 009F13 : BD E1 9E    ; |Write overworld settings to OW L1 table 
CODE_009F16:          STA.W $1F49,Y                       ;; 009F16 : 99 49 1F    ; / 
CODE_009F19:          DEX                                 ;; 009F19 : CA          ;
CODE_009F1A:          DEX                                 ;; 009F1A : CA          ;
CODE_009F1B:          BPL CODE_009F10                     ;; 009F1B : 10 F3       ;
CODE_009F1D:          LDX.B #$15                          ;; 009F1D : A2 15       ;
CODE_009F1F:          LDA.W TBL_009EF0,X                  ;; 009F1F : BD F0 9E    ;
CODE_009F22:          STA.W $1FB8,X                       ;; 009F22 : 9D B8 1F    ; <- This probably means that the table above ends at 1FB7 
CODE_009F25:          DEX                                 ;; 009F25 : CA          ;
CODE_009F26:          BPL CODE_009F1F                     ;; 009F26 : 10 F7       ;
Return009F28:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
KeepModeActive:       LDA.B #$01                          ;; ?QPWZ? : A9 01       ;
CODE_009F2B:          STA.W $0DB1                         ;; 009F2B : 8D B1 0D    ;
Return009F2E:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009F2F:          .db $01,$FF                         ;; 009F2F               ;
                                                          ;;                      ;
DATA_009F31:          .db $F0,$10                         ;; 009F31               ;
                                                          ;;                      ;
DATA_009F33:          .db $0F,$00,$00,$F0                 ;; 009F33               ;
                                                          ;;                      ;
TmpFade:              DEC.W $0DB1                         ;; ?QPWZ? : CE B1 0D    ; \If 0DB1 = 0 Then Exit Ssub 
CODE_009F3A:          BPL Return009F6E                    ;; 009F3A : 10 32       ; /Decrease it either way. 
CODE_009F3C:          JSR.W KeepModeActive                ;; 009F3C : 20 29 9F    ; #$01 -> $0DB1 
CODE_009F3F:          LDY.W $0DAF                         ;; 009F3F : AC AF 0D    ;
CODE_009F42:          LDA.W $0DB0                         ;; 009F42 : AD B0 0D    ; \  
CODE_009F45:          CLC                                 ;; 009F45 : 18          ;  |Increase $0DB0 (mosaic size) by $9F31,y 
CODE_009F46:          ADC.W DATA_009F31,Y                 ;; 009F46 : 79 31 9F    ;  | 
CODE_009F49:          STA.W $0DB0                         ;; 009F49 : 8D B0 0D    ; /  
CODE_009F4C:          LDA.W $0DAE                         ;; 009F4C : AD AE 0D    ; Load Brightness byte from RAM 
CODE_009F4F:          CLC                                 ;; 009F4F : 18          ; \Add $9F2F,Y 
CODE_009F50:          ADC.W DATA_009F2F,Y                 ;; 009F50 : 79 2F 9F    ; / 
CODE_009F53:          STA.W $0DAE                         ;; 009F53 : 8D AE 0D    ; Store back to brightness RAM byte 
CODE_009F56:          CMP.W DATA_009F33,Y                 ;; 009F56 : D9 33 9F    ;
CODE_009F59:          BNE CODE_009F66                     ;; 009F59 : D0 0B       ;
GM++Mosaic:           INC.W RAM_GameMode                  ;; ?QPWZ? : EE 00 01    ; Game Mode += 1 
CODE_009F5E:          LDA.W $0DAF                         ;; 009F5E : AD AF 0D    ; \  
CODE_009F61:          EOR.B #$01                          ;; 009F61 : 49 01       ;  |$0DAF = $0DAF XOR 1 
CODE_009F63:          STA.W $0DAF                         ;; 009F63 : 8D AF 0D    ; /  
CODE_009F66:          LDA.B #$03                          ;; 009F66 : A9 03       ; \  
CODE_009F68:          ORA.W $0DB0                         ;; 009F68 : 0D B0 0D    ;  |Set mosaic size to $0DB0, enable mosaic on Layer 1 and 2. 
CODE_009F6B:          STA.W $2106                         ;; 009F6B : 8D 06 21    ; /  ; Mosaic Size and BG Enable
Return009F6E:         RTS                                 ;; ?QPWZ? : 60          ; I think we're done here 
                                                          ;;                      ;
CODE_009F6F:          DEC.W $0DB1                         ;; 009F6F : CE B1 0D    ; Decrement something...  Seems like it might be a timing counter ; Index (8 bit) 
CODE_009F72:          BPL Return009F6E                    ;; 009F72 : 10 FA       ; If positive, return from subroutine. 
CODE_009F74:          JSR.W KeepModeActive                ;; 009F74 : 20 29 9F    ; Remain in this mode 
CODE_009F77:          LDY.W $0DAF                         ;; 009F77 : AC AF 0D    ; $0DAF -> Y, 
CODE_009F7A:          BRA CODE_009F4C                     ;; 009F7A : 80 D0       ; BRA to the fade control routine 
                                                          ;;                      ;
CODE_009F7C:          DEC.W $0DB1                         ;; 009F7C : CE B1 0D    ;
CODE_009F7F:          BPL Return009F6E                    ;; 009F7F : 10 ED       ;
CODE_009F81:          LDA.B #$08                          ;; 009F81 : A9 08       ;
CODE_009F83:          JSR.W CODE_009F2B                   ;; 009F83 : 20 2B 9F    ;
CODE_009F86:          BRA CODE_009F77                     ;; 009F86 : 80 EF       ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_009F88:          .db $01,$02,$C0,$01,$80,$81,$01,$02 ;; 009F88               ;
                      .db $C0,$01,$02,$81,$01,$02,$80,$01 ;; ?QPWZ?               ;
                      .db $02,$81,$01,$02,$81,$01,$02,$C0 ;; ?QPWZ?               ;
                      .db $01,$02,$C0,$01,$02,$81,$01,$02 ;; ?QPWZ?               ;
                      .db $80,$01,$02,$80,$01,$02,$80,$01 ;; ?QPWZ?               ;
                      .db $02,$81,$01,$02,$81,$01,$02,$80 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_009FB8:          LDA.W $1931                         ;; 009FB8 : AD 31 19    ; \  
CODE_009FBB:          ASL                                 ;; 009FBB : 0A          ;  |Get (Tileset*3), store in $00 
CODE_009FBC:          CLC                                 ;; 009FBC : 18          ;  | 
CODE_009FBD:          ADC.W $1931                         ;; 009FBD : 6D 31 19    ;  | 
CODE_009FC0:          STA $00                             ;; 009FC0 : 85 00       ; /  
CODE_009FC2:          LDA.W $1BE3                         ;; 009FC2 : AD E3 1B    ;
CODE_009FC5:          BEQ CODE_00A012                     ;; 009FC5 : F0 4B       ;
CODE_009FC7:          DEC A                               ;; 009FC7 : 3A          ;
CODE_009FC8:          CLC                                 ;; 009FC8 : 18          ;
CODE_009FC9:          ADC $00                             ;; 009FC9 : 65 00       ;
CODE_009FCB:          TAX                                 ;; 009FCB : AA          ;
CODE_009FCC:          LDA.W DATA_009F88,X                 ;; 009FCC : BD 88 9F    ;
CODE_009FCF:          BMI CODE_009FEA                     ;; 009FCF : 30 19       ;
CODE_009FD1:          STA.W $1403                         ;; 009FD1 : 8D 03 14    ;
CODE_009FD4:          LSR                                 ;; 009FD4 : 4A          ;
CODE_009FD5:          PHP                                 ;; 009FD5 : 08          ;
CODE_009FD6:          JSR.W CODE_00A045                   ;; 009FD6 : 20 45 A0    ;
CODE_009FD9:          LDA.B #$70                          ;; 009FD9 : A9 70       ;
CODE_009FDB:          PLP                                 ;; 009FDB : 28          ;
CODE_009FDC:          BEQ CODE_009FE0                     ;; 009FDC : F0 02       ;
CODE_009FDE:          LDA.B #$40                          ;; 009FDE : A9 40       ;
CODE_009FE0:          STA $24                             ;; 009FE0 : 85 24       ;
CODE_009FE2:          STZ $25                             ;; 009FE2 : 64 25       ;
CODE_009FE4:          JSL.L CODE_05BC72                   ;; 009FE4 : 22 72 BC 05 ;
CODE_009FE8:          BRA CODE_00A01B                     ;; 009FE8 : 80 31       ;
                                                          ;;                      ;
CODE_009FEA:          ASL                                 ;; 009FEA : 0A          ;
CODE_009FEB:          BMI CODE_00A012                     ;; 009FEB : 30 25       ;
CODE_009FED:          BEQ CODE_00A007                     ;; 009FED : F0 18       ;
CODE_009FEF:          LDA.W $1931                         ;; 009FEF : AD 31 19    ;
CODE_009FF2:          CMP.B #$01                          ;; 009FF2 : C9 01       ;
CODE_009FF4:          BEQ CODE_009FFA                     ;; 009FF4 : F0 04       ;
CODE_009FF6:          CMP.B #$03                          ;; 009FF6 : C9 03       ;
CODE_009FF8:          BNE CODE_00A01F                     ;; 009FF8 : D0 25       ;
CODE_009FFA:          REP #$20                            ;; 009FFA : C2 20       ; Accum (16 bit) 
CODE_009FFC:          LDA RAM_ScreenBndryXLo              ;; 009FFC : A5 1A       ;
CODE_009FFE:          LSR                                 ;; 009FFE : 4A          ;
CODE_009FFF:          STA $22                             ;; 009FFF : 85 22       ;
CODE_00A001:          SEP #$20                            ;; 00A001 : E2 20       ; Accum (8 bit) 
CODE_00A003:          LDA.B #$C0                          ;; 00A003 : A9 C0       ;
CODE_00A005:          BRA CODE_00A017                     ;; 00A005 : 80 10       ;
                                                          ;;                      ;
CODE_00A007:          LDX.B #$07                          ;; 00A007 : A2 07       ;
CODE_00A009:          LDA.W DATA_00B66C,X                 ;; 00A009 : BD 6C B6    ;
CODE_00A00C:          STA.W $071B,X                       ;; 00A00C : 9D 1B 07    ;
CODE_00A00F:          DEX                                 ;; 00A00F : CA          ;
CODE_00A010:          BPL CODE_00A009                     ;; 00A010 : 10 F7       ;
CODE_00A012:          INC.W $13D5                         ;; 00A012 : EE D5 13    ;
CODE_00A015:          LDA.B #$D0                          ;; 00A015 : A9 D0       ;
CODE_00A017:          STA $24                             ;; 00A017 : 85 24       ;
CODE_00A019:          STZ $25                             ;; 00A019 : 64 25       ;
CODE_00A01B:          LDA.B #$04                          ;; 00A01B : A9 04       ;
CODE_00A01D:          TRB $40                             ;; 00A01D : 14 40       ;
CODE_00A01F:          LDA.W $1BE3                         ;; 00A01F : AD E3 1B    ;
CODE_00A022:          BEQ Return00A044                    ;; 00A022 : F0 20       ;
CODE_00A024:          DEC A                               ;; 00A024 : 3A          ;
CODE_00A025:          CLC                                 ;; 00A025 : 18          ;
CODE_00A026:          ADC $00                             ;; 00A026 : 65 00       ;
CODE_00A028:          STA $01                             ;; 00A028 : 85 01       ;
CODE_00A02A:          ASL                                 ;; 00A02A : 0A          ;
CODE_00A02B:          CLC                                 ;; 00A02B : 18          ;
CODE_00A02C:          ADC $01                             ;; 00A02C : 65 01       ;
CODE_00A02E:          TAX                                 ;; 00A02E : AA          ;
CODE_00A02F:          LDA.L Layer3Ptr,X                   ;; 00A02F : BF 00 90 05 ;
CODE_00A033:          STA $00                             ;; 00A033 : 85 00       ;
CODE_00A035:          LDA.L Layer3Ptr+1,X                 ;; 00A035 : BF 01 90 05 ;
CODE_00A039:          STA $01                             ;; 00A039 : 85 01       ;
CODE_00A03B:          LDA.L Layer3Ptr+2,X                 ;; 00A03B : BF 02 90 05 ;
CODE_00A03F:          STA $02                             ;; 00A03F : 85 02       ;
CODE_00A041:          JSR.W CODE_00871E                   ;; 00A041 : 20 1E 87    ;
Return00A044:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A045:          REP #$30                            ;; 00A045 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00A047:          LDX.W #$0100                        ;; 00A047 : A2 00 01    ;
CODE_00A04A:          LDY.W #$0058                        ;; 00A04A : A0 58 00    ;
CODE_00A04D:          LDA.W #$0000                        ;; 00A04D : A9 00 00    ;
CODE_00A050:          STA.L $7EE300,X                     ;; 00A050 : 9F 00 E3 7E ;
CODE_00A054:          INX                                 ;; 00A054 : E8          ;
CODE_00A055:          INX                                 ;; 00A055 : E8          ;
CODE_00A056:          DEY                                 ;; 00A056 : 88          ;
CODE_00A057:          BNE CODE_00A050                     ;; 00A057 : D0 F7       ;
CODE_00A059:          TXA                                 ;; 00A059 : 8A          ;
CODE_00A05A:          CLC                                 ;; 00A05A : 18          ;
CODE_00A05B:          ADC.W #$0100                        ;; 00A05B : 69 00 01    ;
CODE_00A05E:          TAX                                 ;; 00A05E : AA          ;
CODE_00A05F:          CPX.W #$1B00                        ;; 00A05F : E0 00 1B    ;
CODE_00A062:          BCC CODE_00A04A                     ;; 00A062 : 90 E6       ;
CODE_00A064:          SEP #$30                            ;; 00A064 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00A066:          LDA.B #$80                          ;; 00A066 : A9 80       ;
CODE_00A068:          TSB RAM_IsVerticalLvl               ;; 00A068 : 04 5B       ;
Return00A06A:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A06B:          .db $00,$00,$EF,$FF,$EF,$FF,$EF,$FF ;; 00A06B               ;
                      .db $F0,$00,$F0,$00,$F0,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00A079:          .db $00,$00,$D8,$FF,$80,$00,$28,$01 ;; 00A079               ;
                      .db $D8,$FF,$80,$00,$28,$01         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00A087:          JSR.W TurnOffIO                     ;; 00A087 : 20 7D 93    ;
CODE_00A08A:          LDA.W $1B9C                         ;; 00A08A : AD 9C 1B    ;
CODE_00A08D:          BEQ CODE_00A093                     ;; 00A08D : F0 04       ;
CODE_00A08F:          JSL.L CODE_04853B                   ;; 00A08F : 22 3B 85 04 ;
CODE_00A093:          JSR.W Clear_1A_13D3                 ;; 00A093 : 20 A6 A1    ;
CODE_00A096:          LDA.W $0109                         ;; 00A096 : AD 09 01    ;
CODE_00A099:          BEQ CODE_00A0B0                     ;; 00A099 : F0 15       ;
CODE_00A09B:          LDA.B #$B0                          ;; 00A09B : A9 B0       ;
CODE_00A09D:          STA.W $1DF5                         ;; 00A09D : 8D F5 1D    ;
CODE_00A0A0:          STZ.W $1F11                         ;; 00A0A0 : 9C 11 1F    ;
CODE_00A0A3:          LDA.B #$F0                          ;; 00A0A3 : A9 F0       ;
CODE_00A0A5:          STA.W $0DB0                         ;; 00A0A5 : 8D B0 0D    ;
CODE_00A0A8:          LDA.B #$10                          ;; 00A0A8 : A9 10       ;
CODE_00A0AA:          STA.W RAM_GameMode                  ;; 00A0AA : 8D 00 01    ;
CODE_00A0AD:          JMP.W Mode04Finish                  ;; 00A0AD : 4C F7 93    ;
                                                          ;;                      ;
CODE_00A0B0:          JSR.W CODE_0085FA                   ;; 00A0B0 : 20 FA 85    ;
CODE_00A0B3:          JSR.W UploadMusicBank1              ;; 00A0B3 : 20 0E 81    ;
CODE_00A0B6:          JSR.W SetUpScreen                   ;; 00A0B6 : 20 79 8A    ;
CODE_00A0B9:          STZ.W $0DDA                         ;; 00A0B9 : 9C DA 0D    ;
CODE_00A0BC:          LDX.W $0DB3                         ;; 00A0BC : AE B3 0D    ;
CODE_00A0BF:          LDA.W RAM_StatusLives               ;; 00A0BF : AD BE 0D    ;
CODE_00A0C2:          BPL CODE_00A0C7                     ;; 00A0C2 : 10 03       ;
CODE_00A0C4:          INC.W $1B87                         ;; 00A0C4 : EE 87 1B    ;
CODE_00A0C7:          STA.W RAM_PlayerLives,X             ;; 00A0C7 : 9D B4 0D    ;
CODE_00A0CA:          LDA RAM_MarioPowerUp                ;; 00A0CA : A5 19       ;
CODE_00A0CC:          STA.W RAM_PlayerPowerUp,X           ;; 00A0CC : 9D B8 0D    ;
CODE_00A0CF:          LDA.W RAM_StatusCoins               ;; 00A0CF : AD BF 0D    ;
CODE_00A0D2:          STA.W RAM_PlayerCoins,X             ;; 00A0D2 : 9D B6 0D    ;
CODE_00A0D5:          LDA.W RAM_OWHasYoshi                ;; 00A0D5 : AD C1 0D    ;
CODE_00A0D8:          BEQ CODE_00A0DD                     ;; 00A0D8 : F0 03       ;
CODE_00A0DA:          LDA.W RAM_YoshiColor                ;; 00A0DA : AD C7 13    ;
CODE_00A0DD:          STA.W RAM_PlyrYoshiColor,X          ;; 00A0DD : 9D BA 0D    ;
CODE_00A0E0:          LDA.W $0DC2                         ;; 00A0E0 : AD C2 0D    ;
CODE_00A0E3:          STA.W $0DBC,X                       ;; 00A0E3 : 9D BC 0D    ;
CODE_00A0E6:          LDA.B #$03                          ;; 00A0E6 : A9 03       ;
CODE_00A0E8:          STA $44                             ;; 00A0E8 : 85 44       ;
CODE_00A0EA:          LDA.B #$30                          ;; 00A0EA : A9 30       ;
CODE_00A0EC:          LDX.B #$15                          ;; 00A0EC : A2 15       ;
CODE_00A0EE:          LDY.W $13C9                         ;; 00A0EE : AC C9 13    ;
CODE_00A0F1:          BEQ CODE_00A11B                     ;; 00A0F1 : F0 28       ;
CODE_00A0F3:          JSR.W CODE_00A195                   ;; 00A0F3 : 20 95 A1    ;
CODE_00A0F6:          LDA.W $1F2E                         ;; 00A0F6 : AD 2E 1F    ;
CODE_00A0F9:          BNE CODE_00A101                     ;; 00A0F9 : D0 06       ;
CODE_00A0FB:          JSR.W CODE_009C89                   ;; 00A0FB : 20 89 9C    ;
CODE_00A0FE:          JMP.W CODE_0093F4                   ;; 00A0FE : 4C F4 93    ;
                                                          ;;                      ;
CODE_00A101:          JSL.L CODE_04DAAD                   ;; 00A101 : 22 AD DA 04 ;
CODE_00A105:          REP #$20                            ;; 00A105 : C2 20       ; Accum (16 bit) 
CODE_00A107:          LDA.W #$318C                        ;; 00A107 : A9 8C 31    ;
CODE_00A10A:          STA.W $0701                         ;; 00A10A : 8D 01 07    ;
CODE_00A10D:          SEP #$20                            ;; 00A10D : E2 20       ; Accum (8 bit) 
CODE_00A10F:          LDA.B #$30                          ;; 00A10F : A9 30       ;
CODE_00A111:          STA $43                             ;; 00A111 : 85 43       ;
CODE_00A113:          LDA.B #$20                          ;; 00A113 : A9 20       ;
CODE_00A115:          STA $44                             ;; 00A115 : 85 44       ;
CODE_00A117:          LDA.B #$B3                          ;; 00A117 : A9 B3       ;
CODE_00A119:          LDX.B #$17                          ;; 00A119 : A2 17       ;
CODE_00A11B:          LDY.B #$02                          ;; 00A11B : A0 02       ;
CODE_00A11D:          JSR.W ScreenSettings                ;; 00A11D : 20 FD 93    ;
CODE_00A120:          STX.W $212E                         ;; 00A120 : 8E 2E 21    ; Window Mask Designation for Main Screen
CODE_00A123:          STY.W $212F                         ;; 00A123 : 8C 2F 21    ; Window Mask Designation for Sub Screen
CODE_00A126:          JSL.L CODE_04DC09                   ;; 00A126 : 22 09 DC 04 ;
CODE_00A12A:          LDX.W $0DB3                         ;; 00A12A : AE B3 0D    ;
CODE_00A12D:          LDA.W $1F11,X                       ;; 00A12D : BD 11 1F    ;
CODE_00A130:          ASL                                 ;; 00A130 : 0A          ;
CODE_00A131:          TAX                                 ;; 00A131 : AA          ;
CODE_00A132:          REP #$20                            ;; 00A132 : C2 20       ; Accum (16 bit) 
CODE_00A134:          LDA.W DATA_00A06B,X                 ;; 00A134 : BD 6B A0    ;
CODE_00A137:          STA RAM_ScreenBndryXLo              ;; 00A137 : 85 1A       ;
CODE_00A139:          STA $1E                             ;; 00A139 : 85 1E       ;
CODE_00A13B:          LDA.W DATA_00A079,X                 ;; 00A13B : BD 79 A0    ;
CODE_00A13E:          STA RAM_ScreenBndryYLo              ;; 00A13E : 85 1C       ;
CODE_00A140:          STA $20                             ;; 00A140 : 85 20       ;
CODE_00A142:          SEP #$20                            ;; 00A142 : E2 20       ; Accum (8 bit) 
CODE_00A144:          JSR.W UploadSpriteGFX               ;; 00A144 : 20 DA A9    ;
CODE_00A147:          LDY.B #$14                          ;; 00A147 : A0 14       ;
CODE_00A149:          JSL.L CODE_00BA28                   ;; 00A149 : 22 28 BA 00 ;
CODE_00A14D:          JSR.W CODE_00AD25                   ;; 00A14D : 20 25 AD    ;
CODE_00A150:          JSR.W CODE_00922F                   ;; 00A150 : 20 2F 92    ;
CODE_00A153:          LDA.B #$06                          ;; 00A153 : A9 06       ; \ Load overworld border 
CODE_00A155:          STA $12                             ;; 00A155 : 85 12       ;  | 
CODE_00A157:          JSR.W LoadScrnImage                 ;; 00A157 : 20 D2 85    ; /  
CODE_00A15A:          JSL.L CODE_05DBF2                   ;; 00A15A : 22 F2 DB 05 ;
CODE_00A15E:          JSR.W LoadScrnImage                 ;; 00A15E : 20 D2 85    ;
CODE_00A161:          JSL.L CODE_048D91                   ;; 00A161 : 22 91 8D 04 ;
CODE_00A165:          JSL.L CODE_04D6E9                   ;; 00A165 : 22 E9 D6 04 ;
CODE_00A169:          LDA.B #$F0                          ;; 00A169 : A9 F0       ;
CODE_00A16B:          STA $3F                             ;; 00A16B : 85 3F       ;
CODE_00A16D:          JSR.W CODE_008494                   ;; 00A16D : 20 94 84    ;
CODE_00A170:          JSR.W LoadScrnImage                 ;; 00A170 : 20 D2 85    ;
CODE_00A173:          STZ.W $13D9                         ;; 00A173 : 9C D9 13    ;
CODE_00A176:          JSR.W KeepModeActive                ;; 00A176 : 20 29 9F    ;
CODE_00A179:          LDA.B #$02                          ;; 00A179 : A9 02       ;
CODE_00A17B:          STA.W $0D9B                         ;; 00A17B : 8D 9B 0D    ;
CODE_00A17E:          REP #$10                            ;; 00A17E : C2 10       ; Index (16 bit) 
CODE_00A180:          LDX.W #$01BE                        ;; 00A180 : A2 BE 01    ;
CODE_00A183:          LDA.B #$FF                          ;; 00A183 : A9 FF       ;
CODE_00A185:          STZ.W $04A0,X                       ;; 00A185 : 9E A0 04    ;
CODE_00A188:          STA.W $04A1,X                       ;; 00A188 : 9D A1 04    ;
CODE_00A18B:          DEX                                 ;; 00A18B : CA          ;
CODE_00A18C:          DEX                                 ;; 00A18C : CA          ;
CODE_00A18D:          BPL CODE_00A185                     ;; 00A18D : 10 F6       ;
CODE_00A18F:          JSR.W CODE_0092A0                   ;; 00A18F : 20 A0 92    ;
CODE_00A192:          JMP.W CODE_0093F4                   ;; 00A192 : 4C F4 93    ;
                                                          ;;                      ;
CODE_00A195:          REP #$10                            ;; 00A195 : C2 10       ; Index (16 bit) 
CODE_00A197:          LDX.W #$008C                        ;; 00A197 : A2 8C 00    ;
CODE_00A19A:          LDA.W $1F49,X                       ;; 00A19A : BD 49 1F    ;
CODE_00A19D:          STA.W $1EA2,X                       ;; 00A19D : 9D A2 1E    ;
CODE_00A1A0:          DEX                                 ;; 00A1A0 : CA          ;
CODE_00A1A1:          BPL CODE_00A19A                     ;; 00A1A1 : 10 F7       ;
CODE_00A1A3:          SEP #$10                            ;; 00A1A3 : E2 10       ; Index (8 bit) 
Return00A1A5:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
Clear_1A_13D3:        REP #$10                            ;; 1A_13D3 : C2 10       ; 16 bit X,Y ; Index (16 bit) 
CODE_00A1A8:          SEP #$20                            ;; 00A1A8 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_00A1AA:          LDX.W #$00BD                        ;; 00A1AA : A2 BD 00    ; \  
CODE_00A1AD:          STZ RAM_ScreenBndryXLo,X            ;; 00A1AD : 74 1A       ;  |Clear RAM addresses $1A-$D7 
CODE_00A1AF:          DEX                                 ;; 00A1AF : CA          ;  | 
CODE_00A1B0:          BPL CODE_00A1AD                     ;; 00A1B0 : 10 FB       ; /  
CODE_00A1B2:          LDX.W #$07CE                        ;; 00A1B2 : A2 CE 07    ; \  
CODE_00A1B5:          STZ.W $13D3,X                       ;; 00A1B5 : 9E D3 13    ;  |Clear RAM addresses $13D3-$1BA1 
CODE_00A1B8:          DEX                                 ;; 00A1B8 : CA          ;  | 
CODE_00A1B9:          BPL CODE_00A1B5                     ;; 00A1B9 : 10 FA       ; /  
CODE_00A1BB:          SEP #$10                            ;; 00A1BB : E2 10       ; 16 bit X,Y ; Index (8 bit) 
Return00A1BD:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00A1BE:          JSR.W SetUp0DA0GM4                  ;; 00A1BE : 20 74 9A    ;
CODE_00A1C1:          INC RAM_FrameCounterB               ;; 00A1C1 : E6 14       ; Increase alternate frame counter 
CODE_00A1C3:          JSL.L RAM_7F8000                    ;; 00A1C3 : 22 00 80 7F ;
CODE_00A1C7:          JSL.L GameMode_0E_Prim              ;; 00A1C7 : 22 41 82 04 ; (Bank 4.asm) 
CODE_00A1CB:          JMP.W CODE_008494                   ;; 00A1CB : 4C 94 84    ;
                                                          ;;                      ;
                                                          ;;                      ;
GrndShakeDispYLo:     .db $FE,$00,$02,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
GrndShakeDispYHi:     .db $FF,$00,$00,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00A1D6:          .db $12,$22,$12,$02                 ;; 00A1D6               ;
                                                          ;;                      ;
CODE_00A1DA:          LDA.W $1426                         ;; 00A1DA : AD 26 14    ;
CODE_00A1DD:          BEQ CODE_00A1E4                     ;; 00A1DD : F0 05       ;
CODE_00A1DF:          JSL.L CODE_05B10C                   ;; 00A1DF : 22 0C B1 05 ;
Return00A1E3:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A1E4:          LDA.W $1425                         ;; 00A1E4 : AD 25 14    ;
CODE_00A1E7:          BEQ CODE_00A200                     ;; 00A1E7 : F0 17       ;
CODE_00A1E9:          LDA.W $14AB                         ;; 00A1E9 : AD AB 14    ;
CODE_00A1EC:          BEQ CODE_00A200                     ;; 00A1EC : F0 12       ;
CODE_00A1EE:          CMP.B #$40                          ;; 00A1EE : C9 40       ;
CODE_00A1F0:          BCS CODE_00A200                     ;; 00A1F0 : B0 0E       ;
CODE_00A1F2:          JSR.W NoButtons                     ;; 00A1F2 : 20 2D F6    ;
CODE_00A1F5:          CMP.B #$1C                          ;; 00A1F5 : C9 1C       ;
CODE_00A1F7:          BCS CODE_00A200                     ;; 00A1F7 : B0 07       ;
CODE_00A1F9:          JSR.W SetMarioPeaceImg              ;; 00A1F9 : 20 31 CA    ;
CODE_00A1FC:          LDA.B #$0D                          ;; 00A1FC : A9 0D       ;
CODE_00A1FE:          STA RAM_MarioAnimation              ;; 00A1FE : 85 71       ;
CODE_00A200:          ORA RAM_MarioAnimation              ;; 00A200 : 05 71       ;
CODE_00A202:          ORA.W $1493                         ;; 00A202 : 0D 93 14    ;
CODE_00A205:          BEQ CODE_00A211                     ;; 00A205 : F0 0A       ;
CODE_00A207:          LDA.B #$04                          ;; 00A207 : A9 04       ;
CODE_00A209:          TRB RAM_ControllerA                 ;; 00A209 : 14 15       ;
CODE_00A20B:          LDA.B #$40                          ;; 00A20B : A9 40       ;
CODE_00A20D:          TRB $16                             ;; 00A20D : 14 16       ;
CODE_00A20F:          TRB $18                             ;; 00A20F : 14 18       ;
CODE_00A211:          LDA.W $13D3                         ;; 00A211 : AD D3 13    ;
CODE_00A214:          BEQ CODE_00A21B                     ;; 00A214 : F0 05       ;
CODE_00A216:          DEC.W $13D3                         ;; 00A216 : CE D3 13    ;
CODE_00A219:          BRA CODE_00A242                     ;; 00A219 : 80 27       ;
                                                          ;;                      ;
CODE_00A21B:          LDA $16                             ;; 00A21B : A5 16       ;
CODE_00A21D:          AND.B #$10                          ;; 00A21D : 29 10       ;
CODE_00A21F:          BEQ CODE_00A242                     ;; 00A21F : F0 21       ;
CODE_00A221:          LDA.W $1493                         ;; 00A221 : AD 93 14    ;
CODE_00A224:          BNE CODE_00A242                     ;; 00A224 : D0 1C       ;
CODE_00A226:          LDA RAM_MarioAnimation              ;; 00A226 : A5 71       ;
CODE_00A228:          CMP.B #$09                          ;; 00A228 : C9 09       ;
CODE_00A22A:          BCS CODE_00A242                     ;; 00A22A : B0 16       ;
CODE_00A22C:          LDA.B #$3C                          ;; 00A22C : A9 3C       ;
CODE_00A22E:          STA.W $13D3                         ;; 00A22E : 8D D3 13    ;
CODE_00A231:          LDY.B #$12                          ;; 00A231 : A0 12       ;
CODE_00A233:          LDA.W $13D4                         ;; 00A233 : AD D4 13    ;
CODE_00A236:          EOR.B #$01                          ;; 00A236 : 49 01       ;
CODE_00A238:          STA.W $13D4                         ;; 00A238 : 8D D4 13    ;
CODE_00A23B:          BEQ CODE_00A23F                     ;; 00A23B : F0 02       ;
CODE_00A23D:          LDY.B #$11                          ;; 00A23D : A0 11       ;
CODE_00A23F:          STY.W $1DF9                         ;; 00A23F : 8C F9 1D    ;
CODE_00A242:          LDA.W $13D4                         ;; 00A242 : AD D4 13    ;
CODE_00A245:          BEQ CODE_00A28A                     ;; 00A245 : F0 43       ;
CODE_00A247:          BRA CODE_00A25B                     ;; 00A247 : 80 12       ;
                                                          ;;                      ;
ADDR_00A249:          BIT.W $0DA7                         ;; 00A249 : 2C A7 0D    ; \ Unreachable 
ADDR_00A24C:          BVS ADDR_00A259                     ;; 00A24C : 70 0B       ;  | Debug: Slow motion 
ADDR_00A24E:          LDA.W $0DA3                         ;; 00A24E : AD A3 0D    ;  | 
ADDR_00A251:          BPL CODE_00A25B                     ;; 00A251 : 10 08       ;  | 
ADDR_00A253:          LDA RAM_FrameCounter                ;; 00A253 : A5 13       ;  | 
ADDR_00A255:          AND.B #$0F                          ;; 00A255 : 29 0F       ;  | 
ADDR_00A257:          BNE CODE_00A25B                     ;; 00A257 : D0 02       ;  | 
ADDR_00A259:          BRA CODE_00A28A                     ;; 00A259 : 80 2F       ; / 
                                                          ;;                      ;
CODE_00A25B:          LDA RAM_ControllerA                 ;; 00A25B : A5 15       ;
CODE_00A25D:          AND.B #$20                          ;; 00A25D : 29 20       ;
CODE_00A25F:          BEQ Return00A289                    ;; 00A25F : F0 28       ;
CODE_00A261:          LDY.W $13BF                         ;; 00A261 : AC BF 13    ;
CODE_00A264:          LDA.W $1EA2,Y                       ;; 00A264 : B9 A2 1E    ;
CODE_00A267:          BPL Return00A289                    ;; 00A267 : 10 20       ;
CODE_00A269:          LDA.W $0DD5                         ;; 00A269 : AD D5 0D    ;
CODE_00A26C:          BEQ CODE_00A270                     ;; 00A26C : F0 02       ;
ADDR_00A26E:          BPL Return00A289                    ;; 00A26E : 10 19       ;
CODE_00A270:          LDA.B #$80                          ;; 00A270 : A9 80       ;
CODE_00A272:          BRA CODE_00A27E                     ;; 00A272 : 80 0A       ;
                                                          ;;                      ;
ADDR_00A274:          LDA.B #$01                          ;; 00A274 : A9 01       ; \ Unreachable 
ADDR_00A276:          BIT RAM_ControllerA                 ;; 00A276 : 24 15       ;  | Debug: Beat level with Start+Select 
ADDR_00A278:          BPL ADDR_00A27B                     ;; 00A278 : 10 01       ;  | 
ADDR_00A27A:          INC A                               ;; 00A27A : 1A          ; / 
ADDR_00A27B:          STA.W $13CE                         ;; 00A27B : 8D CE 13    ;
CODE_00A27E:          STA.W $0DD5                         ;; 00A27E : 8D D5 0D    ;
CODE_00A281:          INC.W $1DE9                         ;; 00A281 : EE E9 1D    ;
CODE_00A284:          LDA.B #$0B                          ;; 00A284 : A9 0B       ;
CODE_00A286:          STA.W RAM_GameMode                  ;; 00A286 : 8D 00 01    ;
Return00A289:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A28A:          LDA.W $0D9B                         ;; 00A28A : AD 9B 0D    ;
CODE_00A28D:          BPL CODE_00A295                     ;; 00A28D : 10 06       ;
CODE_00A28F:          JSR.W CODE_00987D                   ;; 00A28F : 20 7D 98    ;
CODE_00A292:          JMP.W CODE_00A2A9                   ;; 00A292 : 4C A9 A2    ;
                                                          ;;                      ;
CODE_00A295:          JSL.L RAM_7F8000                    ;; 00A295 : 22 00 80 7F ;
CODE_00A299:          JSL.L CODE_00F6DB                   ;; 00A299 : 22 DB F6 00 ;
CODE_00A29D:          JSL.L CODE_05BC00                   ;; 00A29D : 22 00 BC 05 ;
CODE_00A2A1:          JSL.L CODE_0586F1                   ;; 00A2A1 : 22 F1 86 05 ;
CODE_00A2A5:          JSL.L CODE_05BB39                   ;; 00A2A5 : 22 39 BB 05 ;
CODE_00A2A9:          LDA RAM_ScreenBndryYLo              ;; 00A2A9 : A5 1C       ;
CODE_00A2AB:          PHA                                 ;; 00A2AB : 48          ;
CODE_00A2AC:          LDA RAM_ScreenBndryYHi              ;; 00A2AC : A5 1D       ;
CODE_00A2AE:          PHA                                 ;; 00A2AE : 48          ;
CODE_00A2AF:          STZ.W RAM_Layer1DispYLo             ;; 00A2AF : 9C 88 18    ; \ Reset amout to shift level 
CODE_00A2B2:          STZ.W RAM_Layer1DispYHi             ;; 00A2B2 : 9C 89 18    ; / 
CODE_00A2B5:          LDA.W RAM_ShakeGrndTimer            ;; 00A2B5 : AD 87 18    ; \ If shake ground timer is set 
CODE_00A2B8:          BEQ CODE_00A2D5                     ;; 00A2B8 : F0 1B       ;  | 
CODE_00A2BA:          DEC.W RAM_ShakeGrndTimer            ;; 00A2BA : CE 87 18    ;  | Decrement timer 
CODE_00A2BD:          AND.B #$03                          ;; 00A2BD : 29 03       ;  | 
CODE_00A2BF:          TAY                                 ;; 00A2BF : A8          ;  | 
CODE_00A2C0:          LDA.W GrndShakeDispYLo,Y            ;; 00A2C0 : B9 CE A1    ;  | 
CODE_00A2C3:          STA.W RAM_Layer1DispYLo             ;; 00A2C3 : 8D 88 18    ;  | $1888-$1889 = Amount to shift level 
CODE_00A2C6:          CLC                                 ;; 00A2C6 : 18          ;  | 
CODE_00A2C7:          ADC RAM_ScreenBndryYLo              ;; 00A2C7 : 65 1C       ;  | 
CODE_00A2C9:          STA RAM_ScreenBndryYLo              ;; 00A2C9 : 85 1C       ;  | Adjust screen boundry accordingly 
CODE_00A2CB:          LDA.W GrndShakeDispYHi,Y            ;; 00A2CB : B9 D2 A1    ;  | 
CODE_00A2CE:          STA.W RAM_Layer1DispYHi             ;; 00A2CE : 8D 89 18    ;  | 
CODE_00A2D1:          ADC RAM_ScreenBndryYHi              ;; 00A2D1 : 65 1D       ;  | 
CODE_00A2D3:          STA RAM_ScreenBndryYHi              ;; 00A2D3 : 85 1D       ; / 
CODE_00A2D5:          JSR.W CODE_008E1A                   ;; 00A2D5 : 20 1A 8E    ;
CODE_00A2D8:          JSL.L CODE_00E2BD                   ;; 00A2D8 : 22 BD E2 00 ;
CODE_00A2DC:          JSR.W CODE_00A2F3                   ;; 00A2DC : 20 F3 A2    ;
CODE_00A2DF:          JSR.W CODE_00C47E                   ;; 00A2DF : 20 7E C4    ;
CODE_00A2E2:          JSL.L CODE_01808C                   ;; 00A2E2 : 22 8C 80 01 ;
CODE_00A2E6:          JSL.L CODE_028AB1                   ;; 00A2E6 : 22 B1 8A 02 ;
CODE_00A2EA:          PLA                                 ;; 00A2EA : 68          ;
CODE_00A2EB:          STA RAM_ScreenBndryYHi              ;; 00A2EB : 85 1D       ;
CODE_00A2ED:          PLA                                 ;; 00A2ED : 68          ;
CODE_00A2EE:          STA RAM_ScreenBndryYLo              ;; 00A2EE : 85 1C       ;
CODE_00A2F0:          JMP.W CODE_008494                   ;; 00A2F0 : 4C 94 84    ;
                                                          ;;                      ;
CODE_00A2F3:          REP #$20                            ;; 00A2F3 : C2 20       ; Accum (16 bit) 
CODE_00A2F5:          LDA RAM_MarioXPos                   ;; 00A2F5 : A5 94       ;
CODE_00A2F7:          STA $D1                             ;; 00A2F7 : 85 D1       ;
CODE_00A2F9:          LDA RAM_MarioYPos                   ;; 00A2F9 : A5 96       ;
CODE_00A2FB:          STA $D3                             ;; 00A2FB : 85 D3       ;
CODE_00A2FD:          SEP #$20                            ;; 00A2FD : E2 20       ; Accum (8 bit) 
Return00A2FF:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
MarioGFXDMA:          REP #$20                            ;; ?QPWZ? : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_00A302:          LDX.B #$04                          ;; 00A302 : A2 04       ; We're using DMA channel 2 
CODE_00A304:          LDY.W $0D84                         ;; 00A304 : AC 84 0D    ;
CODE_00A307:          BEQ CODE_00A328                     ;; 00A307 : F0 1F       ;
CODE_00A309:          LDY.B #$86                          ;; 00A309 : A0 86       ; \ Set Address for CG-RAM Write to x86 
CODE_00A30B:          STY.W $2121                         ;; 00A30B : 8C 21 21    ; / ; Address for CG-RAM Write
CODE_00A30E:          LDA.W #$2200                        ;; 00A30E : A9 00 22    ;
CODE_00A311:          STA.W $4320                         ;; 00A311 : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A314:          LDA.W $0D82                         ;; 00A314 : AD 82 0D    ; \ Get location of palette from $0D82-$0D83 
CODE_00A317:          STA.W $4322                         ;; 00A317 : 8D 22 43    ; / ; A Address (Low Byte)
CODE_00A31A:          LDY.B #$00                          ;; 00A31A : A0 00       ; \ Palette is stored in bank x00 
CODE_00A31C:          STY.W $4324                         ;; 00A31C : 8C 24 43    ; / ; A Address Bank
CODE_00A31F:          LDA.W #$0014                        ;; 00A31F : A9 14 00    ; \ x14 bytes will be transferred 
CODE_00A322:          STA.W $4325                         ;; 00A322 : 8D 25 43    ; / ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A325:          STX.W $420B                         ;; 00A325 : 8E 0B 42    ; Transfer the colors ; Regular DMA Channel Enable
CODE_00A328:          LDY.B #$80                          ;; 00A328 : A0 80       ; \ Set VRAM Address Increment Value to x80 
CODE_00A32A:          STY.W $2115                         ;; 00A32A : 8C 15 21    ; / ; VRAM Address Increment Value
CODE_00A32D:          LDA.W #$1801                        ;; 00A32D : A9 01 18    ;
CODE_00A330:          STA.W $4320                         ;; 00A330 : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A333:          LDA.W #$67F0                        ;; 00A333 : A9 F0 67    ;
CODE_00A336:          STA.W $2116                         ;; 00A336 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A339:          LDA.W $0D99                         ;; 00A339 : AD 99 0D    ;
CODE_00A33C:          STA.W $4322                         ;; 00A33C : 8D 22 43    ; A Address (Low Byte)
CODE_00A33F:          LDY.B #$7E                          ;; 00A33F : A0 7E       ; \ Set bank to x7E 
CODE_00A341:          STY.W $4324                         ;; 00A341 : 8C 24 43    ; / ; A Address Bank
CODE_00A344:          LDA.W #$0020                        ;; 00A344 : A9 20 00    ; \ x20 bytes will be transferred 
CODE_00A347:          STA.W $4325                         ;; 00A347 : 8D 25 43    ; / ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A34A:          STX.W $420B                         ;; 00A34A : 8E 0B 42    ; Transfer ; Regular DMA Channel Enable
CODE_00A34D:          LDA.W #$6000                        ;; 00A34D : A9 00 60    ; \ Set Address for VRAM Read/Write to x6000 
CODE_00A350:          STA.W $2116                         ;; 00A350 : 8D 16 21    ; / ; Address for VRAM Read/Write (Low Byte)
CODE_00A353:          LDX.B #$00                          ;; 00A353 : A2 00       ;
CODE_00A355:          LDA.W $0D85,X                       ;; 00A355 : BD 85 0D    ; \ Get address of graphics to copy 
CODE_00A358:          STA.W $4322                         ;; 00A358 : 8D 22 43    ; / ; A Address (Low Byte)
CODE_00A35B:          LDA.W #$0040                        ;; 00A35B : A9 40 00    ; \ x40 bytes will be transferred 
CODE_00A35E:          STA.W $4325                         ;; 00A35E : 8D 25 43    ; / ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A361:          LDY.B #$04                          ;; 00A361 : A0 04       ; \ Transfer 
CODE_00A363:          STY.W $420B                         ;; 00A363 : 8C 0B 42    ; / ; Regular DMA Channel Enable
CODE_00A366:          INX                                 ;; 00A366 : E8          ; \ Move to next address 
CODE_00A367:          INX                                 ;; 00A367 : E8          ; /  
CODE_00A368:          CPX.W $0D84                         ;; 00A368 : EC 84 0D    ; \ Repeat last segment while X<$0D84 
CODE_00A36B:          BCC CODE_00A355                     ;; 00A36B : 90 E8       ; /  
CODE_00A36D:          LDA.W #$6100                        ;; 00A36D : A9 00 61    ; \ Set Address for VRAM Read/Write to x6100 
CODE_00A370:          STA.W $2116                         ;; 00A370 : 8D 16 21    ; / ; Address for VRAM Read/Write (Low Byte)
CODE_00A373:          LDX.B #$00                          ;; 00A373 : A2 00       ;
CODE_00A375:          LDA.W $0D8F,X                       ;; 00A375 : BD 8F 0D    ; \ Get address of graphics to copy 
CODE_00A378:          STA.W $4322                         ;; 00A378 : 8D 22 43    ; / ; A Address (Low Byte)
CODE_00A37B:          LDA.W #$0040                        ;; 00A37B : A9 40 00    ; \ x40 bytes will be transferred 
CODE_00A37E:          STA.W $4325                         ;; 00A37E : 8D 25 43    ; / ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A381:          LDY.B #$04                          ;; 00A381 : A0 04       ; \ Transfer 
CODE_00A383:          STY.W $420B                         ;; 00A383 : 8C 0B 42    ; / ; Regular DMA Channel Enable
CODE_00A386:          INX                                 ;; 00A386 : E8          ; \ Move to next address 
CODE_00A387:          INX                                 ;; 00A387 : E8          ; /  
CODE_00A388:          CPX.W $0D84                         ;; 00A388 : EC 84 0D    ; \ Repeat last segment while X<$0D84 
CODE_00A38B:          BCC CODE_00A375                     ;; 00A38B : 90 E8       ; /  
CODE_00A38D:          SEP #$20                            ;; 00A38D : E2 20       ; 8 bit A ; Accum (8 bit) 
Return00A38F:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00A390:          REP #$20                            ;; 00A390 : C2 20       ; Accum (16 bit) 
CODE_00A392:          LDY.B #$80                          ;; 00A392 : A0 80       ;
CODE_00A394:          STY.W $2115                         ;; 00A394 : 8C 15 21    ; VRAM Address Increment Value
CODE_00A397:          LDA.W #$1801                        ;; 00A397 : A9 01 18    ;
CODE_00A39A:          STA.W $4320                         ;; 00A39A : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A39D:          LDY.B #$7E                          ;; 00A39D : A0 7E       ;
CODE_00A39F:          STY.W $4324                         ;; 00A39F : 8C 24 43    ; A Address Bank
CODE_00A3A2:          LDX.B #$04                          ;; 00A3A2 : A2 04       ;
CODE_00A3A4:          LDA.W $0D80                         ;; 00A3A4 : AD 80 0D    ;
CODE_00A3A7:          BEQ CODE_00A3BB                     ;; 00A3A7 : F0 12       ;
CODE_00A3A9:          STA.W $2116                         ;; 00A3A9 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A3AC:          LDA.W $0D7A                         ;; 00A3AC : AD 7A 0D    ;
CODE_00A3AF:          STA.W $4322                         ;; 00A3AF : 8D 22 43    ; A Address (Low Byte)
CODE_00A3B2:          LDA.W #$0080                        ;; 00A3B2 : A9 80 00    ;
CODE_00A3B5:          STA.W $4325                         ;; 00A3B5 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A3B8:          STX.W $420B                         ;; 00A3B8 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A3BB:          LDA.W $0D7E                         ;; 00A3BB : AD 7E 0D    ;
CODE_00A3BE:          BEQ CODE_00A3D2                     ;; 00A3BE : F0 12       ;
CODE_00A3C0:          STA.W $2116                         ;; 00A3C0 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A3C3:          LDA.W $0D78                         ;; 00A3C3 : AD 78 0D    ;
CODE_00A3C6:          STA.W $4322                         ;; 00A3C6 : 8D 22 43    ; A Address (Low Byte)
CODE_00A3C9:          LDA.W #$0080                        ;; 00A3C9 : A9 80 00    ;
CODE_00A3CC:          STA.W $4325                         ;; 00A3CC : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A3CF:          STX.W $420B                         ;; 00A3CF : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A3D2:          LDA.W $0D7C                         ;; 00A3D2 : AD 7C 0D    ;
CODE_00A3D5:          BEQ CODE_00A418                     ;; 00A3D5 : F0 41       ;
CODE_00A3D7:          STA.W $2116                         ;; 00A3D7 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A3DA:          CMP.W #$0800                        ;; 00A3DA : C9 00 08    ;
CODE_00A3DD:          BEQ CODE_00A3F0                     ;; 00A3DD : F0 11       ;
CODE_00A3DF:          LDA.W $0D76                         ;; 00A3DF : AD 76 0D    ;
CODE_00A3E2:          STA.W $4322                         ;; 00A3E2 : 8D 22 43    ; A Address (Low Byte)
CODE_00A3E5:          LDA.W #$0080                        ;; 00A3E5 : A9 80 00    ;
CODE_00A3E8:          STA.W $4325                         ;; 00A3E8 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A3EB:          STX.W $420B                         ;; 00A3EB : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A3EE:          BRA CODE_00A418                     ;; 00A3EE : 80 28       ;
                                                          ;;                      ;
CODE_00A3F0:          LDA.W $0D76                         ;; 00A3F0 : AD 76 0D    ;
CODE_00A3F3:          STA.W $4322                         ;; 00A3F3 : 8D 22 43    ; A Address (Low Byte)
CODE_00A3F6:          LDA.W #$0040                        ;; 00A3F6 : A9 40 00    ;
CODE_00A3F9:          STA.W $4325                         ;; 00A3F9 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A3FC:          STX.W $420B                         ;; 00A3FC : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A3FF:          LDA.W #$0900                        ;; 00A3FF : A9 00 09    ;
CODE_00A402:          STA.W $2116                         ;; 00A402 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A405:          LDA.W $0D76                         ;; 00A405 : AD 76 0D    ;
CODE_00A408:          CLC                                 ;; 00A408 : 18          ;
CODE_00A409:          ADC.W #$0040                        ;; 00A409 : 69 40 00    ;
CODE_00A40C:          STA.W $4322                         ;; 00A40C : 8D 22 43    ; A Address (Low Byte)
CODE_00A40F:          LDA.W #$0040                        ;; 00A40F : A9 40 00    ;
CODE_00A412:          STA.W $4325                         ;; 00A412 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A415:          STX.W $420B                         ;; 00A415 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A418:          SEP #$20                            ;; 00A418 : E2 20       ; Accum (8 bit) 
CODE_00A41A:          LDA.B #$64                          ;; 00A41A : A9 64       ;
CODE_00A41C:          STZ $00                             ;; 00A41C : 64 00       ;
CODE_00A41E:          STA.W $2121                         ;; 00A41E : 8D 21 21    ; Address for CG-RAM Write
CODE_00A421:          LDA RAM_FrameCounterB               ;; 00A421 : A5 14       ;
CODE_00A423:          AND.B #$1C                          ;; 00A423 : 29 1C       ;
CODE_00A425:          LSR                                 ;; 00A425 : 4A          ;
CODE_00A426:          ADC $00                             ;; 00A426 : 65 00       ;
CODE_00A428:          TAY                                 ;; 00A428 : A8          ;
CODE_00A429:          LDA.W MorePalettes,Y                ;; 00A429 : B9 0C B6    ;
CODE_00A42C:          STA.W $2122                         ;; 00A42C : 8D 22 21    ; Data for CG-RAM Write
CODE_00A42F:          LDA.W DATA_00B60D,Y                 ;; 00A42F : B9 0D B6    ;
CODE_00A432:          STA.W $2122                         ;; 00A432 : 8D 22 21    ; Data for CG-RAM Write
Return00A435:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A436:          LDA.W $1935                         ;; 00A436 : AD 35 19    ;
CODE_00A439:          BEQ Return00A47E                    ;; 00A439 : F0 43       ;
CODE_00A43B:          STZ.W $1935                         ;; 00A43B : 9C 35 19    ;
CODE_00A43E:          REP #$20                            ;; 00A43E : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_00A440:          LDY.B #$80                          ;; 00A440 : A0 80       ;
CODE_00A442:          STY.W $2115                         ;; 00A442 : 8C 15 21    ; VRAM Address Increment Value
CODE_00A445:          LDA.W #$64A0                        ;; 00A445 : A9 A0 64    ;
CODE_00A448:          STA.W $2116                         ;; 00A448 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A44B:          LDA.W #$1801                        ;; 00A44B : A9 01 18    ;
CODE_00A44E:          STA.W $4320                         ;; 00A44E : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A451:          LDA.W #$0BF6                        ;; 00A451 : A9 F6 0B    ;
CODE_00A454:          STA.W $4322                         ;; 00A454 : 8D 22 43    ; A Address (Low Byte)
CODE_00A457:          LDY.B #$00                          ;; 00A457 : A0 00       ;
CODE_00A459:          STY.W $4324                         ;; 00A459 : 8C 24 43    ; A Address Bank
CODE_00A45C:          LDA.W #$00C0                        ;; 00A45C : A9 C0 00    ;
CODE_00A45F:          STA.W $4325                         ;; 00A45F : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A462:          LDX.B #$04                          ;; 00A462 : A2 04       ;
CODE_00A464:          STX.W $420B                         ;; 00A464 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A467:          LDA.W #$65A0                        ;; 00A467 : A9 A0 65    ;
CODE_00A46A:          STA.W $2116                         ;; 00A46A : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A46D:          LDA.W #$0CB6                        ;; 00A46D : A9 B6 0C    ;
CODE_00A470:          STA.W $4322                         ;; 00A470 : 8D 22 43    ; A Address (Low Byte)
CODE_00A473:          LDA.W #$00C0                        ;; 00A473 : A9 C0 00    ;
CODE_00A476:          STA.W $4325                         ;; 00A476 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A479:          STX.W $420B                         ;; 00A479 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A47C:          SEP #$20                            ;; 00A47C : E2 20       ; 8 bit A ; Accum (8 bit) 
Return00A47E:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A47F:          .db $82                             ;; 00A47F               ;
                                                          ;;                      ;
DATA_00A480:          .db $06                             ;; 00A480               ;
                                                          ;;                      ;
DATA_00A481:          .db $00,$05,$09,$00,$03,$07,$00     ;; 00A481               ;
                                                          ;;                      ;
CODE_00A488:          LDY.W $0680                         ;; 00A488 : AC 80 06    ;
CODE_00A48B:          LDX.W DATA_00A481,Y                 ;; 00A48B : BE 81 A4    ;
CODE_00A48E:          STX $02                             ;; 00A48E : 86 02       ;
CODE_00A490:          STZ $01                             ;; 00A490 : 64 01       ;
CODE_00A492:          STZ $00                             ;; 00A492 : 64 00       ;
CODE_00A494:          STZ $04                             ;; 00A494 : 64 04       ;
CODE_00A496:          LDA.W DATA_00A480,Y                 ;; 00A496 : B9 80 A4    ;
CODE_00A499:          XBA                                 ;; 00A499 : EB          ;
CODE_00A49A:          LDA.W DATA_00A47F,Y                 ;; 00A49A : B9 7F A4    ;
CODE_00A49D:          REP #$10                            ;; 00A49D : C2 10       ; Index (16 bit) 
CODE_00A49F:          TAY                                 ;; 00A49F : A8          ;
CODE_00A4A0:          LDA [$00],Y                         ;; 00A4A0 : B7 00       ;
CODE_00A4A2:          BEQ CODE_00A4CF                     ;; 00A4A2 : F0 2B       ;
CODE_00A4A4:          STX.W $4324                         ;; 00A4A4 : 8E 24 43    ; A Address Bank
CODE_00A4A7:          STA.W $4325                         ;; 00A4A7 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A4AA:          STA $03                             ;; 00A4AA : 85 03       ;
CODE_00A4AC:          STZ.W $4326                         ;; 00A4AC : 9C 26 43    ; Number Bytes to Transfer (High Byte) (DMA)
CODE_00A4AF:          INY                                 ;; 00A4AF : C8          ;
CODE_00A4B0:          LDA [$00],Y                         ;; 00A4B0 : B7 00       ;
CODE_00A4B2:          STA.W $2121                         ;; 00A4B2 : 8D 21 21    ; Address for CG-RAM Write
CODE_00A4B5:          REP #$20                            ;; 00A4B5 : C2 20       ; Accum (16 bit) 
CODE_00A4B7:          LDA.W #$2200                        ;; 00A4B7 : A9 00 22    ;
CODE_00A4BA:          STA.W $4320                         ;; 00A4BA : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A4BD:          INY                                 ;; 00A4BD : C8          ;
CODE_00A4BE:          TYA                                 ;; 00A4BE : 98          ;
CODE_00A4BF:          STA.W $4322                         ;; 00A4BF : 8D 22 43    ; A Address (Low Byte)
CODE_00A4C2:          CLC                                 ;; 00A4C2 : 18          ;
CODE_00A4C3:          ADC $03                             ;; 00A4C3 : 65 03       ;
CODE_00A4C5:          TAY                                 ;; 00A4C5 : A8          ;
CODE_00A4C6:          SEP #$20                            ;; 00A4C6 : E2 20       ; Accum (8 bit) 
CODE_00A4C8:          LDA.B #$04                          ;; 00A4C8 : A9 04       ;
CODE_00A4CA:          STA.W $420B                         ;; 00A4CA : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00A4CD:          BRA CODE_00A4A0                     ;; 00A4CD : 80 D1       ;
                                                          ;;                      ;
CODE_00A4CF:          SEP #$10                            ;; 00A4CF : E2 10       ; Index (8 bit) 
CODE_00A4D1:          JSR.W CODE_00AE47                   ;; 00A4D1 : 20 47 AE    ;
CODE_00A4D4:          LDA.W $0680                         ;; 00A4D4 : AD 80 06    ;
CODE_00A4D7:          BNE CODE_00A4DF                     ;; 00A4D7 : D0 06       ;
CODE_00A4D9:          STZ.W $0681                         ;; 00A4D9 : 9C 81 06    ;
CODE_00A4DC:          STZ.W $0682                         ;; 00A4DC : 9C 82 06    ;
CODE_00A4DF:          STZ.W $0680                         ;; 00A4DF : 9C 80 06    ;
Return00A4E2:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A4E3:          REP #$10                            ;; 00A4E3 : C2 10       ; Index (16 bit) 
CODE_00A4E5:          LDA.B #$80                          ;; 00A4E5 : A9 80       ;
CODE_00A4E7:          STA.W $2115                         ;; 00A4E7 : 8D 15 21    ; VRAM Address Increment Value
CODE_00A4EA:          LDY.W #$0750                        ;; 00A4EA : A0 50 07    ;
CODE_00A4ED:          STY.W $2116                         ;; 00A4ED : 8C 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A4F0:          LDY.W #$1801                        ;; 00A4F0 : A0 01 18    ;
CODE_00A4F3:          STY.W $4320                         ;; 00A4F3 : 8C 20 43    ; Parameters for DMA Transfer
CODE_00A4F6:          LDY.W #$0AF6                        ;; 00A4F6 : A0 F6 0A    ;
CODE_00A4F9:          STY.W $4322                         ;; 00A4F9 : 8C 22 43    ; A Address (Low Byte)
CODE_00A4FC:          STZ.W $4324                         ;; 00A4FC : 9C 24 43    ; A Address Bank
CODE_00A4FF:          LDY.W #$0160                        ;; 00A4FF : A0 60 01    ;
CODE_00A502:          STY.W $4325                         ;; 00A502 : 8C 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A505:          LDA.B #$04                          ;; 00A505 : A9 04       ;
CODE_00A507:          STA.W $420B                         ;; 00A507 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00A50A:          SEP #$10                            ;; 00A50A : E2 10       ; Index (8 bit) 
CODE_00A50C:          LDA.W $13D9                         ;; 00A50C : AD D9 13    ;
CODE_00A50F:          CMP.B #$0A                          ;; 00A50F : C9 0A       ;
CODE_00A511:          BEQ Return00A4E2                    ;; 00A511 : F0 CF       ;
CODE_00A513:          LDA.B #$6D                          ;; 00A513 : A9 6D       ;
CODE_00A515:          JSR.W CODE_00A41C                   ;; 00A515 : 20 1C A4    ;
CODE_00A518:          LDA.B #$10                          ;; 00A518 : A9 10       ;
CODE_00A51A:          STA $00                             ;; 00A51A : 85 00       ;
CODE_00A51C:          LDA.B #$7D                          ;; 00A51C : A9 7D       ;
CODE_00A51E:          JMP.W CODE_00A41E                   ;; 00A51E : 4C 1E A4    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A521:          .db $00,$04,$08,$0C                 ;; 00A521               ;
                                                          ;;                      ;
DATA_00A525:          .db $00,$08,$10,$18                 ;; 00A525               ;
                                                          ;;                      ;
CODE_00A529:          LDA.B #$80                          ;; 00A529 : A9 80       ;
CODE_00A52B:          STA.W $2115                         ;; 00A52B : 8D 15 21    ; VRAM Address Increment Value
CODE_00A52E:          STZ.W $2116                         ;; 00A52E : 9C 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A531:          LDA.B #$30                          ;; 00A531 : A9 30       ;
CODE_00A533:          CLC                                 ;; 00A533 : 18          ;
CODE_00A534:          ADC.W DATA_00A521,Y                 ;; 00A534 : 79 21 A5    ;
CODE_00A537:          STA.W $2117                         ;; 00A537 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00A53A:          LDX.B #$06                          ;; 00A53A : A2 06       ;
CODE_00A53C:          LDA.W DATA_00A586,X                 ;; 00A53C : BD 86 A5    ;
CODE_00A53F:          STA.W $4310,X                       ;; 00A53F : 9D 10 43    ;
CODE_00A542:          DEX                                 ;; 00A542 : CA          ;
CODE_00A543:          BPL CODE_00A53C                     ;; 00A543 : 10 F7       ;
CODE_00A545:          LDA.W $0DD6                         ;; 00A545 : AD D6 0D    ;
CODE_00A548:          LSR                                 ;; 00A548 : 4A          ;
CODE_00A549:          LSR                                 ;; 00A549 : 4A          ;
CODE_00A54A:          TAX                                 ;; 00A54A : AA          ;
CODE_00A54B:          LDA.W $1F11,X                       ;; 00A54B : BD 11 1F    ;
CODE_00A54E:          BEQ CODE_00A555                     ;; 00A54E : F0 05       ;
CODE_00A550:          LDA.B #$60                          ;; 00A550 : A9 60       ;
CODE_00A552:          STA.W $4313                         ;; 00A552 : 8D 13 43    ; A Address (High Byte)
CODE_00A555:          LDA.W $4313                         ;; 00A555 : AD 13 43    ; A Address (High Byte)
CODE_00A558:          CLC                                 ;; 00A558 : 18          ;
CODE_00A559:          ADC.W DATA_00A525,Y                 ;; 00A559 : 79 25 A5    ;
CODE_00A55C:          STA.W $4313                         ;; 00A55C : 8D 13 43    ; A Address (High Byte)
CODE_00A55F:          LDA.B #$02                          ;; 00A55F : A9 02       ;
CODE_00A561:          STA.W $420B                         ;; 00A561 : 8D 0B 42    ; Regular DMA Channel Enable
CODE_00A564:          LDA.B #$80                          ;; 00A564 : A9 80       ;
CODE_00A566:          STA.W $2115                         ;; 00A566 : 8D 15 21    ; VRAM Address Increment Value
CODE_00A569:          STZ.W $2116                         ;; 00A569 : 9C 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A56C:          LDA.B #$20                          ;; 00A56C : A9 20       ;
CODE_00A56E:          CLC                                 ;; 00A56E : 18          ;
CODE_00A56F:          ADC.W DATA_00A521,Y                 ;; 00A56F : 79 21 A5    ;
CODE_00A572:          STA.W $2117                         ;; 00A572 : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00A575:          LDX.B #$06                          ;; 00A575 : A2 06       ;
CODE_00A577:          LDA.W DATA_00A58D,X                 ;; 00A577 : BD 8D A5    ;
CODE_00A57A:          STA.W $4310,X                       ;; 00A57A : 9D 10 43    ;
CODE_00A57D:          DEX                                 ;; 00A57D : CA          ;
CODE_00A57E:          BPL CODE_00A577                     ;; 00A57E : 10 F7       ;
CODE_00A580:          LDA.B #$02                          ;; 00A580 : A9 02       ;
CODE_00A582:          STA.W $420B                         ;; 00A582 : 8D 0B 42    ; Regular DMA Channel Enable
Return00A585:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A586:          .db $01,$18,$00,$40,$7F,$00,$08     ;; 00A586               ;
                                                          ;;                      ;
DATA_00A58D:          .db $01,$18,$00,$E4,$7E,$00,$08     ;; 00A58D               ;
                                                          ;;                      ;
CODE_00A594:          PHB                                 ;; 00A594 : 8B          ; Wrapper 
CODE_00A595:          PHK                                 ;; 00A595 : 4B          ;
CODE_00A596:          PLB                                 ;; 00A596 : AB          ;
CODE_00A597:          JSR.W CODE_00AD25                   ;; 00A597 : 20 25 AD    ;
CODE_00A59A:          PLB                                 ;; 00A59A : AB          ;
Return00A59B:         RTL                                 ;; ?QPWZ? : 6B          ;
                                                          ;;                      ;
GM04Load:             JSR.W CODE_0085FA                   ;; ?QPWZ? : 20 FA 85    ; gah, stupid keyboard >_< 
CODE_00A59F:          JSR.W NoButtons                     ;; 00A59F : 20 2D F6    ;
CODE_00A5A2:          STZ.W $143A                         ;; 00A5A2 : 9C 3A 14    ;
CODE_00A5A5:          JSR.W SetUpScreen                   ;; 00A5A5 : 20 79 8A    ;
CODE_00A5A8:          JSR.W GM04DoDMA                     ;; 00A5A8 : 20 FF 8C    ;
CODE_00A5AB:          JSL.L CODE_05809E                   ;; 00A5AB : 22 9E 80 05 ; ->here 
CODE_00A5AF:          LDA.W $0D9B                         ;; 00A5AF : AD 9B 0D    ;
CODE_00A5B2:          BPL CODE_00A5B9                     ;; 00A5B2 : 10 05       ;
CODE_00A5B4:          JSR.W CODE_0097BC                   ;; 00A5B4 : 20 BC 97    ; Working on this routine 
CODE_00A5B7:          BRA CODE_00A5CF                     ;; 00A5B7 : 80 16       ;
                                                          ;;                      ;
CODE_00A5B9:          JSR.W UploadSpriteGFX               ;; 00A5B9 : 20 DA A9    ;
CODE_00A5BC:          JSR.W LoadPalette                   ;; 00A5BC : 20 ED AB    ;
CODE_00A5BF:          JSL.L CODE_05BE8A                   ;; 00A5BF : 22 8A BE 05 ;
CODE_00A5C3:          JSR.W CODE_009FB8                   ;; 00A5C3 : 20 B8 9F    ;
CODE_00A5C6:          JSR.W CODE_00A5F9                   ;; 00A5C6 : 20 F9 A5    ;
CODE_00A5C9:          JSR.W CODE_009260                   ;; 00A5C9 : 20 60 92    ;
CODE_00A5CC:          JSR.W CODE_009860                   ;; 00A5CC : 20 60 98    ;
CODE_00A5CF:          JSR.W CODE_00922F                   ;; 00A5CF : 20 2F 92    ;
CODE_00A5D2:          JSR.W KeepModeActive                ;; 00A5D2 : 20 29 9F    ;
CODE_00A5D5:          JSR.W CODE_008E1A                   ;; 00A5D5 : 20 1A 8E    ;
CODE_00A5D8:          REP #$30                            ;; 00A5D8 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00A5DA:          PHB                                 ;; 00A5DA : 8B          ;
CODE_00A5DB:          LDX.W #$0703                        ;; 00A5DB : A2 03 07    ;
CODE_00A5DE:          LDY.W #$0905                        ;; 00A5DE : A0 05 09    ;
CODE_00A5E1:          LDA.W #$01EF                        ;; 00A5E1 : A9 EF 01    ;
CODE_00A5E4:          MVN $00,$00                         ;; 00A5E4 : 54 00 00    ;
CODE_00A5E7:          PLB                                 ;; 00A5E7 : AB          ;
CODE_00A5E8:          LDX.W $0701                         ;; 00A5E8 : AE 01 07    ;
CODE_00A5EB:          STX.W $0903                         ;; 00A5EB : 8E 03 09    ;
CODE_00A5EE:          SEP #$30                            ;; 00A5EE : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00A5F0:          JSR.W CODE_00919B                   ;; 00A5F0 : 20 9B 91    ;
CODE_00A5F3:          JSR.W CODE_008494                   ;; 00A5F3 : 20 94 84    ;
CODE_00A5F6:          JMP.W CODE_0093F4                   ;; 00A5F6 : 4C F4 93    ;
                                                          ;;                      ;
CODE_00A5F9:          LDA.B #$E7                          ;; 00A5F9 : A9 E7       ;
CODE_00A5FB:          TRB RAM_FrameCounterB               ;; 00A5FB : 14 14       ;
CODE_00A5FD:          JSL.L CODE_05BB39                   ;; 00A5FD : 22 39 BB 05 ;
CODE_00A601:          JSR.W CODE_00A390                   ;; 00A601 : 20 90 A3    ;
CODE_00A604:          INC RAM_FrameCounterB               ;; 00A604 : E6 14       ;
CODE_00A606:          LDA RAM_FrameCounterB               ;; 00A606 : A5 14       ;
                                                          ;;                      ;
Instr00A608:          .db $29,$07                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00A60A:          BNE CODE_00A5FD                     ;; 00A60A : D0 F1       ;
Return00A60C:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A60D:          .db $00,$01,$01,$01                 ;; 00A60D               ;
                                                          ;;                      ;
DATA_00A611:          .db $0D,$00,$F3,$FF,$FE,$FF,$FE,$FF ;; 00A611               ;
                      .db $00,$00,$00,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00A61D:          .db $0A,$00,$00,$00,$1A,$1A,$0A,$0A ;; 00A61D               ;
DATA_00A625:          .db $00,$80,$40,$00,$01,$02,$40,$00 ;; 00A625               ;
                      .db $40,$00,$00,$00,$00,$02,$00,$00 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00A635:          LDA.W RAM_BluePowTimer              ;; 00A635 : AD AD 14    ; If blue pow... 
CODE_00A638:          ORA.W RAM_SilverPowTimer            ;; 00A638 : 0D AE 14    ; ...or silver pow... 
CODE_00A63B:          ORA.W $190C                         ;; 00A63B : 0D 0C 19    ;
CODE_00A63E:          BNE CODE_00A64A                     ;; 00A63E : D0 0A       ;
CODE_00A640:          LDA.W $1490                         ;; 00A640 : AD 90 14    ; \ Branch if Mario doesn't have star 
CODE_00A643:          BEQ CODE_00A660                     ;; 00A643 : F0 1B       ; / 
CODE_00A645:          LDA.W $0DDA                         ;; 00A645 : AD DA 0D    ;
CODE_00A648:          BPL CODE_00A64F                     ;; 00A648 : 10 05       ;
CODE_00A64A:          LDA.W $0DDA                         ;; 00A64A : AD DA 0D    ;
CODE_00A64D:          AND.B #$7F                          ;; 00A64D : 29 7F       ;
CODE_00A64F:          ORA.B #$40                          ;; 00A64F : 09 40       ;
CODE_00A651:          STA.W $0DDA                         ;; 00A651 : 8D DA 0D    ;
CODE_00A654:          STZ.W RAM_BluePowTimer              ;; 00A654 : 9C AD 14    ; Zero out POW timer 
CODE_00A657:          STZ.W RAM_SilverPowTimer            ;; 00A657 : 9C AE 14    ; Zero out silver POW timer 
CODE_00A65A:          STZ.W $190C                         ;; 00A65A : 9C 0C 19    ;
CODE_00A65D:          STZ.W $1490                         ;; 00A65D : 9C 90 14    ; Zero out star timer 
CODE_00A660:          LDA.W $13F4                         ;; 00A660 : AD F4 13    ;
CODE_00A663:          ORA.W $13F5                         ;; 00A663 : 0D F5 13    ;
CODE_00A666:          ORA.W $13F6                         ;; 00A666 : 0D F6 13    ;
CODE_00A669:          ORA.W $13F7                         ;; 00A669 : 0D F7 13    ;
CODE_00A66C:          ORA.W $13F8                         ;; 00A66C : 0D F8 13    ;
CODE_00A66F:          BEQ CODE_00A674                     ;; 00A66F : F0 03       ;
CODE_00A671:          STA.W $141B                         ;; 00A671 : 8D 1B 14    ;
CODE_00A674:          LDX.B #$23                          ;; 00A674 : A2 23       ;
CODE_00A676:          STZ $70,X                           ;; 00A676 : 74 70       ;
CODE_00A678:          DEX                                 ;; 00A678 : CA          ;
CODE_00A679:          BNE CODE_00A676                     ;; 00A679 : D0 FB       ;
CODE_00A67B:          LDX.B #$37                          ;; 00A67B : A2 37       ;
CODE_00A67D:          STZ.W $13D9,X                       ;; 00A67D : 9E D9 13    ;
CODE_00A680:          DEX                                 ;; 00A680 : CA          ;
CODE_00A681:          BNE CODE_00A67D                     ;; 00A681 : D0 FA       ;
CODE_00A683:          ASL.W $13CB                         ;; 00A683 : 0E CB 13    ;
CODE_00A686:          STZ.W RAM_KickImgTimer              ;; 00A686 : 9C 9A 14    ;
CODE_00A689:          STZ.W RAM_PickUpImgTimer            ;; 00A689 : 9C 98 14    ;
CODE_00A68C:          STZ.W $1495                         ;; 00A68C : 9C 95 14    ;
CODE_00A68F:          STZ.W RAM_YoshiInPipe               ;; 00A68F : 9C 19 14    ;
CODE_00A692:          LDY.B #$01                          ;; 00A692 : A0 01       ;
CODE_00A694:          LDX.W $1931                         ;; 00A694 : AE 31 19    ;
CODE_00A697:          CPX.B #$10                          ;; 00A697 : E0 10       ;
CODE_00A699:          BCS CODE_00A6CC                     ;; 00A699 : B0 31       ;
CODE_00A69B:          LDA.W DATA_00A625,X                 ;; 00A69B : BD 25 A6    ;
CODE_00A69E:          LSR                                 ;; 00A69E : 4A          ;
CODE_00A69F:          BEQ CODE_00A6CC                     ;; 00A69F : F0 2B       ;
CODE_00A6A1:          LDA.W $141D                         ;; 00A6A1 : AD 1D 14    ;
CODE_00A6A4:          ORA.W $141A                         ;; 00A6A4 : 0D 1A 14    ;
CODE_00A6A7:          ORA.W $141F                         ;; 00A6A7 : 0D 1F 14    ;
CODE_00A6AA:          BNE CODE_00A6CC                     ;; 00A6AA : D0 20       ;
CODE_00A6AC:          LDA.W $13CF                         ;; 00A6AC : AD CF 13    ;
CODE_00A6AF:          BEQ CODE_00A6B6                     ;; 00A6AF : F0 05       ;
CODE_00A6B1:          JSR.W CODE_00C90A                   ;; 00A6B1 : 20 0A C9    ;
CODE_00A6B4:          BRA CODE_00A6CC                     ;; 00A6B4 : 80 16       ;
                                                          ;;                      ;
CODE_00A6B6:          STZ RAM_IsFlying                    ;; 00A6B6 : 64 72       ;
CODE_00A6B8:          STY RAM_MarioDirection              ;; 00A6B8 : 84 76       ;
CODE_00A6BA:          STY $89                             ;; 00A6BA : 84 89       ;
CODE_00A6BC:          LDX.B #$0A                          ;; 00A6BC : A2 0A       ;
CODE_00A6BE:          LDY.B #$00                          ;; 00A6BE : A0 00       ;
CODE_00A6C0:          LDA.W RAM_OWHasYoshi                ;; 00A6C0 : AD C1 0D    ;
CODE_00A6C3:          BEQ CODE_00A6C7                     ;; 00A6C3 : F0 02       ;
CODE_00A6C5:          LDY.B #$0F                          ;; 00A6C5 : A0 0F       ;
CODE_00A6C7:          STX RAM_MarioAnimation              ;; 00A6C7 : 86 71       ;
CODE_00A6C9:          STY $88                             ;; 00A6C9 : 84 88       ;
Return00A6CB:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A6CC:          LDA RAM_ScreenBndryYLo              ;; 00A6CC : A5 1C       ;
CODE_00A6CE:          CMP.B #$C0                          ;; 00A6CE : C9 C0       ;
CODE_00A6D0:          BEQ CODE_00A6D5                     ;; 00A6D0 : F0 03       ;
CODE_00A6D2:          INC.W $13F1                         ;; 00A6D2 : EE F1 13    ;
CODE_00A6D5:          LDA.W $192A                         ;; 00A6D5 : AD 2A 19    ;
CODE_00A6D8:          BEQ CODE_00A6E0                     ;; 00A6D8 : F0 06       ;
CODE_00A6DA:          CMP.B #$05                          ;; 00A6DA : C9 05       ;
CODE_00A6DC:          BNE CODE_00A716                     ;; 00A6DC : D0 38       ;
CODE_00A6DE:          ROR $86                             ;; 00A6DE : 66 86       ;
CODE_00A6E0:          STY RAM_MarioDirection              ;; 00A6E0 : 84 76       ;
CODE_00A6E2:          LDA.B #$24                          ;; 00A6E2 : A9 24       ;
CODE_00A6E4:          STA RAM_IsFlying                    ;; 00A6E4 : 85 72       ;
CODE_00A6E6:          STZ RAM_SpritesLocked               ;; 00A6E6 : 64 9D       ;
CODE_00A6E8:          LDA.W $1434                         ;; 00A6E8 : AD 34 14    ;
CODE_00A6EB:          BEQ CODE_00A704                     ;; 00A6EB : F0 17       ;
ADDR_00A6ED:          LDA.W $0DDA                         ;; 00A6ED : AD DA 0D    ;
ADDR_00A6F0:          ORA.B #$7F                          ;; 00A6F0 : 09 7F       ;
ADDR_00A6F2:          STA.W $0DDA                         ;; 00A6F2 : 8D DA 0D    ;
ADDR_00A6F5:          LDA RAM_MarioXPos                   ;; 00A6F5 : A5 94       ;
ADDR_00A6F7:          ORA.B #$04                          ;; 00A6F7 : 09 04       ;
ADDR_00A6F9:          STA.W RAM_KeyHolePos1               ;; 00A6F9 : 8D 36 14    ;
ADDR_00A6FC:          LDA RAM_MarioYPos                   ;; 00A6FC : A5 96       ;
ADDR_00A6FE:          CLC                                 ;; 00A6FE : 18          ;
ADDR_00A6FF:          ADC.B #$10                          ;; 00A6FF : 69 10       ;
ADDR_00A701:          STA.W RAM_KeyHolePos2               ;; 00A701 : 8D 38 14    ;
CODE_00A704:          LDA.W $1B95                         ;; 00A704 : AD 95 1B    ;
CODE_00A707:          BEQ Return00A715                    ;; 00A707 : F0 0C       ;
CODE_00A709:          LDA.B #$08                          ;; 00A709 : A9 08       ; \ Animation = Rise off screen, 
CODE_00A70B:          STA RAM_MarioAnimation              ;; 00A70B : 85 71       ; / for Yoshi Wing bonus stage 
CODE_00A70D:          LDA.B #$A0                          ;; 00A70D : A9 A0       ;
CODE_00A70F:          STA RAM_MarioYPos                   ;; 00A70F : 85 96       ;
CODE_00A711:          LDA.B #$90                          ;; 00A711 : A9 90       ; \ Set upward speed, #$90 
CODE_00A713:          STA RAM_MarioSpeedY                 ;; 00A713 : 85 7D       ; / 
Return00A715:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A716:          CMP.B #$06                          ;; 00A716 : C9 06       ;
CODE_00A718:          BCC CODE_00A740                     ;; 00A718 : 90 26       ;
CODE_00A71A:          BNE CODE_00A734                     ;; 00A71A : D0 18       ;
CODE_00A71C:          STY RAM_MarioDirection              ;; 00A71C : 84 76       ;
CODE_00A71E:          STY.W $13DF                         ;; 00A71E : 8C DF 13    ;
CODE_00A721:          LDA.B #$FF                          ;; 00A721 : A9 FF       ;
CODE_00A723:          STA.W RAM_YoshiInPipe               ;; 00A723 : 8D 19 14    ;
CODE_00A726:          LDA.B #$08                          ;; 00A726 : A9 08       ;
CODE_00A728:          TSB RAM_MarioXPos                   ;; 00A728 : 04 94       ;
CODE_00A72A:          LDA.B #$02                          ;; 00A72A : A9 02       ;
CODE_00A72C:          TSB RAM_MarioYPos                   ;; 00A72C : 04 96       ;
CODE_00A72E:          LDX.B #$07                          ;; 00A72E : A2 07       ;
CODE_00A730:          LDY.B #$20                          ;; 00A730 : A0 20       ;
CODE_00A732:          BRA CODE_00A6C7                     ;; 00A732 : 80 93       ;
                                                          ;;                      ;
CODE_00A734:          STY RAM_IsWaterLevel                ;; 00A734 : 84 85       ;
CODE_00A736:          LDA.W $13CF                         ;; 00A736 : AD CF 13    ;
CODE_00A739:          ORA.W $1434                         ;; 00A739 : 0D 34 14    ;
CODE_00A73C:          BNE CODE_00A6E0                     ;; 00A73C : D0 A2       ;
CODE_00A73E:          LDA.B #$04                          ;; 00A73E : A9 04       ;
CODE_00A740:          CLC                                 ;; 00A740 : 18          ;
CODE_00A741:          ADC.B #$03                          ;; 00A741 : 69 03       ;
CODE_00A743:          STA $89                             ;; 00A743 : 85 89       ;
CODE_00A745:          TAY                                 ;; 00A745 : A8          ;
CODE_00A746:          LSR                                 ;; 00A746 : 4A          ;
CODE_00A747:          DEC A                               ;; 00A747 : 3A          ;
CODE_00A748:          STA.W RAM_YoshiInPipe               ;; 00A748 : 8D 19 14    ;
CODE_00A74B:          LDA.W ADDR_00A609,Y                 ;; 00A74B : B9 09 A6    ;
CODE_00A74E:          STA RAM_MarioDirection              ;; 00A74E : 85 76       ;
CODE_00A750:          LDX.B #$05                          ;; 00A750 : A2 05       ;
CODE_00A752:          CPY.B #$06                          ;; 00A752 : C0 06       ;
CODE_00A754:          BCC CODE_00A768                     ;; 00A754 : 90 12       ;
CODE_00A756:          LDA.B #$08                          ;; 00A756 : A9 08       ;
CODE_00A758:          TSB RAM_MarioXPos                   ;; 00A758 : 04 94       ;
CODE_00A75A:          LDX.B #$06                          ;; 00A75A : A2 06       ;
CODE_00A75C:          CPY.B #$07                          ;; 00A75C : C0 07       ;
CODE_00A75E:          LDY.B #$1E                          ;; 00A75E : A0 1E       ;
CODE_00A760:          BCC CODE_00A76A                     ;; 00A760 : 90 08       ;
CODE_00A762:          LDY.B #$0F                          ;; 00A762 : A0 0F       ;
CODE_00A764:          LDA RAM_MarioPowerUp                ;; 00A764 : A5 19       ;
CODE_00A766:          BEQ CODE_00A76A                     ;; 00A766 : F0 02       ;
CODE_00A768:          LDY.B #$1C                          ;; 00A768 : A0 1C       ; \ Set downward speed, #$1C 
CODE_00A76A:          STY RAM_MarioSpeedY                 ;; 00A76A : 84 7D       ; / 
CODE_00A76C:          JSR.W CODE_00A6C7                   ;; 00A76C : 20 C7 A6    ;
CODE_00A76F:          LDA.W RAM_OnYoshi                   ;; 00A76F : AD 7A 18    ;
CODE_00A772:          BEQ Return00A795                    ;; 00A772 : F0 21       ;
CODE_00A774:          LDX $89                             ;; 00A774 : A6 89       ;
CODE_00A776:          LDA $88                             ;; 00A776 : A5 88       ;
CODE_00A778:          CLC                                 ;; 00A778 : 18          ;
CODE_00A779:          ADC.W DATA_00A61D,X                 ;; 00A779 : 7D 1D A6    ;
CODE_00A77C:          STA $88                             ;; 00A77C : 85 88       ;
CODE_00A77E:          TXA                                 ;; 00A77E : 8A          ;
CODE_00A77F:          ASL                                 ;; 00A77F : 0A          ;
CODE_00A780:          TAX                                 ;; 00A780 : AA          ;
CODE_00A781:          REP #$20                            ;; 00A781 : C2 20       ; Accum (16 bit) 
CODE_00A783:          LDA RAM_MarioXPos                   ;; 00A783 : A5 94       ;
CODE_00A785:          CLC                                 ;; 00A785 : 18          ;
CODE_00A786:          ADC.W ADDR_00A609,X                 ;; 00A786 : 7D 09 A6    ;
CODE_00A789:          STA RAM_MarioXPos                   ;; 00A789 : 85 94       ;
CODE_00A78B:          LDA RAM_MarioYPos                   ;; 00A78B : A5 96       ;
CODE_00A78D:          CLC                                 ;; 00A78D : 18          ;
CODE_00A78E:          ADC.W DATA_00A611,X                 ;; 00A78E : 7D 11 A6    ;
CODE_00A791:          STA RAM_MarioYPos                   ;; 00A791 : 85 96       ;
CODE_00A793:          SEP #$20                            ;; 00A793 : E2 20       ; Accum (8 bit) 
Return00A795:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A796:          REP #$20                            ;; 00A796 : C2 20       ; Accum (16 bit) 
CODE_00A798:          LDY.W $1414                         ;; 00A798 : AC 14 14    ;
CODE_00A79B:          BEQ CODE_00A7B9                     ;; 00A79B : F0 1C       ;
CODE_00A79D:          DEY                                 ;; 00A79D : 88          ;
CODE_00A79E:          BNE CODE_00A7A7                     ;; 00A79E : D0 07       ;
CODE_00A7A0:          LDA $20                             ;; 00A7A0 : A5 20       ;
CODE_00A7A2:          SEC                                 ;; 00A7A2 : 38          ;
CODE_00A7A3:          SBC RAM_ScreenBndryYLo              ;; 00A7A3 : E5 1C       ;
CODE_00A7A5:          BRA CODE_00A7B6                     ;; 00A7A5 : 80 0F       ;
                                                          ;;                      ;
CODE_00A7A7:          LDA RAM_ScreenBndryYLo              ;; 00A7A7 : A5 1C       ;
CODE_00A7A9:          LSR                                 ;; 00A7A9 : 4A          ;
CODE_00A7AA:          DEY                                 ;; 00A7AA : 88          ;
CODE_00A7AB:          BEQ CODE_00A7AF                     ;; 00A7AB : F0 02       ;
CODE_00A7AD:          LSR                                 ;; 00A7AD : 4A          ;
CODE_00A7AE:          LSR                                 ;; 00A7AE : 4A          ;
CODE_00A7AF:          EOR.W #$FFFF                        ;; 00A7AF : 49 FF FF    ;
CODE_00A7B2:          INC A                               ;; 00A7B2 : 1A          ;
CODE_00A7B3:          CLC                                 ;; 00A7B3 : 18          ;
CODE_00A7B4:          ADC $20                             ;; 00A7B4 : 65 20       ;
CODE_00A7B6:          STA.W $1417                         ;; 00A7B6 : 8D 17 14    ;
CODE_00A7B9:          LDA.W #$0080                        ;; 00A7B9 : A9 80 00    ;
CODE_00A7BC:          STA.W $142A                         ;; 00A7BC : 8D 2A 14    ;
CODE_00A7BF:          SEP #$20                            ;; 00A7BF : E2 20       ; Accum (8 bit) 
Return00A7C1:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A7C2:          REP #$20                            ;; 00A7C2 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_00A7C4:          LDX.B #$80                          ;; 00A7C4 : A2 80       ;
CODE_00A7C6:          STX.W $2115                         ;; 00A7C6 : 8E 15 21    ; VRAM Address Increment Value
CODE_00A7C9:          LDA.W #$6000                        ;; 00A7C9 : A9 00 60    ;
CODE_00A7CC:          STA.W $2116                         ;; 00A7CC : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A7CF:          LDA.W #$1801                        ;; 00A7CF : A9 01 18    ;
CODE_00A7D2:          STA.W $4320                         ;; 00A7D2 : 8D 20 43    ; Parameters for DMA Transfer
CODE_00A7D5:          LDA.W #$977B                        ;; 00A7D5 : A9 7B 97    ;
CODE_00A7D8:          STA.W $4322                         ;; 00A7D8 : 8D 22 43    ; A Address (Low Byte)
CODE_00A7DB:          LDX.B #$7F                          ;; 00A7DB : A2 7F       ;
CODE_00A7DD:          STX.W $4324                         ;; 00A7DD : 8E 24 43    ; A Address Bank
CODE_00A7E0:          LDA.W #$00C0                        ;; 00A7E0 : A9 C0 00    ;
CODE_00A7E3:          STA.W $4325                         ;; 00A7E3 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A7E6:          LDX.B #$04                          ;; 00A7E6 : A2 04       ;
CODE_00A7E8:          STX.W $420B                         ;; 00A7E8 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A7EB:          LDA.W #$6100                        ;; 00A7EB : A9 00 61    ;
CODE_00A7EE:          STA.W $2116                         ;; 00A7EE : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A7F1:          LDA.W #$983B                        ;; 00A7F1 : A9 3B 98    ;
CODE_00A7F4:          STA.W $4322                         ;; 00A7F4 : 8D 22 43    ; A Address (Low Byte)
CODE_00A7F7:          LDA.W #$00C0                        ;; 00A7F7 : A9 C0 00    ;
CODE_00A7FA:          STA.W $4325                         ;; 00A7FA : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A7FD:          STX.W $420B                         ;; 00A7FD : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A800:          LDA.W #$64A0                        ;; 00A800 : A9 A0 64    ;
CODE_00A803:          STA.W $2116                         ;; 00A803 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A806:          LDA.W #$98FB                        ;; 00A806 : A9 FB 98    ;
CODE_00A809:          STA.W $4322                         ;; 00A809 : 8D 22 43    ; A Address (Low Byte)
CODE_00A80C:          LDA.W #$00C0                        ;; 00A80C : A9 C0 00    ;
CODE_00A80F:          STA.W $4325                         ;; 00A80F : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A812:          STX.W $420B                         ;; 00A812 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A815:          LDA.W #$65A0                        ;; 00A815 : A9 A0 65    ;
CODE_00A818:          STA.W $2116                         ;; 00A818 : 8D 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00A81B:          LDA.W #$99BB                        ;; 00A81B : A9 BB 99    ;
CODE_00A81E:          STA.W $4322                         ;; 00A81E : 8D 22 43    ; A Address (Low Byte)
CODE_00A821:          LDA.W #$00C0                        ;; 00A821 : A9 C0 00    ;
CODE_00A824:          STA.W $4325                         ;; 00A824 : 8D 25 43    ; Number Bytes to Transfer (Low Byte) (DMA)
CODE_00A827:          STX.W $420B                         ;; 00A827 : 8E 0B 42    ; Regular DMA Channel Enable
CODE_00A82A:          SEP #$20                            ;; 00A82A : E2 20       ; 8 bit A ; Accum (8 bit) 
Return00A82C:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
CODE_00A82D:          LDY.B #$0F                          ;; 00A82D : A0 0F       ;
CODE_00A82F:          JSL.L CODE_00BA28                   ;; 00A82F : 22 28 BA 00 ;
CODE_00A833:          LDA.W $1425                         ;; 00A833 : AD 25 14    ;
CODE_00A836:          REP #$30                            ;; 00A836 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00A838:          BEQ CODE_00A842                     ;; 00A838 : F0 08       ;
CODE_00A83A:          LDA $00                             ;; 00A83A : A5 00       ;
CODE_00A83C:          CLC                                 ;; 00A83C : 18          ;
CODE_00A83D:          ADC.W #$0030                        ;; 00A83D : 69 30 00    ;
CODE_00A840:          STA $00                             ;; 00A840 : 85 00       ;
CODE_00A842:          LDX.W #$0000                        ;; 00A842 : A2 00 00    ;
CODE_00A845:          LDY.W #$0008                        ;; 00A845 : A0 08 00    ;
CODE_00A848:          LDA [$00]                           ;; 00A848 : A7 00       ;
CODE_00A84A:          STA.L $7F977B,X                     ;; 00A84A : 9F 7B 97 7F ;
CODE_00A84E:          INX                                 ;; 00A84E : E8          ;
CODE_00A84F:          INX                                 ;; 00A84F : E8          ;
CODE_00A850:          INC $00                             ;; 00A850 : E6 00       ;
CODE_00A852:          INC $00                             ;; 00A852 : E6 00       ;
CODE_00A854:          DEY                                 ;; 00A854 : 88          ;
CODE_00A855:          BNE CODE_00A848                     ;; 00A855 : D0 F1       ;
CODE_00A857:          LDY.W #$0008                        ;; 00A857 : A0 08 00    ;
CODE_00A85A:          LDA [$00]                           ;; 00A85A : A7 00       ;
CODE_00A85C:          AND.W #$00FF                        ;; 00A85C : 29 FF 00    ;
CODE_00A85F:          STA.L $7F977B,X                     ;; 00A85F : 9F 7B 97 7F ;
CODE_00A863:          INX                                 ;; 00A863 : E8          ;
CODE_00A864:          INX                                 ;; 00A864 : E8          ;
CODE_00A865:          INC $00                             ;; 00A865 : E6 00       ;
CODE_00A867:          DEY                                 ;; 00A867 : 88          ;
CODE_00A868:          BNE CODE_00A85A                     ;; 00A868 : D0 F0       ;
CODE_00A86A:          CPX.W #$0300                        ;; 00A86A : E0 00 03    ;
CODE_00A86D:          BCC CODE_00A845                     ;; 00A86D : 90 D6       ;
CODE_00A86F:          SEP #$30                            ;; 00A86F : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00A871:          LDY.B #$00                          ;; 00A871 : A0 00       ;
CODE_00A873:          JSL.L CODE_00BA28                   ;; 00A873 : 22 28 BA 00 ;
CODE_00A877:          REP #$30                            ;; 00A877 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00A879:          LDA.W #$B3F0                        ;; 00A879 : A9 F0 B3    ;
CODE_00A87C:          STA $00                             ;; 00A87C : 85 00       ;
CODE_00A87E:          LDA.W #$7EB3                        ;; 00A87E : A9 B3 7E    ;
CODE_00A881:          STA $01                             ;; 00A881 : 85 01       ;
CODE_00A883:          LDX.W #$0000                        ;; 00A883 : A2 00 00    ;
CODE_00A886:          LDY.W #$0008                        ;; 00A886 : A0 08 00    ;
CODE_00A889:          LDA [$00]                           ;; 00A889 : A7 00       ;
CODE_00A88B:          STA.W $0BF6,X                       ;; 00A88B : 9D F6 0B    ;
CODE_00A88E:          INX                                 ;; 00A88E : E8          ;
CODE_00A88F:          INX                                 ;; 00A88F : E8          ;
CODE_00A890:          INC $00                             ;; 00A890 : E6 00       ;
CODE_00A892:          INC $00                             ;; 00A892 : E6 00       ;
CODE_00A894:          DEY                                 ;; 00A894 : 88          ;
CODE_00A895:          BNE CODE_00A889                     ;; 00A895 : D0 F2       ;
CODE_00A897:          LDY.W #$0008                        ;; 00A897 : A0 08 00    ;
CODE_00A89A:          LDA [$00]                           ;; 00A89A : A7 00       ;
CODE_00A89C:          AND.W #$00FF                        ;; 00A89C : 29 FF 00    ;
CODE_00A89F:          STA.W $0BF6,X                       ;; 00A89F : 9D F6 0B    ;
CODE_00A8A2:          INX                                 ;; 00A8A2 : E8          ;
CODE_00A8A3:          INX                                 ;; 00A8A3 : E8          ;
CODE_00A8A4:          INC $00                             ;; 00A8A4 : E6 00       ;
CODE_00A8A6:          DEY                                 ;; 00A8A6 : 88          ;
CODE_00A8A7:          BNE CODE_00A89A                     ;; 00A8A7 : D0 F1       ;
CODE_00A8A9:          CPX.W #$00C0                        ;; 00A8A9 : E0 C0 00    ;
CODE_00A8AC:          BNE CODE_00A8B3                     ;; 00A8AC : D0 05       ;
CODE_00A8AE:          LDA.W #$B570                        ;; 00A8AE : A9 70 B5    ;
CODE_00A8B1:          STA $00                             ;; 00A8B1 : 85 00       ;
CODE_00A8B3:          CPX.W #$0180                        ;; 00A8B3 : E0 80 01    ;
CODE_00A8B6:          BCC CODE_00A886                     ;; 00A8B6 : 90 CE       ;
CODE_00A8B8:          SEP #$30                            ;; 00A8B8 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00A8BA:          LDA.B #$01                          ;; 00A8BA : A9 01       ;
CODE_00A8BC:          STA.W $143A                         ;; 00A8BC : 8D 3A 14    ;
CODE_00A8BF:          STA.W $1935                         ;; 00A8BF : 8D 35 19    ;
Return00A8C2:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
SPRITEGFXLIST:        .db $00,$01,$13,$02,$00,$01,$12,$03 ;; ?QPWZ?               ; Forest ; Castle 
                      .db $00,$01,$13,$05,$00,$01,$13,$04 ;; ?QPWZ?               ; Mushroom ; Underground 
                      .db $00,$01,$13,$06,$00,$01,$13,$09 ;; ?QPWZ?               ; Water ; Pokey 
                      .db $00,$01,$13,$04,$00,$01,$06,$11 ;; ?QPWZ?               ; Underground 2 ; Ghost House 
                      .db $00,$01,$13,$20,$00,$01,$13,$0F ;; ?QPWZ?               ; Banzai Bill ; Yoshi's House 
                      .db $00,$01,$13,$23,$00,$01,$0D,$14 ;; ?QPWZ?               ; Dino-Rhino ; Switch Palace 
                      .db $00,$01,$24,$0E,$00,$01,$0A,$22 ;; ?QPWZ?               ; Mechakoopa ; Wendy/Lemmy 
                      .db $00,$01,$13,$0E,$00,$01,$13,$14 ;; ?QPWZ?               ; Ninji ; Unused 
                      .db $00,$00,$00,$08,$10,$0F,$1C,$1D ;; ?QPWZ?               ;
                      .db $00,$01,$24,$22,$00,$01,$25,$22 ;; ?QPWZ?               ;
                      .db $00,$22,$13,$2D,$00,$01,$0F,$22 ;; ?QPWZ?               ;
                      .db $00,$26,$2E,$22,$21,$0B,$25,$0A ;; ?QPWZ?               ;
                      .db $00,$0D,$24,$22,$2C,$30,$2D,$0E ;; ?QPWZ?               ;
OBJECTGFXLIST:        .db $14,$17,$19,$15,$14,$17,$1B,$18 ;; ?QPWZ?               ; Normal 1 ; Castle 1 
                      .db $14,$17,$1B,$16,$14,$17,$0C,$1A ;; ?QPWZ?               ; Rope 1 ; Underground 1 
                      .db $14,$17,$1B,$08,$14,$17,$0C,$07 ;; ?QPWZ?               ; Switch Palace 1 ; Ghost House 1 
                      .db $14,$17,$0C,$16,$14,$17,$1B,$15 ;; ?QPWZ?               ; Rope 2 ; Normal 2 
                      .db $14,$17,$19,$16,$14,$17,$0D,$1A ;; ?QPWZ?               ; Rope 3 ; Underground 2 
                      .db $14,$17,$1B,$08,$14,$17,$1B,$18 ;; ?QPWZ?               ; Switch Palace 2 ; Castle 2 
                      .db $14,$17,$19,$1F,$14,$17,$0D,$07 ;; ?QPWZ?               ; Cloud/Forest ; Ghost House 2 
                      .db $14,$17,$19,$1A,$14,$17,$14,$14 ;; ?QPWZ?               ; Underground 2 
                      .db $0E,$0F,$17,$17,$1C,$1D,$08,$1E ;; ?QPWZ?               ;
                      .db $1C,$1D,$08,$1E,$1C,$1D,$08,$1E ;; ?QPWZ?               ;
                      .db $1C,$1D,$08,$1E,$1C,$1D,$08,$1E ;; ?QPWZ?               ;
                      .db $1C,$1D,$08,$1E,$1C,$1D,$08,$1E ;; ?QPWZ?               ;
                      .db $14,$17,$19,$2C,$19,$17,$1B,$18 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00A993:          STZ.W $2116                         ;; 00A993 : 9C 16 21    ; \  ; Address for VRAM Read/Write (Low Byte)
CODE_00A996:          LDA.B #$40                          ;; 00A996 : A9 40       ;  |Set "Address for VRAM Read/Write" to x4000 
CODE_00A998:          STA.W $2117                         ;; 00A998 : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_00A99B:          LDA.B #$03                          ;; 00A99B : A9 03       ;
CODE_00A99D:          STA $0F                             ;; 00A99D : 85 0F       ;
CODE_00A99F:          LDA.B #$28                          ;; 00A99F : A9 28       ;
CODE_00A9A1:          STA $0E                             ;; 00A9A1 : 85 0E       ;
CODE_00A9A3:          LDA $0E                             ;; 00A9A3 : A5 0E       ;
CODE_00A9A5:          TAY                                 ;; 00A9A5 : A8          ;
CODE_00A9A6:          JSL.L CODE_00BA28                   ;; 00A9A6 : 22 28 BA 00 ;
CODE_00A9AA:          REP #$30                            ;; 00A9AA : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00A9AC:          LDX.W #$03FF                        ;; 00A9AC : A2 FF 03    ;
CODE_00A9AF:          LDY.W #$0000                        ;; 00A9AF : A0 00 00    ;
CODE_00A9B2:          LDA [$00],Y                         ;; 00A9B2 : B7 00       ;
CODE_00A9B4:          STA.W $2118                         ;; 00A9B4 : 8D 18 21    ; Data for VRAM Write (Low Byte)
CODE_00A9B7:          INY                                 ;; 00A9B7 : C8          ;
CODE_00A9B8:          INY                                 ;; 00A9B8 : C8          ;
CODE_00A9B9:          DEX                                 ;; 00A9B9 : CA          ;
CODE_00A9BA:          BPL CODE_00A9B2                     ;; 00A9BA : 10 F6       ;
CODE_00A9BC:          SEP #$30                            ;; 00A9BC : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00A9BE:          INC $0E                             ;; 00A9BE : E6 0E       ;
CODE_00A9C0:          DEC $0F                             ;; 00A9C0 : C6 0F       ;
CODE_00A9C2:          BPL CODE_00A9A3                     ;; 00A9C2 : 10 DF       ;
CODE_00A9C4:          STZ.W $2116                         ;; 00A9C4 : 9C 16 21    ; \  ; Address for VRAM Read/Write (Low Byte)
CODE_00A9C7:          LDA.B #$60                          ;; 00A9C7 : A9 60       ;  |Set "Address for VRAM Read/Write" to x6000 
CODE_00A9C9:          STA.W $2117                         ;; 00A9C9 : 8D 17 21    ; /  ; Address for VRAM Read/Write (High Byte)
CODE_00A9CC:          LDY.B #$00                          ;; 00A9CC : A0 00       ;
CODE_00A9CE:          JSR.W UploadGFXFile                 ;; 00A9CE : 20 6B AA    ;
Return00A9D1:         RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00A9D2:          .db $78,$70,$68,$60                 ;; 00A9D2               ;
                                                          ;;                      ;
DATA_00A9D6:          .db $18,$10,$08,$00                 ;; 00A9D6               ;
                                                          ;;                      ;
UploadSpriteGFX:      LDA.B #$80                          ;; ?QPWZ? : A9 80       ; Decompression as well? 
CODE_00A9DC:          STA.W $2115                         ;; 00A9DC : 8D 15 21    ; VRAM transfer control port ; VRAM Address Increment Value
CODE_00A9DF:          LDX.B #$03                          ;; 00A9DF : A2 03       ;
CODE_00A9E1:          LDA.W $192B                         ;; 00A9E1 : AD 2B 19    ; $192B = current sprite GFX list index 
CODE_00A9E4:          ASL                                 ;; 00A9E4 : 0A          ; \ 
CODE_00A9E5:          ASL                                 ;; 00A9E5 : 0A          ;  }4A -> Y 
CODE_00A9E6:          TAY                                 ;; 00A9E6 : A8          ; / 
CODE_00A9E7:          LDA.W SPRITEGFXLIST,Y               ;; 00A9E7 : B9 C3 A8    ;  | 
CODE_00A9EA:          STA $04,X                           ;; 00A9EA : 95 04       ;  | 
CODE_00A9EC:          INY                                 ;; 00A9EC : C8          ;  | 
CODE_00A9ED:          DEX                                 ;; 00A9ED : CA          ;  | 
CODE_00A9EE:          BPL CODE_00A9E7                     ;; 00A9EE : 10 F7       ; / 
CODE_00A9F0:          LDA.B #$03                          ;; 00A9F0 : A9 03       ; #$03 -> A -> $0F 
CODE_00A9F2:          STA $0F                             ;; 00A9F2 : 85 0F       ;
GFXTransferLoop:      LDX $0F                             ;; ?QPWZ? : A6 0F       ; $0F -> X 
CODE_00A9F6:          STZ.W $2116                         ;; 00A9F6 : 9C 16 21    ; #$00 -> $2116 ; Address for VRAM Read/Write (Low Byte)
CODE_00A9F9:          LDA.W DATA_00A9D2,X                 ;; 00A9F9 : BD D2 A9    ; My guess: Locations in VRAM to upload GFX to 
CODE_00A9FC:          STA.W $2117                         ;; 00A9FC : 8D 17 21    ; Set VRAM address to $??00 ; Address for VRAM Read/Write (High Byte)
CODE_00A9FF:          LDY $04,X                           ;; 00A9FF : B4 04       ; Y is possibly which GFX file 
CODE_00AA01:          LDA.W $0101,X                       ;; 00AA01 : BD 01 01    ; to upload to a section in VRAM, used in 
CODE_00AA04:          CMP $04,X                           ;; 00AA04 : D5 04       ; the subroutine $00:BA28 
CODE_00AA06:          BEQ Don'tUploadSpr                  ;; 00AA06 : F0 03       ; don't upload when it''s not needed 
CODE_00AA08:          JSR.W UploadGFXFile                 ;; 00AA08 : 20 6B AA    ; JSR to a JSL... 
Don'tUploadSpr:       DEC $0F                             ;; ?QPWZ? : C6 0F       ; Decrement $0F 
CODE_00AA0D:          BPL GFXTransferLoop                 ;; 00AA0D : 10 E5       ; if >= #$00, continue transfer 
CODE_00AA0F:          LDX.B #$03                          ;; 00AA0F : A2 03       ; \ 
UpdtCrrntSpritGFX:    LDA $04,X                           ;; ?QPWZ? : B5 04       ;  |Update $0101-$0104 to reflect the new sprite GFX 
CODE_00AA13:          STA.W $0101,X                       ;; 00AA13 : 9D 01 01    ;  |That's loaded now. 
CODE_00AA16:          DEX                                 ;; 00AA16 : CA          ;  | 
CODE_00AA17:          BPL UpdtCrrntSpritGFX               ;; 00AA17 : 10 F8       ; / 
CODE_00AA19:          LDA.W $1931                         ;; 00AA19 : AD 31 19    ; LDA Tileset 
CODE_00AA1C:          CMP.B #$FE                          ;; 00AA1C : C9 FE       ;
CODE_00AA1E:          BCS SetallFGBG80                    ;; 00AA1E : B0 3B       ; Branch to a routine that uploads file #$80 to every slot in FG/BG 
CODE_00AA20:          LDX.B #$03                          ;; 00AA20 : A2 03       ;
CODE_00AA22:          LDA.W $1931                         ;; 00AA22 : AD 31 19    ; this routine is pretty close to the above 
CODE_00AA25:          ASL                                 ;; 00AA25 : 0A          ; one, I'm guessing this does 
CODE_00AA26:          ASL                                 ;; 00AA26 : 0A          ; object/BG GFX. 
CODE_00AA27:          TAY                                 ;; 00AA27 : A8          ; 4A -> Y 
PrepLoadFGBG:         LDA.W OBJECTGFXLIST,Y               ;; ?QPWZ? : B9 2B A9    ; FG/BG GFX table 
CODE_00AA2B:          STA $04,X                           ;; 00AA2B : 95 04       ;
CODE_00AA2D:          INY                                 ;; 00AA2D : C8          ;
CODE_00AA2E:          DEX                                 ;; 00AA2E : CA          ;
CODE_00AA2F:          BPL PrepLoadFGBG                    ;; 00AA2F : 10 F7       ; FG/Bg to upload -> $04 - $07 
CODE_00AA31:          LDA.B #$03                          ;; 00AA31 : A9 03       ;
CODE_00AA33:          STA $0F                             ;; 00AA33 : 85 0F       ; #$03 -> $0F 
CODE_00AA35:          LDX $0F                             ;; 00AA35 : A6 0F       ; $0F -> X 
CODE_00AA37:          STZ.W $2116                         ;; 00AA37 : 9C 16 21    ; Address for VRAM Read/Write (Low Byte)
CODE_00AA3A:          LDA.W DATA_00A9D6,X                 ;; 00AA3A : BD D6 A9    ; Load + Store VRAM upload positions 
CODE_00AA3D:          STA.W $2117                         ;; 00AA3D : 8D 17 21    ; Address for VRAM Read/Write (High Byte)
CODE_00AA40:          LDY $04,X                           ;; 00AA40 : B4 04       ;
CODE_00AA42:          LDA.W $0105,X                       ;; 00AA42 : BD 05 01    ; Check to see if the file to be uploaded already 
CODE_00AA45:          CMP $04,X                           ;; 00AA45 : D5 04       ; exists in the slot in VRAM - if so, 
CODE_00AA47:          BEQ NoUploadFGBG                    ;; 00AA47 : F0 03       ; don't bother uploading it again. 
CODE_00AA49:          JSR.W UploadGFXFile                 ;; 00AA49 : 20 6B AA    ; Upload the GFX file 
NoUploadFGBG:         DEC $0F                             ;; ?QPWZ? : C6 0F       ; Next GFX file 
CODE_00AA4E:          BPL CODE_00AA35                     ;; 00AA4E : 10 E5       ;
CODE_00AA50:          LDX.B #$03                          ;; 00AA50 : A2 03       ;
UpdateCurrentFGBG:    LDA $04,X                           ;; ?QPWZ? : B5 04       ;
CODE_00AA54:          STA.W $0105,X                       ;; 00AA54 : 9D 05 01    ;
CODE_00AA57:          DEX                                 ;; 00AA57 : CA          ;
CODE_00AA58:          BPL UpdateCurrentFGBG               ;; 00AA58 : 10 F8       ;
Return00AA5A:         RTS                                 ;; ?QPWZ? : 60          ; Return from uploading the GFX 
                                                          ;;                      ;
SetallFGBG80:         BEQ NoUpdateVRAM80                  ;; ?QPWZ? : F0 03       ; If zero flag set, don't update the tileset 
CODE_00AA5D:          JSR.W CODE_00AB42                   ;; 00AA5D : 20 42 AB    ;
NoUpdateVRAM80:       LDX.B #$03                          ;; ?QPWZ? : A2 03       ;
CODE_00AA62:          LDA.B #$80                          ;; 00AA62 : A9 80       ; my guess is that it gets called in the same set of routines 
Store80:              STA.W $0105,X                       ;; ?QPWZ? : 9D 05 01    ;
CODE_00AA67:          DEX                                 ;; 00AA67 : CA          ;
CODE_00AA68:          BPL Store80                         ;; 00AA68 : 10 FA       ;
Return00AA6A:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
UploadGFXFile:        JSL.L CODE_00BA28                   ;; ?QPWZ? : 22 28 BA 00 ;
CODE_00AA6F:          CPY.B #$01                          ;; 00AA6F : C0 01       ;
CODE_00AA71:          BNE SkipSpecial                     ;; 00AA71 : D0 0D       ;
CODE_00AA73:          LDA.W $1EEB                         ;; 00AA73 : AD EB 1E    ;
CODE_00AA76:          BPL SkipSpecial                     ;; 00AA76 : 10 08       ; handle the post-special world graphics and koopa color swap. 
CODE_00AA78:          LDY.B #$31                          ;; 00AA78 : A0 31       ;
CODE_00AA7A:          JSL.L CODE_00BA28                   ;; 00AA7A : 22 28 BA 00 ;
CODE_00AA7E:          LDY.B #$01                          ;; 00AA7E : A0 01       ;
SkipSpecial:          REP #$20                            ;; ?QPWZ? : C2 20       ; A = 16bit ; Accum (16 bit) 
CODE_00AA82:          LDA.W #$0000                        ;; 00AA82 : A9 00 00    ;
CODE_00AA85:          LDX.W $1931                         ;; 00AA85 : AE 31 19    ; LDX Tileset 
CODE_00AA88:          CPX.B #$11                          ;; 00AA88 : E0 11       ; CPX #$11 
CODE_00AA8A:          BCC CODE_00AA90                     ;; 00AA8A : 90 04       ; If Tileset < #$11 skip to lower area 
CODE_00AA8C:          CPY.B #$08                          ;; 00AA8C : C0 08       ; if Y = #$08 skip to JSR 
CODE_00AA8E:          BEQ JumpTo_____                     ;; 00AA8E : F0 06       ;
CODE_00AA90:          CPY.B #$1E                          ;; 00AA90 : C0 1E       ; If Y = #$1E then 
CODE_00AA92:          BEQ JumpTo_____                     ;; 00AA92 : F0 02       ; JMP otherwise 
CODE_00AA94:          BNE CODE_00AA99                     ;; 00AA94 : D0 03       ; don't JMP 
JumpTo_____:          JMP.W FilterSomeRAM                 ;;   ____ : 4C 02 AB    ;
                                                          ;;                      ;
CODE_00AA99:          STA $0A                             ;; 00AA99 : 85 0A       ;
CODE_00AA9B:          LDA.W #$FFFF                        ;; 00AA9B : A9 FF FF    ;
CODE_00AA9E:          CPY.B #$01                          ;; 00AA9E : C0 01       ;
CODE_00AAA0:          BEQ CODE_00AAA9                     ;; 00AAA0 : F0 07       ;
CODE_00AAA2:          CPY.B #$17                          ;; 00AAA2 : C0 17       ;
CODE_00AAA4:          BEQ CODE_00AAA9                     ;; 00AAA4 : F0 03       ;
CODE_00AAA6:          LDA.W #$0000                        ;; 00AAA6 : A9 00 00    ;
CODE_00AAA9:          STA.W $1BBC                         ;; 00AAA9 : 8D BC 1B    ;
CODE_00AAAC:          LDY.B #$7F                          ;; 00AAAC : A0 7F       ;
CODE_00AAAE:          LDA.W $1BBC                         ;; 00AAAE : AD BC 1B    ;
CODE_00AAB1:          BEQ CODE_00AACD                     ;; 00AAB1 : F0 1A       ;
CODE_00AAB3:          CPY.B #$7E                          ;; 00AAB3 : C0 7E       ;
CODE_00AAB5:          BCC CODE_00AABE                     ;; 00AAB5 : 90 07       ;
CODE_00AAB7:          LDA.W #$FF00                        ;; 00AAB7 : A9 00 FF    ;
CODE_00AABA:          STA $0A                             ;; 00AABA : 85 0A       ;
CODE_00AABC:          BNE CODE_00AACD                     ;; 00AABC : D0 0F       ;
CODE_00AABE:          CPY.B #$6E                          ;; 00AABE : C0 6E       ;
CODE_00AAC0:          BCC CODE_00AAC8                     ;; 00AAC0 : 90 06       ;
CODE_00AAC2:          CPY.B #$70                          ;; 00AAC2 : C0 70       ;
CODE_00AAC4:          BCS CODE_00AAC8                     ;; 00AAC4 : B0 02       ;
CODE_00AAC6:          BCC CODE_00AAB7                     ;; 00AAC6 : 90 EF       ;
CODE_00AAC8:          LDA.W #$0000                        ;; 00AAC8 : A9 00 00    ;
CODE_00AACB:          STA $0A                             ;; 00AACB : 85 0A       ;
CODE_00AACD:          LDX.B #$07                          ;; 00AACD : A2 07       ;
CODE_00AACF:          LDA [$00]                           ;; 00AACF : A7 00       ;
CODE_00AAD1:          STA.W $2118                         ;; 00AAD1 : 8D 18 21    ; Data for VRAM Write (Low Byte)
CODE_00AAD4:          XBA                                 ;; 00AAD4 : EB          ;
CODE_00AAD5:          ORA [$00]                           ;; 00AAD5 : 07 00       ;
CODE_00AAD7:          STA.W $1BB2,X                       ;; 00AAD7 : 9D B2 1B    ;
CODE_00AADA:          INC $00                             ;; 00AADA : E6 00       ;
CODE_00AADC:          INC $00                             ;; 00AADC : E6 00       ;
CODE_00AADE:          DEX                                 ;; 00AADE : CA          ;
CODE_00AADF:          BPL CODE_00AACF                     ;; 00AADF : 10 EE       ;
CODE_00AAE1:          LDX.B #$07                          ;; 00AAE1 : A2 07       ;
CODE_00AAE3:          LDA [$00]                           ;; 00AAE3 : A7 00       ;
CODE_00AAE5:          AND.W #$00FF                        ;; 00AAE5 : 29 FF 00    ;
CODE_00AAE8:          STA $0C                             ;; 00AAE8 : 85 0C       ;
CODE_00AAEA:          LDA [$00]                           ;; 00AAEA : A7 00       ;
CODE_00AAEC:          XBA                                 ;; 00AAEC : EB          ;
CODE_00AAED:          ORA.W $1BB2,X                       ;; 00AAED : 1D B2 1B    ;
CODE_00AAF0:          AND $0A                             ;; 00AAF0 : 25 0A       ;
CODE_00AAF2:          ORA $0C                             ;; 00AAF2 : 05 0C       ;
CODE_00AAF4:          STA.W $2118                         ;; 00AAF4 : 8D 18 21    ; Data for VRAM Write (Low Byte)
CODE_00AAF7:          INC $00                             ;; 00AAF7 : E6 00       ;
CODE_00AAF9:          DEX                                 ;; 00AAF9 : CA          ;
CODE_00AAFA:          BPL CODE_00AAE3                     ;; 00AAFA : 10 E7       ;
CODE_00AAFC:          DEY                                 ;; 00AAFC : 88          ;
CODE_00AAFD:          BPL CODE_00AAAE                     ;; 00AAFD : 10 AF       ;
CODE_00AAFF:          SEP #$20                            ;; 00AAFF : E2 20       ; Accum (8 bit) 
Return00AB01:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
FilterSomeRAM:        LDA.W #$FF00                        ;; ?QPWZ? : A9 00 FF    ; Accum (16 bit) 
CODE_00AB05:          STA $0A                             ;; 00AB05 : 85 0A       ;
CODE_00AB07:          LDY.B #$7F                          ;; 00AB07 : A0 7F       ;
Upload????ToVRAM:     CPY.B #$08                          ;; ?QPWZ? : C0 08       ; \Completely pointless code. 
CODE_00AB0B:          BCS CODE_00AB0D                     ;; 00AB0B : B0 00       ; /(Why not just NOPing it out, Nintendo?) 
CODE_00AB0D:          LDX.B #$07                          ;; 00AB0D : A2 07       ;
AddressWrite1:        LDA [$00]                           ;; ?QPWZ? : A7 00       ; \ Okay, so take [$00], store 
CODE_00AB11:          STA.W $2118                         ;; 00AB11 : 8D 18 21    ;  |it to VRAM, then bitwise ; Data for VRAM Write (Low Byte)
CODE_00AB14:          XBA                                 ;; 00AB14 : EB          ;  |OR the high and low bytes together 
CODE_00AB15:          ORA [$00]                           ;; 00AB15 : 07 00       ;  |store in both bytes of A 
CODE_00AB17:          STA.W $1BB2,X                       ;; 00AB17 : 9D B2 1B    ; /and store to $1BB2,x 
CODE_00AB1A:          INC $00                             ;; 00AB1A : E6 00       ; \Increment $7E:0000 by 2 
CODE_00AB1C:          INC $00                             ;; 00AB1C : E6 00       ; / 
CODE_00AB1E:          DEX                                 ;; 00AB1E : CA          ; \And continue on another 7 times (or 8 times total) 
CODE_00AB1F:          BPL AddressWrite1                   ;; 00AB1F : 10 EE       ; / 
CODE_00AB21:          LDX.B #$07                          ;; 00AB21 : A2 07       ; hm..  It's like a FOR Y{FOR X{ } } thing ...yeah... 
AddressWrite2:        LDA [$00]                           ;; ?QPWZ? : A7 00       ;
CODE_00AB25:          AND.W #$00FF                        ;; 00AB25 : 29 FF 00    ; A normal byte becomes 2 anti-compressed bytes. 
CODE_00AB28:          STA $0C                             ;; 00AB28 : 85 0C       ; I'm going up, to try and find out what's supposed to set $00-$02 for this routine. 
CODE_00AB2A:          LDA [$00]                           ;; 00AB2A : A7 00       ; AHA, check $00/BA28.  It writes a RAM address to $00-$02, $7EAD00 
CODE_00AB2C:          XBA                                 ;; 00AB2C : EB          ; So...  Now to find otu what sets *That* 
CODE_00AB2D:          ORA.W $1BB2,X                       ;; 00AB2D : 1D B2 1B    ; ...this place gives me headaches... Can't we work on some other code? :( 
CODE_00AB30:          AND $0A                             ;; 00AB30 : 25 0A       ; Sure, go ahead.  anyways, this seems to upload the decompressed GFX 
CODE_00AB32:          ORA $0C                             ;; 00AB32 : 05 0C       ; while scrambling it afterwards (o_O). 
CODE_00AB34:          STA.W $2118                         ;; 00AB34 : 8D 18 21    ; Okay... WHAT THE HELL? ; Data for VRAM Write (Low Byte)
CODE_00AB37:          INC $00                             ;; 00AB37 : E6 00       ; I'll have nightmares about this routine for a few years. :( 
CODE_00AB39:          DEX                                 ;; 00AB39 : CA          ;
CODE_00AB3A:          BPL AddressWrite2                   ;; 00AB3A : 10 E7       ; Ouch. 
CODE_00AB3C:          DEY                                 ;; 00AB3C : 88          ;
CODE_00AB3D:          BPL Upload????ToVRAM                ;; 00AB3D : 10 CA       ;
CODE_00AB3F:          SEP #$20                            ;; 00AB3F : E2 20       ; Accum (8 bit) 
Return00AB41:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00AB42:          LDY.B #$27                          ;; 00AB42 : A0 27       ;
CODE_00AB44:          JSL.L CODE_00BA28                   ;; 00AB44 : 22 28 BA 00 ;
CODE_00AB48:          REP #$10                            ;; 00AB48 : C2 10       ; Index (16 bit) 
CODE_00AB4A:          LDY.W #$0000                        ;; 00AB4A : A0 00 00    ;
CODE_00AB4D:          LDX.W #$03FF                        ;; 00AB4D : A2 FF 03    ;
CODE_00AB50:          LDA [$00],Y                         ;; 00AB50 : B7 00       ;
CODE_00AB52:          STA $0F                             ;; 00AB52 : 85 0F       ;
CODE_00AB54:          JSR.W CODE_00ABC4                   ;; 00AB54 : 20 C4 AB    ;
CODE_00AB57:          LDA $04                             ;; 00AB57 : A5 04       ;
CODE_00AB59:          STA.W $2119                         ;; 00AB59 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00AB5C:          JSR.W CODE_00ABC4                   ;; 00AB5C : 20 C4 AB    ;
CODE_00AB5F:          LDA $04                             ;; 00AB5F : A5 04       ;
CODE_00AB61:          STA.W $2119                         ;; 00AB61 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00AB64:          STZ $04                             ;; 00AB64 : 64 04       ;
CODE_00AB66:          ROL $0F                             ;; 00AB66 : 26 0F       ;
CODE_00AB68:          ROL $04                             ;; 00AB68 : 26 04       ;
CODE_00AB6A:          ROL $0F                             ;; 00AB6A : 26 0F       ;
CODE_00AB6C:          ROL $04                             ;; 00AB6C : 26 04       ;
CODE_00AB6E:          INY                                 ;; 00AB6E : C8          ;
CODE_00AB6F:          LDA [$00],Y                         ;; 00AB6F : B7 00       ;
CODE_00AB71:          STA $0F                             ;; 00AB71 : 85 0F       ;
CODE_00AB73:          ROL $0F                             ;; 00AB73 : 26 0F       ;
CODE_00AB75:          ROL $04                             ;; 00AB75 : 26 04       ;
CODE_00AB77:          LDA $04                             ;; 00AB77 : A5 04       ;
CODE_00AB79:          STA.W $2119                         ;; 00AB79 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00AB7C:          JSR.W CODE_00ABC4                   ;; 00AB7C : 20 C4 AB    ;
CODE_00AB7F:          LDA $04                             ;; 00AB7F : A5 04       ;
CODE_00AB81:          STA.W $2119                         ;; 00AB81 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00AB84:          JSR.W CODE_00ABC4                   ;; 00AB84 : 20 C4 AB    ;
CODE_00AB87:          LDA $04                             ;; 00AB87 : A5 04       ;
CODE_00AB89:          STA.W $2119                         ;; 00AB89 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00AB8C:          STZ $04                             ;; 00AB8C : 64 04       ;
CODE_00AB8E:          ROL $0F                             ;; 00AB8E : 26 0F       ;
CODE_00AB90:          ROL $04                             ;; 00AB90 : 26 04       ;
CODE_00AB92:          INY                                 ;; 00AB92 : C8          ;
CODE_00AB93:          LDA [$00],Y                         ;; 00AB93 : B7 00       ;
CODE_00AB95:          STA $0F                             ;; 00AB95 : 85 0F       ;
CODE_00AB97:          ROL $0F                             ;; 00AB97 : 26 0F       ;
CODE_00AB99:          ROL $04                             ;; 00AB99 : 26 04       ;
CODE_00AB9B:          ROL $0F                             ;; 00AB9B : 26 0F       ;
CODE_00AB9D:          ROL $04                             ;; 00AB9D : 26 04       ;
CODE_00AB9F:          LDA $04                             ;; 00AB9F : A5 04       ;
CODE_00ABA1:          STA.W $2119                         ;; 00ABA1 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00ABA4:          JSR.W CODE_00ABC4                   ;; 00ABA4 : 20 C4 AB    ;
CODE_00ABA7:          LDA $04                             ;; 00ABA7 : A5 04       ;
CODE_00ABA9:          STA.W $2119                         ;; 00ABA9 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00ABAC:          JSR.W CODE_00ABC4                   ;; 00ABAC : 20 C4 AB    ;
CODE_00ABAF:          LDA $04                             ;; 00ABAF : A5 04       ;
CODE_00ABB1:          STA.W $2119                         ;; 00ABB1 : 8D 19 21    ; Data for VRAM Write (High Byte)
CODE_00ABB4:          INY                                 ;; 00ABB4 : C8          ;
CODE_00ABB5:          DEX                                 ;; 00ABB5 : CA          ;
CODE_00ABB6:          BPL CODE_00AB50                     ;; 00ABB6 : 10 98       ;
CODE_00ABB8:          LDX.W #$2000                        ;; 00ABB8 : A2 00 20    ;
CODE_00ABBB:          STZ.W $2119                         ;; 00ABBB : 9C 19 21    ; Data for VRAM Write (High Byte)
CODE_00ABBE:          DEX                                 ;; 00ABBE : CA          ;
CODE_00ABBF:          BNE CODE_00ABBB                     ;; 00ABBF : D0 FA       ;
CODE_00ABC1:          SEP #$10                            ;; 00ABC1 : E2 10       ; Index (8 bit) 
Return00ABC3:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00ABC4:          STZ $04                             ;; 00ABC4 : 64 04       ;
CODE_00ABC6:          ROL $0F                             ;; 00ABC6 : 26 0F       ;
CODE_00ABC8:          ROL $04                             ;; 00ABC8 : 26 04       ;
CODE_00ABCA:          ROL $0F                             ;; 00ABCA : 26 0F       ;
CODE_00ABCC:          ROL $04                             ;; 00ABCC : 26 04       ;
CODE_00ABCE:          ROL $0F                             ;; 00ABCE : 26 0F       ;
CODE_00ABD0:          ROL $04                             ;; 00ABD0 : 26 04       ;
Return00ABD2:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00ABD3:          .db $00,$18,$30,$48,$60,$78,$90,$A8 ;; 00ABD3               ;
                      .db $00,$14,$28,$3C                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00ABDF:          .db $00,$00,$38,$00,$70,$00,$A8,$00 ;; 00ABDF               ;
                      .db $E0,$00,$18,$01,$50,$01         ;; ?QPWZ?               ;
                                                          ;;                      ;
LoadPalette:          REP #$30                            ;; ?QPWZ? : C2 30       ; 16 bit A, X and Y ; Index (16 bit) Accum (16 bit) 
CODE_00ABEF:          LDA.W #$7FDD                        ;; 00ABEF : A9 DD 7F    ; \  
CODE_00ABF2:          STA $04                             ;; 00ABF2 : 85 04       ;  |Set color 1 in all object palettes to white 
CODE_00ABF4:          LDX.W #$0002                        ;; 00ABF4 : A2 02 00    ;  | 
CODE_00ABF7:          JSR.W LoadCol8Pal                   ;; 00ABF7 : 20 ED AC    ; /  
CODE_00ABFA:          LDA.W #$7FFF                        ;; 00ABFA : A9 FF 7F    ; \  
CODE_00ABFD:          STA $04                             ;; 00ABFD : 85 04       ;  |Set color 1 in all sprite palettes to white 
CODE_00ABFF:          LDX.W #$0102                        ;; 00ABFF : A2 02 01    ;  | 
CODE_00AC02:          JSR.W LoadCol8Pal                   ;; 00AC02 : 20 ED AC    ; /  
CODE_00AC05:          LDA.W #$B170                        ;; 00AC05 : A9 70 B1    ; \  
CODE_00AC08:          STA $00                             ;; 00AC08 : 85 00       ;  | 
CODE_00AC0A:          LDA.W #$0010                        ;; 00AC0A : A9 10 00    ;  |Load colors 8-16 in the first two object palettes from 00/B170 
CODE_00AC0D:          STA $04                             ;; 00AC0D : 85 04       ;  |(Layer 3 palettes) 
CODE_00AC0F:          LDA.W #$0007                        ;; 00AC0F : A9 07 00    ;  | 
CODE_00AC12:          STA $06                             ;; 00AC12 : 85 06       ;  | 
CODE_00AC14:          LDA.W #$0001                        ;; 00AC14 : A9 01 00    ;  | 
CODE_00AC17:          STA $08                             ;; 00AC17 : 85 08       ;  | 
CODE_00AC19:          JSR.W LoadColors                    ;; 00AC19 : 20 FF AC    ; /  
CODE_00AC1C:          LDA.W #$B250                        ;; 00AC1C : A9 50 B2    ; \  
CODE_00AC1F:          STA $00                             ;; 00AC1F : 85 00       ;  | 
CODE_00AC21:          LDA.W #$0084                        ;; 00AC21 : A9 84 00    ;  |Load colors 2-7 in palettes 4-D from 00/B250 
CODE_00AC24:          STA $04                             ;; 00AC24 : 85 04       ;  |(Object and sprite palettes) 
CODE_00AC26:          LDA.W #$0005                        ;; 00AC26 : A9 05 00    ;  | 
CODE_00AC29:          STA $06                             ;; 00AC29 : 85 06       ;  | 
CODE_00AC2B:          LDA.W #$0009                        ;; 00AC2B : A9 09 00    ;  | 
CODE_00AC2E:          STA $08                             ;; 00AC2E : 85 08       ;  | 
CODE_00AC30:          JSR.W LoadColors                    ;; 00AC30 : 20 FF AC    ; /  
CODE_00AC33:          LDA.W $192F                         ;; 00AC33 : AD 2F 19    ; \  
CODE_00AC36:          AND.W #$000F                        ;; 00AC36 : 29 0F 00    ;  | 
CODE_00AC39:          ASL                                 ;; 00AC39 : 0A          ;  |Load background color 
CODE_00AC3A:          TAY                                 ;; 00AC3A : A8          ;  | 
CODE_00AC3B:          LDA.W Palettes?,Y                   ;; 00AC3B : B9 A0 B0    ;  | 
CODE_00AC3E:          STA.W $0701                         ;; 00AC3E : 8D 01 07    ; /  
CODE_00AC41:          LDA.W #$B190                        ;; 00AC41 : A9 90 B1    ; \Store base address in $00, ... 
CODE_00AC44:          STA $00                             ;; 00AC44 : 85 00       ; / 
CODE_00AC46:          LDA.W $192D                         ;; 00AC46 : AD 2D 19    ; \...get current object palette, ... 
CODE_00AC49:          AND.W #$000F                        ;; 00AC49 : 29 0F 00    ; / 
CODE_00AC4C:          TAY                                 ;; 00AC4C : A8          ; \  
CODE_00AC4D:          LDA.W DATA_00ABD3,Y                 ;; 00AC4D : B9 D3 AB    ;  | 
CODE_00AC50:          AND.W #$00FF                        ;; 00AC50 : 29 FF 00    ;  |...use it to figure out where to load from, ... 
CODE_00AC53:          CLC                                 ;; 00AC53 : 18          ;  | 
CODE_00AC54:          ADC $00                             ;; 00AC54 : 65 00       ;  |...add it to the base address... 
CODE_00AC56:          STA $00                             ;; 00AC56 : 85 00       ; / ...and store it in $00 
CODE_00AC58:          LDA.W #$0044                        ;; 00AC58 : A9 44 00    ; \  
CODE_00AC5B:          STA $04                             ;; 00AC5B : 85 04       ;  | 
CODE_00AC5D:          LDA.W #$0005                        ;; 00AC5D : A9 05 00    ;  | 
CODE_00AC60:          STA $06                             ;; 00AC60 : 85 06       ;  |Load colors 2-7 in object palettes 2 and 3 from the address in $00 
CODE_00AC62:          LDA.W #$0001                        ;; 00AC62 : A9 01 00    ;  | 
CODE_00AC65:          STA $08                             ;; 00AC65 : 85 08       ;  | 
CODE_00AC67:          JSR.W LoadColors                    ;; 00AC67 : 20 FF AC    ; /  
CODE_00AC6A:          LDA.W #$B318                        ;; 00AC6A : A9 18 B3    ; \Store base address in $00, ... 
CODE_00AC6D:          STA $00                             ;; 00AC6D : 85 00       ; / 
CODE_00AC6F:          LDA.W $192E                         ;; 00AC6F : AD 2E 19    ; \...get current sprite palette, ... 
CODE_00AC72:          AND.W #$000F                        ;; 00AC72 : 29 0F 00    ; / 
CODE_00AC75:          TAY                                 ;; 00AC75 : A8          ; \  
CODE_00AC76:          LDA.W DATA_00ABD3,Y                 ;; 00AC76 : B9 D3 AB    ;  | 
CODE_00AC79:          AND.W #$00FF                        ;; 00AC79 : 29 FF 00    ;  |...use it to figure out where to load from, ... 
CODE_00AC7C:          CLC                                 ;; 00AC7C : 18          ;  | 
CODE_00AC7D:          ADC $00                             ;; 00AC7D : 65 00       ;  |...add it to the base address... 
CODE_00AC7F:          STA $00                             ;; 00AC7F : 85 00       ; / ...and store it in $00 
CODE_00AC81:          LDA.W #$01C4                        ;; 00AC81 : A9 C4 01    ; \  
CODE_00AC84:          STA $04                             ;; 00AC84 : 85 04       ;  | 
CODE_00AC86:          LDA.W #$0005                        ;; 00AC86 : A9 05 00    ;  | 
CODE_00AC89:          STA $06                             ;; 00AC89 : 85 06       ;  |Load colors 2-7 in sprite palettes 6 and 7 from the address in $00 
CODE_00AC8B:          LDA.W #$0001                        ;; 00AC8B : A9 01 00    ;  | 
CODE_00AC8E:          STA $08                             ;; 00AC8E : 85 08       ;  | 
CODE_00AC90:          JSR.W LoadColors                    ;; 00AC90 : 20 FF AC    ; /  
CODE_00AC93:          LDA.W #$B0B0                        ;; 00AC93 : A9 B0 B0    ; \Store bade address in $00, ... 
CODE_00AC96:          STA $00                             ;; 00AC96 : 85 00       ; / 
CODE_00AC98:          LDA.W $1930                         ;; 00AC98 : AD 30 19    ; \...get current background palette, ... 
CODE_00AC9B:          AND.W #$000F                        ;; 00AC9B : 29 0F 00    ; / 
CODE_00AC9E:          TAY                                 ;; 00AC9E : A8          ; \  
CODE_00AC9F:          LDA.W DATA_00ABD3,Y                 ;; 00AC9F : B9 D3 AB    ;  | 
CODE_00ACA2:          AND.W #$00FF                        ;; 00ACA2 : 29 FF 00    ;  |...use it to figure out where to load from, ... 
CODE_00ACA5:          CLC                                 ;; 00ACA5 : 18          ;  | 
CODE_00ACA6:          ADC $00                             ;; 00ACA6 : 65 00       ;  |...add it to the base address... 
CODE_00ACA8:          STA $00                             ;; 00ACA8 : 85 00       ; / ...and store it in $00 
CODE_00ACAA:          LDA.W #$0004                        ;; 00ACAA : A9 04 00    ; \  
CODE_00ACAD:          STA $04                             ;; 00ACAD : 85 04       ;  | 
CODE_00ACAF:          LDA.W #$0005                        ;; 00ACAF : A9 05 00    ;  | 
CODE_00ACB2:          STA $06                             ;; 00ACB2 : 85 06       ;  |Load colors 2-7 in object palettes 0 and 1 from the address in $00 
CODE_00ACB4:          LDA.W #$0001                        ;; 00ACB4 : A9 01 00    ;  | 
CODE_00ACB7:          STA $08                             ;; 00ACB7 : 85 08       ;  | 
CODE_00ACB9:          JSR.W LoadColors                    ;; 00ACB9 : 20 FF AC    ; /  
CODE_00ACBC:          LDA.W #$B674                        ;; 00ACBC : A9 74 B6    ; \  
CODE_00ACBF:          STA $00                             ;; 00ACBF : 85 00       ;  | 
CODE_00ACC1:          LDA.W #$0052                        ;; 00ACC1 : A9 52 00    ;  | 
CODE_00ACC4:          STA $04                             ;; 00ACC4 : 85 04       ;  | 
CODE_00ACC6:          LDA.W #$0006                        ;; 00ACC6 : A9 06 00    ;  |Load colors 9-F in object palettes 2-4 from 00/B674 
CODE_00ACC9:          STA $06                             ;; 00ACC9 : 85 06       ;  | 
CODE_00ACCB:          LDA.W #$0002                        ;; 00ACCB : A9 02 00    ;  | 
CODE_00ACCE:          STA $08                             ;; 00ACCE : 85 08       ;  | 
CODE_00ACD0:          JSR.W LoadColors                    ;; 00ACD0 : 20 FF AC    ; /  
CODE_00ACD3:          LDA.W #$B674                        ;; 00ACD3 : A9 74 B6    ; \  
CODE_00ACD6:          STA $00                             ;; 00ACD6 : 85 00       ;  | 
CODE_00ACD8:          LDA.W #$0132                        ;; 00ACD8 : A9 32 01    ;  | 
CODE_00ACDB:          STA $04                             ;; 00ACDB : 85 04       ;  | 
CODE_00ACDD:          LDA.W #$0006                        ;; 00ACDD : A9 06 00    ;  |Load colors 9-F in sprite palettes 1-3 from 00/B674 
CODE_00ACE0:          STA $06                             ;; 00ACE0 : 85 06       ;  | 
CODE_00ACE2:          LDA.W #$0002                        ;; 00ACE2 : A9 02 00    ;  | 
CODE_00ACE5:          STA $08                             ;; 00ACE5 : 85 08       ;  | 
CODE_00ACE7:          JSR.W LoadColors                    ;; 00ACE7 : 20 FF AC    ; /  
CODE_00ACEA:          SEP #$30                            ;; 00ACEA : E2 30       ; 8 bit A, X and Y ; Index (8 bit) Accum (8 bit) 
Return00ACEC:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
LoadCol8Pal:          LDY.W #$0007                        ;; ?QPWZ? : A0 07 00    ; Index (16 bit) Accum (16 bit) 
CODE_00ACF0:          LDA $04                             ;; 00ACF0 : A5 04       ;
CODE_00ACF2:          STA.W $0703,X                       ;; 00ACF2 : 9D 03 07    ;
CODE_00ACF5:          TXA                                 ;; 00ACF5 : 8A          ;
CODE_00ACF6:          CLC                                 ;; 00ACF6 : 18          ;
CODE_00ACF7:          ADC.W #$0020                        ;; 00ACF7 : 69 20 00    ;
CODE_00ACFA:          TAX                                 ;; 00ACFA : AA          ;
CODE_00ACFB:          DEY                                 ;; 00ACFB : 88          ;
CODE_00ACFC:          BPL CODE_00ACF0                     ;; 00ACFC : 10 F2       ;
Return00ACFE:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
LoadColors:           LDX $04                             ;; ?QPWZ? : A6 04       ;
CODE_00AD01:          LDY $06                             ;; 00AD01 : A4 06       ;
CODE_00AD03:          LDA ($00)                           ;; 00AD03 : B2 00       ;
CODE_00AD05:          STA.W $0703,X                       ;; 00AD05 : 9D 03 07    ;
CODE_00AD08:          INC $00                             ;; 00AD08 : E6 00       ;
CODE_00AD0A:          INC $00                             ;; 00AD0A : E6 00       ;
CODE_00AD0C:          INX                                 ;; 00AD0C : E8          ;
CODE_00AD0D:          INX                                 ;; 00AD0D : E8          ;
CODE_00AD0E:          DEY                                 ;; 00AD0E : 88          ;
CODE_00AD0F:          BPL CODE_00AD03                     ;; 00AD0F : 10 F2       ;
CODE_00AD11:          LDA $04                             ;; 00AD11 : A5 04       ;
CODE_00AD13:          CLC                                 ;; 00AD13 : 18          ;
CODE_00AD14:          ADC.W #$0020                        ;; 00AD14 : 69 20 00    ;
CODE_00AD17:          STA $04                             ;; 00AD17 : 85 04       ;
CODE_00AD19:          DEC $08                             ;; 00AD19 : C6 08       ;
CODE_00AD1B:          BPL LoadColors                      ;; 00AD1B : 10 E2       ;
Return00AD1D:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00AD1E:          .db $01,$00,$03,$04,$03,$05,$02     ;; 00AD1E               ;
                                                          ;;                      ;
CODE_00AD25:          REP #$30                            ;; 00AD25 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00AD27:          LDY.W #$B3D8                        ;; 00AD27 : A0 D8 B3    ;
CODE_00AD2A:          LDA.W $1EEA                         ;; 00AD2A : AD EA 1E    ;
CODE_00AD2D:          BPL CODE_00AD32                     ;; 00AD2D : 10 03       ;
CODE_00AD2F:          LDY.W #$B732                        ;; 00AD2F : A0 32 B7    ;
CODE_00AD32:          STY $00                             ;; 00AD32 : 84 00       ;
CODE_00AD34:          LDA.W $1931                         ;; 00AD34 : AD 31 19    ;
CODE_00AD37:          AND.W #$000F                        ;; 00AD37 : 29 0F 00    ;
CODE_00AD3A:          DEC A                               ;; 00AD3A : 3A          ;
CODE_00AD3B:          TAY                                 ;; 00AD3B : A8          ;
CODE_00AD3C:          LDA.W DATA_00AD1E,Y                 ;; 00AD3C : B9 1E AD    ;
CODE_00AD3F:          AND.W #$00FF                        ;; 00AD3F : 29 FF 00    ;
CODE_00AD42:          ASL                                 ;; 00AD42 : 0A          ;
CODE_00AD43:          TAY                                 ;; 00AD43 : A8          ;
CODE_00AD44:          LDA.W DATA_00ABDF,Y                 ;; 00AD44 : B9 DF AB    ;
CODE_00AD47:          CLC                                 ;; 00AD47 : 18          ;
CODE_00AD48:          ADC $00                             ;; 00AD48 : 65 00       ;
CODE_00AD4A:          STA $00                             ;; 00AD4A : 85 00       ;
CODE_00AD4C:          LDA.W #$0082                        ;; 00AD4C : A9 82 00    ;
CODE_00AD4F:          STA $04                             ;; 00AD4F : 85 04       ;
CODE_00AD51:          LDA.W #$0006                        ;; 00AD51 : A9 06 00    ;
CODE_00AD54:          STA $06                             ;; 00AD54 : 85 06       ;
CODE_00AD56:          LDA.W #$0003                        ;; 00AD56 : A9 03 00    ;
CODE_00AD59:          STA $08                             ;; 00AD59 : 85 08       ;
CODE_00AD5B:          JSR.W LoadColors                    ;; 00AD5B : 20 FF AC    ;
CODE_00AD5E:          LDA.W #$B528                        ;; 00AD5E : A9 28 B5    ;
CODE_00AD61:          STA $00                             ;; 00AD61 : 85 00       ;
CODE_00AD63:          LDA.W #$0052                        ;; 00AD63 : A9 52 00    ;
CODE_00AD66:          STA $04                             ;; 00AD66 : 85 04       ;
CODE_00AD68:          LDA.W #$0006                        ;; 00AD68 : A9 06 00    ;
CODE_00AD6B:          STA $06                             ;; 00AD6B : 85 06       ;
CODE_00AD6D:          LDA.W #$0005                        ;; 00AD6D : A9 05 00    ;
CODE_00AD70:          STA $08                             ;; 00AD70 : 85 08       ;
CODE_00AD72:          JSR.W LoadColors                    ;; 00AD72 : 20 FF AC    ;
CODE_00AD75:          LDA.W #$B57C                        ;; 00AD75 : A9 7C B5    ;
CODE_00AD78:          STA $00                             ;; 00AD78 : 85 00       ;
CODE_00AD7A:          LDA.W #$0102                        ;; 00AD7A : A9 02 01    ;
CODE_00AD7D:          STA $04                             ;; 00AD7D : 85 04       ;
CODE_00AD7F:          LDA.W #$0006                        ;; 00AD7F : A9 06 00    ;
CODE_00AD82:          STA $06                             ;; 00AD82 : 85 06       ;
CODE_00AD84:          LDA.W #$0007                        ;; 00AD84 : A9 07 00    ;
CODE_00AD87:          STA $08                             ;; 00AD87 : 85 08       ;
CODE_00AD89:          JSR.W LoadColors                    ;; 00AD89 : 20 FF AC    ;
CODE_00AD8C:          LDA.W #$B5EC                        ;; 00AD8C : A9 EC B5    ;
CODE_00AD8F:          STA $00                             ;; 00AD8F : 85 00       ;
CODE_00AD91:          LDA.W #$0010                        ;; 00AD91 : A9 10 00    ;
CODE_00AD94:          STA $04                             ;; 00AD94 : 85 04       ;
CODE_00AD96:          LDA.W #$0007                        ;; 00AD96 : A9 07 00    ;
CODE_00AD99:          STA $06                             ;; 00AD99 : 85 06       ;
CODE_00AD9B:          LDA.W #$0001                        ;; 00AD9B : A9 01 00    ;
CODE_00AD9E:          STA $08                             ;; 00AD9E : 85 08       ;
CODE_00ADA0:          JSR.W LoadColors                    ;; 00ADA0 : 20 FF AC    ;
CODE_00ADA3:          SEP #$30                            ;; 00ADA3 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return00ADA5:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00ADA6:          REP #$30                            ;; 00ADA6 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00ADA8:          LDA.W #$B63C                        ;; 00ADA8 : A9 3C B6    ;
CODE_00ADAB:          STA $00                             ;; 00ADAB : 85 00       ;
CODE_00ADAD:          LDA.W #$0010                        ;; 00ADAD : A9 10 00    ;
CODE_00ADB0:          STA $04                             ;; 00ADB0 : 85 04       ;
CODE_00ADB2:          LDA.W #$0007                        ;; 00ADB2 : A9 07 00    ;
CODE_00ADB5:          STA $06                             ;; 00ADB5 : 85 06       ;
CODE_00ADB7:          LDA.W #$0000                        ;; 00ADB7 : A9 00 00    ;
CODE_00ADBA:          STA $08                             ;; 00ADBA : 85 08       ;
CODE_00ADBC:          JSR.W LoadColors                    ;; 00ADBC : 20 FF AC    ;
CODE_00ADBF:          LDA.W #$B62C                        ;; 00ADBF : A9 2C B6    ;
CODE_00ADC2:          STA $00                             ;; 00ADC2 : 85 00       ;
CODE_00ADC4:          LDA.W #$0030                        ;; 00ADC4 : A9 30 00    ;
CODE_00ADC7:          STA $04                             ;; 00ADC7 : 85 04       ;
CODE_00ADC9:          LDA.W #$0007                        ;; 00ADC9 : A9 07 00    ;
CODE_00ADCC:          STA $06                             ;; 00ADCC : 85 06       ;
CODE_00ADCE:          LDA.W #$0000                        ;; 00ADCE : A9 00 00    ;
CODE_00ADD1:          STA $08                             ;; 00ADD1 : 85 08       ;
CODE_00ADD3:          JSR.W LoadColors                    ;; 00ADD3 : 20 FF AC    ;
CODE_00ADD6:          SEP #$30                            ;; 00ADD6 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return00ADD8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00ADD9:          JSR.W LoadPalette                   ;; 00ADD9 : 20 ED AB    ;
CODE_00ADDC:          REP #$30                            ;; 00ADDC : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00ADDE:          LDA.W #$0017                        ;; 00ADDE : A9 17 00    ;
CODE_00ADE1:          STA.W $0701                         ;; 00ADE1 : 8D 01 07    ;
CODE_00ADE4:          LDA.W #$B170                        ;; 00ADE4 : A9 70 B1    ;
CODE_00ADE7:          STA $00                             ;; 00ADE7 : 85 00       ;
CODE_00ADE9:          LDA.W #$0010                        ;; 00ADE9 : A9 10 00    ;
CODE_00ADEC:          STA $04                             ;; 00ADEC : 85 04       ;
CODE_00ADEE:          LDA.W #$0007                        ;; 00ADEE : A9 07 00    ;
CODE_00ADF1:          STA $06                             ;; 00ADF1 : 85 06       ;
CODE_00ADF3:          LDA.W #$0001                        ;; 00ADF3 : A9 01 00    ;
CODE_00ADF6:          STA $08                             ;; 00ADF6 : 85 08       ;
CODE_00ADF8:          JSR.W LoadColors                    ;; 00ADF8 : 20 FF AC    ;
CODE_00ADFB:          LDA.W #$B65C                        ;; 00ADFB : A9 5C B6    ;
CODE_00ADFE:          STA $00                             ;; 00ADFE : 85 00       ;
CODE_00AE00:          LDA.W #$0000                        ;; 00AE00 : A9 00 00    ;
CODE_00AE03:          STA $04                             ;; 00AE03 : 85 04       ;
CODE_00AE05:          LDA.W #$0007                        ;; 00AE05 : A9 07 00    ;
CODE_00AE08:          STA $06                             ;; 00AE08 : 85 06       ;
CODE_00AE0A:          LDA.W #$0000                        ;; 00AE0A : A9 00 00    ;
CODE_00AE0D:          STA $08                             ;; 00AE0D : 85 08       ;
CODE_00AE0F:          JSR.W LoadColors                    ;; 00AE0F : 20 FF AC    ;
CODE_00AE12:          SEP #$30                            ;; 00AE12 : E2 30       ; Index (8 bit) Accum (8 bit) 
Return00AE14:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00AE15:          LDA.B #$02                          ;; 00AE15 : A9 02       ;
CODE_00AE17:          STA.W $192E                         ;; 00AE17 : 8D 2E 19    ;
CODE_00AE1A:          LDA.B #$07                          ;; 00AE1A : A9 07       ;
CODE_00AE1C:          STA.W $192D                         ;; 00AE1C : 8D 2D 19    ;
CODE_00AE1F:          JSR.W LoadPalette                   ;; 00AE1F : 20 ED AB    ;
CODE_00AE22:          REP #$30                            ;; 00AE22 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00AE24:          LDA.W #$0017                        ;; 00AE24 : A9 17 00    ;
CODE_00AE27:          STA.W $0701                         ;; 00AE27 : 8D 01 07    ;
CODE_00AE2A:          LDA.W #$B5F4                        ;; 00AE2A : A9 F4 B5    ;
CODE_00AE2D:          STA $00                             ;; 00AE2D : 85 00       ;
CODE_00AE2F:          LDA.W #$0018                        ;; 00AE2F : A9 18 00    ;
CODE_00AE32:          STA $04                             ;; 00AE32 : 85 04       ;
CODE_00AE34:          LDA.W #$0003                        ;; 00AE34 : A9 03 00    ;
CODE_00AE37:          STA $06                             ;; 00AE37 : 85 06       ;
CODE_00AE39:          STZ $08                             ;; 00AE39 : 64 08       ;
CODE_00AE3B:          JSR.W LoadColors                    ;; 00AE3B : 20 FF AC    ;
CODE_00AE3E:          SEP #$30                            ;; 00AE3E : E2 30       ; Index (8 bit) Accum (8 bit) 
Return00AE40:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00AE41:          .db $00,$05,$0A                     ;; 00AE41               ;
                                                          ;;                      ;
DATA_00AE44:          .db $20,$40,$80                     ;; 00AE44               ;
                                                          ;;                      ;
CODE_00AE47:          LDX.B #$02                          ;; 00AE47 : A2 02       ;
CODE_00AE49:          REP #$20                            ;; 00AE49 : C2 20       ; Accum (16 bit) 
CODE_00AE4B:          LDA.W $0701                         ;; 00AE4B : AD 01 07    ;
CODE_00AE4E:          LDY.W DATA_00AE41,X                 ;; 00AE4E : BC 41 AE    ;
CODE_00AE51:          DEY                                 ;; 00AE51 : 88          ;
CODE_00AE52:          BMI CODE_00AE57                     ;; 00AE52 : 30 03       ;
CODE_00AE54:          LSR                                 ;; 00AE54 : 4A          ;
CODE_00AE55:          BRA CODE_00AE51                     ;; 00AE55 : 80 FA       ;
                                                          ;;                      ;
CODE_00AE57:          SEP #$20                            ;; 00AE57 : E2 20       ; Accum (8 bit) 
CODE_00AE59:          AND.B #$1F                          ;; 00AE59 : 29 1F       ;
CODE_00AE5B:          ORA.W DATA_00AE44,X                 ;; 00AE5B : 1D 44 AE    ;
CODE_00AE5E:          STA.W $2132                         ;; 00AE5E : 8D 32 21    ; Fixed Color Data
CODE_00AE61:          DEX                                 ;; 00AE61 : CA          ;
CODE_00AE62:          BPL CODE_00AE49                     ;; 00AE62 : 10 E5       ;
Return00AE64:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00AE65:          .db $1F,$00,$E0,$03,$00,$7C         ;; 00AE65               ;
                                                          ;;                      ;
DATA_00AE6B:          .db $FF,$FF,$E0,$FF,$00,$FC         ;; 00AE6B               ;
                                                          ;;                      ;
DATA_00AE71:          .db $01,$00,$20,$00,$00,$04         ;; 00AE71               ;
                                                          ;;                      ;
DATA_00AE77:          .db $00,$00,$00,$00,$01,$00,$00,$00 ;; 00AE77               ;
                      .db $00,$80,$00,$80,$20,$80,$00,$04 ;; ?QPWZ?               ;
                      .db $80,$80,$80,$80,$08,$82,$40,$10 ;; ?QPWZ?               ;
                      .db $20,$84,$20,$84,$44,$88,$10,$22 ;; ?QPWZ?               ;
                      .db $88,$88,$88,$88,$22,$91,$88,$44 ;; ?QPWZ?               ;
                      .db $48,$92,$48,$92,$92,$A4,$24,$49 ;; ?QPWZ?               ;
                      .db $A4,$A4,$A4,$A4,$49,$A9,$94,$52 ;; ?QPWZ?               ;
                      .db $AA,$AA,$94,$52,$AA,$AA,$54,$55 ;; ?QPWZ?               ;
                      .db $AA,$AA,$AA,$AA,$AA,$D5,$AA,$AA ;; ?QPWZ?               ;
                      .db $AA,$D5,$AA,$D5,$B5,$D6,$6A,$AD ;; ?QPWZ?               ;
                      .db $DA,$DA,$DA,$DA,$6D,$DB,$DA,$B6 ;; ?QPWZ?               ;
                      .db $B6,$ED,$B6,$ED,$DD,$EE,$76,$BB ;; ?QPWZ?               ;
                      .db $EE,$EE,$EE,$EE,$BB,$F7,$EE,$DD ;; ?QPWZ?               ;
                      .db $DE,$FB,$DE,$FB,$F7,$FD,$BE,$EF ;; ?QPWZ?               ;
                      .db $FE,$FE,$FE,$FE,$DF,$FF,$FE,$FB ;; ?QPWZ?               ;
                      .db $FE,$FF,$FE,$FF,$FF,$FF,$FE,$FF ;; ?QPWZ?               ;
DATA_00AEF7:          .db $00,$80,$00,$40,$00,$20,$00,$10 ;; 00AEF7               ;
                      .db $00,$08,$00,$04,$00,$02,$00,$01 ;; ?QPWZ?               ;
                      .db $80,$00,$40,$00,$20,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$04,$00,$02,$00,$01,$00 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00AF17:          LDY.W $1493                         ;; 00AF17 : AC 93 14    ;
CODE_00AF1A:          LDA RAM_FrameCounter                ;; 00AF1A : A5 13       ;
CODE_00AF1C:          LSR                                 ;; 00AF1C : 4A          ;
CODE_00AF1D:          BCC CODE_00AF25                     ;; 00AF1D : 90 06       ;
CODE_00AF1F:          DEY                                 ;; 00AF1F : 88          ;
CODE_00AF20:          BEQ CODE_00AF25                     ;; 00AF20 : F0 03       ;
CODE_00AF22:          STY.W $1493                         ;; 00AF22 : 8C 93 14    ;
CODE_00AF25:          CPY.B #$A0                          ;; 00AF25 : C0 A0       ;
CODE_00AF27:          BCS CODE_00AF35                     ;; 00AF27 : B0 0C       ;
CODE_00AF29:          LDA.B #$04                          ;; 00AF29 : A9 04       ;
CODE_00AF2B:          TRB $40                             ;; 00AF2B : 14 40       ;
CODE_00AF2D:          LDA.B #$09                          ;; 00AF2D : A9 09       ;
CODE_00AF2F:          STA $3E                             ;; 00AF2F : 85 3E       ;
CODE_00AF31:          JSL.L CODE_05CBFF                   ;; 00AF31 : 22 FF CB 05 ;
CODE_00AF35:          LDA RAM_FrameCounter                ;; 00AF35 : A5 13       ;
CODE_00AF37:          AND.B #$03                          ;; 00AF37 : 29 03       ;
CODE_00AF39:          BNE Return00AFA2                    ;; 00AF39 : D0 67       ;
CODE_00AF3B:          LDA.W $1495                         ;; 00AF3B : AD 95 14    ;
CODE_00AF3E:          CMP.B #$40                          ;; 00AF3E : C9 40       ;
CODE_00AF40:          BCS Return00AFA2                    ;; 00AF40 : B0 60       ;
CODE_00AF42:          JSR.W CODE_00AFA3                   ;; 00AF42 : 20 A3 AF    ; Index (16 bit) Accum (16 bit) 
CODE_00AF45:          LDA.W #$01FE                        ;; 00AF45 : A9 FE 01    ;
CODE_00AF48:          STA.W $0905                         ;; 00AF48 : 8D 05 09    ;
CODE_00AF4B:          LDX.W #$00EE                        ;; 00AF4B : A2 EE 00    ;
CODE_00AF4E:          LDA.W #$0007                        ;; 00AF4E : A9 07 00    ;
CODE_00AF51:          STA $00                             ;; 00AF51 : 85 00       ;
CODE_00AF53:          LDA.W $0905,X                       ;; 00AF53 : BD 05 09    ;
CODE_00AF56:          STA $02                             ;; 00AF56 : 85 02       ;
CODE_00AF58:          LDA.W $0703,X                       ;; 00AF58 : BD 03 07    ;
CODE_00AF5B:          JSR.W CODE_00AFC0                   ;; 00AF5B : 20 C0 AF    ;
CODE_00AF5E:          LDA $04                             ;; 00AF5E : A5 04       ;
CODE_00AF60:          STA.W $0905,X                       ;; 00AF60 : 9D 05 09    ;
CODE_00AF63:          DEX                                 ;; 00AF63 : CA          ;
CODE_00AF64:          DEX                                 ;; 00AF64 : CA          ;
CODE_00AF65:          DEC $00                             ;; 00AF65 : C6 00       ;
CODE_00AF67:          BNE CODE_00AF53                     ;; 00AF67 : D0 EA       ;
CODE_00AF69:          TXA                                 ;; 00AF69 : 8A          ;
CODE_00AF6A:          SEC                                 ;; 00AF6A : 38          ;
CODE_00AF6B:          SBC.W #$0012                        ;; 00AF6B : E9 12 00    ;
CODE_00AF6E:          TAX                                 ;; 00AF6E : AA          ;
CODE_00AF6F:          BPL CODE_00AF4E                     ;; 00AF6F : 10 DD       ;
CODE_00AF71:          LDX.W #$0004                        ;; 00AF71 : A2 04 00    ;
CODE_00AF74:          LDA.W $091F,X                       ;; 00AF74 : BD 1F 09    ;
CODE_00AF77:          STA $02                             ;; 00AF77 : 85 02       ;
CODE_00AF79:          LDA.W $071D,X                       ;; 00AF79 : BD 1D 07    ;
CODE_00AF7C:          JSR.W CODE_00AFC0                   ;; 00AF7C : 20 C0 AF    ;
CODE_00AF7F:          LDA $04                             ;; 00AF7F : A5 04       ;
CODE_00AF81:          STA.W $091F,X                       ;; 00AF81 : 9D 1F 09    ;
CODE_00AF84:          DEX                                 ;; 00AF84 : CA          ;
CODE_00AF85:          DEX                                 ;; 00AF85 : CA          ;
CODE_00AF86:          BPL CODE_00AF74                     ;; 00AF86 : 10 EC       ;
CODE_00AF88:          LDA.W $0701                         ;; 00AF88 : AD 01 07    ;
CODE_00AF8B:          STA $02                             ;; 00AF8B : 85 02       ;
CODE_00AF8D:          LDA.W $0903                         ;; 00AF8D : AD 03 09    ;
CODE_00AF90:          JSR.W CODE_00AFC0                   ;; 00AF90 : 20 C0 AF    ;
CODE_00AF93:          LDA $04                             ;; 00AF93 : A5 04       ;
CODE_00AF95:          STA.W $0701                         ;; 00AF95 : 8D 01 07    ;
CODE_00AF98:          SEP #$30                            ;; 00AF98 : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00AF9A:          STZ.W $0A05                         ;; 00AF9A : 9C 05 0A    ;
CODE_00AF9D:          LDA.B #$03                          ;; 00AF9D : A9 03       ;
CODE_00AF9F:          STA.W $0680                         ;; 00AF9F : 8D 80 06    ;
Return00AFA2:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00AFA3:          TAY                                 ;; 00AFA3 : A8          ;
CODE_00AFA4:          INC A                               ;; 00AFA4 : 1A          ;
CODE_00AFA5:          INC A                               ;; 00AFA5 : 1A          ;
CODE_00AFA6:          STA.W $1495                         ;; 00AFA6 : 8D 95 14    ;
CODE_00AFA9:          TYA                                 ;; 00AFA9 : 98          ;
CODE_00AFAA:          LSR                                 ;; 00AFAA : 4A          ;
CODE_00AFAB:          LSR                                 ;; 00AFAB : 4A          ;
CODE_00AFAC:          LSR                                 ;; 00AFAC : 4A          ;
CODE_00AFAD:          LSR                                 ;; 00AFAD : 4A          ;
CODE_00AFAE:          REP #$30                            ;; 00AFAE : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00AFB0:          AND.W #$0002                        ;; 00AFB0 : 29 02 00    ;
CODE_00AFB3:          STA $0C                             ;; 00AFB3 : 85 0C       ;
CODE_00AFB5:          TYA                                 ;; 00AFB5 : 98          ;
CODE_00AFB6:          AND.W #$001E                        ;; 00AFB6 : 29 1E 00    ;
CODE_00AFB9:          TAY                                 ;; 00AFB9 : A8          ;
CODE_00AFBA:          LDA.W DATA_00AEF7,Y                 ;; 00AFBA : B9 F7 AE    ;
CODE_00AFBD:          STA $0E                             ;; 00AFBD : 85 0E       ;
Return00AFBF:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00AFC0:          STA $0A                             ;; 00AFC0 : 85 0A       ;
CODE_00AFC2:          AND.W #$001F                        ;; 00AFC2 : 29 1F 00    ;
CODE_00AFC5:          ASL                                 ;; 00AFC5 : 0A          ;
CODE_00AFC6:          ASL                                 ;; 00AFC6 : 0A          ;
CODE_00AFC7:          STA $06                             ;; 00AFC7 : 85 06       ;
CODE_00AFC9:          LDA $0A                             ;; 00AFC9 : A5 0A       ;
CODE_00AFCB:          AND.W #$03E0                        ;; 00AFCB : 29 E0 03    ;
CODE_00AFCE:          LSR                                 ;; 00AFCE : 4A          ;
CODE_00AFCF:          LSR                                 ;; 00AFCF : 4A          ;
CODE_00AFD0:          LSR                                 ;; 00AFD0 : 4A          ;
CODE_00AFD1:          STA $08                             ;; 00AFD1 : 85 08       ;
CODE_00AFD3:          LDA $0B                             ;; 00AFD3 : A5 0B       ;
CODE_00AFD5:          AND.W #$007C                        ;; 00AFD5 : 29 7C 00    ;
CODE_00AFD8:          STA $0A                             ;; 00AFD8 : 85 0A       ;
CODE_00AFDA:          STZ $04                             ;; 00AFDA : 64 04       ;
CODE_00AFDC:          LDY.W #$0004                        ;; 00AFDC : A0 04 00    ;
CODE_00AFDF:          PHY                                 ;; 00AFDF : 5A          ;
CODE_00AFE0:          LDA.W $0006,Y                       ;; 00AFE0 : B9 06 00    ;
CODE_00AFE3:          ORA $0C                             ;; 00AFE3 : 05 0C       ;
CODE_00AFE5:          TAY                                 ;; 00AFE5 : A8          ;
CODE_00AFE6:          LDA.W DATA_00AE77,Y                 ;; 00AFE6 : B9 77 AE    ;
CODE_00AFE9:          PLY                                 ;; 00AFE9 : 7A          ;
CODE_00AFEA:          AND $0E                             ;; 00AFEA : 25 0E       ;
CODE_00AFEC:          BEQ CODE_00AFF9                     ;; 00AFEC : F0 0B       ;
CODE_00AFEE:          LDA.W DATA_00AE6B,Y                 ;; 00AFEE : B9 6B AE    ;
CODE_00AFF1:          BIT.W $1493                         ;; 00AFF1 : 2C 93 14    ;
CODE_00AFF4:          BPL CODE_00AFF9                     ;; 00AFF4 : 10 03       ;
CODE_00AFF6:          LDA.W DATA_00AE71,Y                 ;; 00AFF6 : B9 71 AE    ;
CODE_00AFF9:          CLC                                 ;; 00AFF9 : 18          ;
CODE_00AFFA:          ADC $02                             ;; 00AFFA : 65 02       ;
CODE_00AFFC:          AND.W DATA_00AE65,Y                 ;; 00AFFC : 39 65 AE    ;
CODE_00AFFF:          TSB $04                             ;; 00AFFF : 04 04       ;
CODE_00B001:          DEY                                 ;; 00B001 : 88          ;
CODE_00B002:          DEY                                 ;; 00B002 : 88          ;
CODE_00B003:          BPL CODE_00AFDF                     ;; 00B003 : 10 DA       ;
Return00B005:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00B006:          PHB                                 ;; 00B006 : 8B          ;
CODE_00B007:          PHK                                 ;; 00B007 : 4B          ;
CODE_00B008:          PLB                                 ;; 00B008 : AB          ;
CODE_00B009:          JSR.W CODE_00AFA3                   ;; 00B009 : 20 A3 AF    ;
CODE_00B00C:          LDX.W #$006E                        ;; 00B00C : A2 6E 00    ;
CODE_00B00F:          LDY.W #$0008                        ;; 00B00F : A0 08 00    ;
CODE_00B012:          LDA.W $0907,X                       ;; 00B012 : BD 07 09    ;
CODE_00B015:          STA $02                             ;; 00B015 : 85 02       ;
CODE_00B017:          LDA.W $0783,X                       ;; 00B017 : BD 83 07    ;
CODE_00B01A:          PHY                                 ;; 00B01A : 5A          ;
CODE_00B01B:          JSR.W CODE_00AFC0                   ;; 00B01B : 20 C0 AF    ;
CODE_00B01E:          PLY                                 ;; 00B01E : 7A          ;
CODE_00B01F:          LDA $04                             ;; 00B01F : A5 04       ;
CODE_00B021:          STA.W $0907,X                       ;; 00B021 : 9D 07 09    ;
CODE_00B024:          LDA.W $0783,X                       ;; 00B024 : BD 83 07    ;
CODE_00B027:          SEC                                 ;; 00B027 : 38          ;
CODE_00B028:          SBC $04                             ;; 00B028 : E5 04       ;
CODE_00B02A:          STA.W $0979,X                       ;; 00B02A : 9D 79 09    ;
CODE_00B02D:          DEX                                 ;; 00B02D : CA          ;
CODE_00B02E:          DEX                                 ;; 00B02E : CA          ;
CODE_00B02F:          DEY                                 ;; 00B02F : 88          ;
CODE_00B030:          BNE CODE_00B012                     ;; 00B030 : D0 E0       ;
CODE_00B032:          TXA                                 ;; 00B032 : 8A          ;
CODE_00B033:          SEC                                 ;; 00B033 : 38          ;
CODE_00B034:          SBC.W #$0010                        ;; 00B034 : E9 10 00    ;
CODE_00B037:          TAX                                 ;; 00B037 : AA          ;
CODE_00B038:          BPL CODE_00B00F                     ;; 00B038 : 10 D5       ;
CODE_00B03A:          SEP #$30                            ;; 00B03A : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00B03C:          PLB                                 ;; 00B03C : AB          ;
Return00B03D:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00B03E:          JSR.W CODE_00AF35                   ;; 00B03E : 20 35 AF    ;
CODE_00B041:          LDA.W $0680                         ;; 00B041 : AD 80 06    ;
CODE_00B044:          CMP.B #$03                          ;; 00B044 : C9 03       ;
CODE_00B046:          BNE Return00B090                    ;; 00B046 : D0 48       ;
CODE_00B048:          LDA.B #$00                          ;; 00B048 : A9 00       ;
CODE_00B04A:          STA $02                             ;; 00B04A : 85 02       ;
CODE_00B04C:          REP #$30                            ;; 00B04C : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00B04E:          LDA.W $0D82                         ;; 00B04E : AD 82 0D    ;
CODE_00B051:          STA $00                             ;; 00B051 : 85 00       ;
CODE_00B053:          LDY.W #$0014                        ;; 00B053 : A0 14 00    ;
CODE_00B056:          LDA [$00],Y                         ;; 00B056 : B7 00       ;
CODE_00B058:          STA.W $0A11,Y                       ;; 00B058 : 99 11 0A    ;
CODE_00B05B:          DEY                                 ;; 00B05B : 88          ;
CODE_00B05C:          DEY                                 ;; 00B05C : 88          ;
CODE_00B05D:          BPL CODE_00B056                     ;; 00B05D : 10 F7       ;
CODE_00B05F:          LDA.W #$81EE                        ;; 00B05F : A9 EE 81    ;
CODE_00B062:          STA.W $0A05                         ;; 00B062 : 8D 05 0A    ;
CODE_00B065:          LDX.W #$00CE                        ;; 00B065 : A2 CE 00    ;
CODE_00B068:          LDA.W #$0007                        ;; 00B068 : A9 07 00    ;
CODE_00B06B:          STA $00                             ;; 00B06B : 85 00       ;
CODE_00B06D:          LDA.W $0A25,X                       ;; 00B06D : BD 25 0A    ;
CODE_00B070:          STA $02                             ;; 00B070 : 85 02       ;
CODE_00B072:          LDA.W $0823,X                       ;; 00B072 : BD 23 08    ;
CODE_00B075:          JSR.W CODE_00AFC0                   ;; 00B075 : 20 C0 AF    ;
CODE_00B078:          LDA $04                             ;; 00B078 : A5 04       ;
CODE_00B07A:          STA.W $0A25,X                       ;; 00B07A : 9D 25 0A    ;
CODE_00B07D:          DEX                                 ;; 00B07D : CA          ;
CODE_00B07E:          DEX                                 ;; 00B07E : CA          ;
CODE_00B07F:          DEC $00                             ;; 00B07F : C6 00       ;
CODE_00B081:          BNE CODE_00B06D                     ;; 00B081 : D0 EA       ;
CODE_00B083:          TXA                                 ;; 00B083 : 8A          ;
CODE_00B084:          SEC                                 ;; 00B084 : 38          ;
CODE_00B085:          SBC.W #$0012                        ;; 00B085 : E9 12 00    ;
CODE_00B088:          TAX                                 ;; 00B088 : AA          ;
CODE_00B089:          BPL CODE_00B068                     ;; 00B089 : 10 DD       ;
CODE_00B08B:          SEP #$30                            ;; 00B08B : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00B08D:          STZ.W $0AF5                         ;; 00B08D : 9C F5 0A    ;
Return00B090:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00B091:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; 00B091               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF     ;; ?QPWZ?               ;
                                                          ;;                      ;
Palettes?:            .db $9F,$5B,$FB,$6F,$80,$5D,$00,$00 ;; ?QPWZ?               ;
                      .db $22,$1D,$C3,$24,$93,$73,$FF,$7F ;; ?QPWZ?               ;
                      .db $49,$3A,$8B,$42,$CD,$4A,$0F,$53 ;; ?QPWZ?               ;
                      .db $51,$5B,$93,$63,$FF,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $20,$7F,$80,$7F,$E0,$7F,$E0,$7F ;; ?QPWZ?               ;
                      .db $42,$39,$08,$52,$CE,$6A,$12,$63 ;; ?QPWZ?               ;
                      .db $55,$6B,$98,$73,$42,$39,$08,$52 ;; ?QPWZ?               ;
                      .db $CE,$6A,$42,$39,$08,$52,$CE,$6A ;; ?QPWZ?               ;
                      .db $D6,$4E,$18,$57,$5A,$5F,$9C,$67 ;; ?QPWZ?               ;
                      .db $DE,$6F,$FF,$77,$FF,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $20,$7F,$80,$7F,$E0,$7F,$E0,$7F ;; ?QPWZ?               ;
                      .db $A3,$20,$48,$31,$AC,$3D,$CE,$39 ;; ?QPWZ?               ;
                      .db $32,$3E,$B6,$4A,$A2,$20,$25,$2D ;; ?QPWZ?               ;
                      .db $68,$35,$8A,$35,$E4,$24,$52,$4A ;; ?QPWZ?               ;
                      .db $C8,$50,$CC,$59,$6D,$52,$EB,$58 ;; ?QPWZ?               ;
                      .db $4C,$65,$D0,$5A,$80,$5D,$39,$7F ;; ?QPWZ?               ;
                      .db $93,$7E,$A8,$65,$48,$56,$28,$57 ;; ?QPWZ?               ;
                      .db $62,$14,$46,$35,$A9,$45,$0D,$52 ;; ?QPWZ?               ;
                      .db $B1,$62,$77,$7B,$00,$00,$1E,$7B ;; ?QPWZ?               ;
                      .db $9F,$7B,$99,$7F,$F6,$7F,$FC,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$C5,$24,$49,$2D,$AD,$2D ;; ?QPWZ?               ;
                      .db $53,$22,$18,$3F,$60,$10,$81,$18 ;; ?QPWZ?               ;
                      .db $A3,$1C,$E4,$1C,$09,$29,$4B,$25 ;; ?QPWZ?               ;
                      .db $60,$09,$A4,$01,$E8,$01,$2C,$02 ;; ?QPWZ?               ;
                      .db $91,$02,$F5,$02,$FF,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $E0,$7E,$20,$7F,$80,$7F,$E0,$7F ;; ?QPWZ?               ;
                      .db $93,$73,$00,$00,$FB,$0C,$EB,$2F ;; ?QPWZ?               ;
                      .db $93,$73,$00,$00,$DD,$7F,$7F,$2D ;; ?QPWZ?               ;
                      .db $93,$73,$00,$00,$AB,$7A,$FF,$7F ;; ?QPWZ?               ;
                      .db $93,$73,$00,$00,$9B,$1E,$7F,$3B ;; ?QPWZ?               ;
                      .db $00,$00,$AF,$0D,$79,$2E,$E0,$25 ;; ?QPWZ?               ;
                      .db $1C,$2B,$20,$03,$00,$00,$6B,$2D ;; ?QPWZ?               ;
                      .db $EF,$3D,$73,$4E,$18,$63,$9C,$73 ;; ?QPWZ?               ;
                      .db $00,$00,$E9,$00,$0D,$22,$8E,$05 ;; ?QPWZ?               ;
                      .db $33,$1A,$B7,$32,$00,$00,$E0,$2D ;; ?QPWZ?               ;
                      .db $E0,$52,$7F,$15,$5F,$32,$3F,$4B ;; ?QPWZ?               ;
                      .db $00,$00,$C8,$59,$CE,$72,$CB,$39 ;; ?QPWZ?               ;
                      .db $30,$3E,$B3,$4A,$00,$00,$16,$00 ;; ?QPWZ?               ;
                      .db $1B,$00,$5F,$01,$1F,$02,$1F,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$EC,$49,$4F,$52,$B2,$5A ;; ?QPWZ?               ;
                      .db $15,$67,$DB,$7F,$00,$00,$16,$00 ;; ?QPWZ?               ;
                      .db $1B,$00,$5F,$01,$1F,$02,$1F,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$C9,$08,$4E,$19,$D3,$29 ;; ?QPWZ?               ;
                      .db $78,$3E,$1D,$53,$00,$00,$C8,$14 ;; ?QPWZ?               ;
                      .db $09,$1D,$6C,$29,$CF,$35,$32,$42 ;; ?QPWZ?               ;
                      .db $EF,$55,$B5,$6E,$F7,$76,$39,$7F ;; ?QPWZ?               ;
                      .db $7B,$7F,$BD,$7F,$00,$00,$C9,$2C ;; ?QPWZ?               ;
                      .db $4E,$41,$D3,$55,$78,$6E,$1D,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$E9,$01,$AC,$02,$2F,$03 ;; ?QPWZ?               ;
                      .db $99,$03,$FE,$53,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$8F,$3C,$D8,$61,$7F,$7E ;; ?QPWZ?               ;
                      .db $00,$00,$C5,$24,$49,$2D,$AD,$2D ;; ?QPWZ?               ;
                      .db $53,$22,$18,$3F,$00,$00,$16,$00 ;; ?QPWZ?               ;
                      .db $1B,$00,$5F,$01,$1F,$02,$1F,$03 ;; ?QPWZ?               ;
                      .db $CE,$39,$00,$00,$18,$63,$34,$7F ;; ?QPWZ?               ;
                      .db $95,$7F,$F8,$7F,$00,$00,$B7,$32 ;; ?QPWZ?               ;
                      .db $FB,$67,$00,$02,$20,$03,$E0,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$71,$0D,$3F,$7C,$9B,$1E ;; ?QPWZ?               ;
                      .db $7F,$13,$FF,$03,$00,$00,$17,$28 ;; ?QPWZ?               ;
                      .db $1F,$40,$29,$45,$AD,$59,$10,$66 ;; ?QPWZ?               ;
                      .db $00,$00,$71,$0D,$9B,$1E,$7F,$3B ;; ?QPWZ?               ;
                      .db $FF,$7F,$FF,$7F,$00,$00,$CE,$39 ;; ?QPWZ?               ;
                      .db $94,$52,$18,$63,$9C,$73,$5F,$2C ;; ?QPWZ?               ;
                      .db $00,$00,$FF,$01,$1F,$03,$FF,$03 ;; ?QPWZ?               ;
                      .db $B7,$00,$3F,$02,$00,$00,$08,$6D ;; ?QPWZ?               ;
                      .db $AD,$6D,$31,$7E,$B7,$00,$3F,$02 ;; ?QPWZ?               ;
                      .db $00,$00,$11,$00,$17,$00,$1F,$00 ;; ?QPWZ?               ;
                      .db $B7,$00,$3F,$02,$00,$00,$E0,$01 ;; ?QPWZ?               ;
                      .db $E0,$02,$E0,$03,$B7,$00,$3F,$02 ;; ?QPWZ?               ;
                      .db $5F,$63,$1D,$58,$0A,$00,$1F,$39 ;; ?QPWZ?               ;
                      .db $C4,$44,$08,$4E,$70,$67,$B6,$30 ;; ?QPWZ?               ;
                      .db $DF,$35,$FF,$03,$3F,$4F,$1D,$58 ;; ?QPWZ?               ;
                      .db $40,$11,$E0,$3F,$07,$3C,$AE,$7C ;; ?QPWZ?               ;
                      .db $B3,$7D,$00,$2F,$5F,$16,$FF,$03 ;; ?QPWZ?               ;
                      .db $5F,$63,$1D,$58,$29,$25,$FF,$7F ;; ?QPWZ?               ;
                      .db $08,$00,$17,$00,$1F,$00,$7B,$57 ;; ?QPWZ?               ;
                      .db $DF,$0D,$FF,$03,$1F,$3B,$1D,$58 ;; ?QPWZ?               ;
                      .db $29,$25,$FF,$7F,$40,$11,$E0,$01 ;; ?QPWZ?               ;
                      .db $E0,$02,$7B,$57,$DF,$0D,$FF,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$C5,$24,$49,$2D,$AD,$2D ;; ?QPWZ?               ;
                      .db $53,$22,$18,$3F,$23,$25,$C4,$35 ;; ?QPWZ?               ;
                      .db $25,$3E,$86,$46,$E7,$4E,$1F,$40 ;; ?QPWZ?               ;
                      .db $00,$00,$C6,$41,$54,$73,$FA,$7F ;; ?QPWZ?               ;
                      .db $FD,$7F,$08,$6D,$00,$00,$34,$34 ;; ?QPWZ?               ;
                      .db $3A,$44,$9F,$65,$16,$01,$7F,$02 ;; ?QPWZ?               ;
                      .db $00,$00,$C5,$24,$49,$2D,$AD,$2D ;; ?QPWZ?               ;
                      .db $53,$22,$18,$3F,$00,$00,$AE,$2D ;; ?QPWZ?               ;
                      .db $32,$3E,$B6,$4A,$F9,$52,$F3,$2C ;; ?QPWZ?               ;
                      .db $00,$00,$6B,$51,$6D,$4E,$B3,$4F ;; ?QPWZ?               ;
                      .db $BF,$30,$1D,$37,$32,$2E,$0D,$4A ;; ?QPWZ?               ;
                      .db $88,$10,$4A,$21,$6D,$29,$CF,$3D ;; ?QPWZ?               ;
                      .db $00,$00,$40,$29,$E0,$3D,$80,$52 ;; ?QPWZ?               ;
                      .db $B7,$00,$3F,$02,$00,$00,$CE,$39 ;; ?QPWZ?               ;
                      .db $94,$52,$18,$63,$B7,$00,$3F,$02 ;; ?QPWZ?               ;
                      .db $00,$00,$70,$7E,$D3,$7E,$36,$7F ;; ?QPWZ?               ;
                      .db $99,$7F,$1F,$40,$00,$00,$CE,$39 ;; ?QPWZ?               ;
                      .db $94,$52,$18,$63,$9C,$73,$5F,$2C ;; ?QPWZ?               ;
                      .db $00,$00,$DF,$4E,$DE,$5A,$BD,$66 ;; ?QPWZ?               ;
                      .db $7C,$72,$1F,$40,$00,$00,$F5,$7F ;; ?QPWZ?               ;
                      .db $F7,$7F,$F9,$7F,$FC,$7F,$FF,$7F ;; ?QPWZ?               ;
BowserEndPalette:     .db $00,$00,$FB,$63,$0C,$03,$0B,$02 ;; ?QPWZ?               ;
                      .db $35,$15,$5F,$1A                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B3CC:          .db $00,$00,$34,$34,$3A,$44,$9F,$65 ;; 00B3CC               ;
                      .db $16,$01,$7F,$02,$00,$00,$28,$12 ;; ?QPWZ?               ;
                      .db $A8,$12,$48,$13,$7B,$32,$BF,$5B ;; ?QPWZ?               ;
                      .db $60,$7D,$00,$00,$DE,$7B,$48,$13 ;; ?QPWZ?               ;
                      .db $60,$7D,$7B,$32,$BF,$37,$7F,$2D ;; ?QPWZ?               ;
                      .db $00,$00,$68,$32,$E8,$32,$48,$13 ;; ?QPWZ?               ;
                      .db $FF,$5E,$7F,$6F,$60,$7D,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$3B,$57,$A0,$7E,$F6,$01 ;; ?QPWZ?               ;
                      .db $A8,$12,$48,$13,$00,$00,$28,$12 ;; ?QPWZ?               ;
                      .db $A8,$12,$48,$13,$7B,$32,$BF,$5B ;; ?QPWZ?               ;
                      .db $28,$7E,$00,$00,$DE,$7B,$48,$13 ;; ?QPWZ?               ;
                      .db $28,$7E,$7B,$32,$BF,$37,$FF,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$12,$32,$75,$3E,$3B,$57 ;; ?QPWZ?               ;
                      .db $7B,$32,$BF,$5B,$28,$7E,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$3B,$57,$28,$7E,$7B,$32 ;; ?QPWZ?               ;
                      .db $C4,$38,$48,$13,$C7,$2C,$F0,$69 ;; ?QPWZ?               ;
                      .db $B2,$66,$D5,$67,$34,$66,$DE,$53 ;; ?QPWZ?               ;
                      .db $FF,$7F,$C7,$2C,$60,$45,$80,$66 ;; ?QPWZ?               ;
                      .db $F7,$7F,$1F,$03,$7F,$03,$FF,$47 ;; ?QPWZ?               ;
                      .db $2C,$41,$F0,$69,$B2,$66,$D5,$67 ;; ?QPWZ?               ;
                      .db $1F,$00,$FF,$7F,$C7,$2C,$C7,$2C ;; ?QPWZ?               ;
                      .db $F0,$69,$B2,$66,$D5,$67,$2C,$41 ;; ?QPWZ?               ;
                      .db $D5,$3A,$9C,$5B,$00,$00,$EC,$49 ;; ?QPWZ?               ;
                      .db $2E,$56,$F1,$62,$26,$31,$BF,$5B ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$DE,$7B,$95,$57 ;; ?QPWZ?               ;
                      .db $28,$7E,$26,$31,$BF,$37,$7F,$2D ;; ?QPWZ?               ;
                      .db $00,$00,$26,$31,$89,$3D,$EC,$49 ;; ?QPWZ?               ;
                      .db $26,$31,$BF,$5B,$28,$7E,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$3B,$57,$C6,$32,$26,$31 ;; ?QPWZ?               ;
                      .db $7F,$03,$7F,$03,$00,$00,$05,$1A ;; ?QPWZ?               ;
                      .db $C5,$0A,$EF,$22,$75,$1A,$59,$43 ;; ?QPWZ?               ;
                      .db $60,$7D,$00,$00,$39,$77,$EF,$22 ;; ?QPWZ?               ;
                      .db $60,$7D,$18,$1E,$5C,$37,$09,$7E ;; ?QPWZ?               ;
                      .db $00,$00,$60,$36,$20,$4B,$EF,$22 ;; ?QPWZ?               ;
                      .db $5A,$4E,$3A,$53,$60,$7D,$00,$00 ;; ?QPWZ?               ;
                      .db $7B,$32,$EF,$22,$19,$21,$F6,$01 ;; ?QPWZ?               ;
                      .db $E6,$2D,$A8,$36,$C7,$2C,$F0,$69 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$34,$66,$F9,$7F ;; ?QPWZ?               ;
                      .db $FF,$7F,$00,$00,$60,$45,$80,$66 ;; ?QPWZ?               ;
                      .db $F7,$7F,$1F,$03,$7F,$03,$FF,$47 ;; ?QPWZ?               ;
                      .db $2C,$41,$F0,$69,$B2,$66,$D5,$67 ;; ?QPWZ?               ;
                      .db $1F,$00,$FF,$7F,$C7,$2C,$C7,$2C ;; ?QPWZ?               ;
                      .db $F0,$69,$B2,$66,$D5,$67,$2C,$41 ;; ?QPWZ?               ;
                      .db $D5,$3A,$9C,$5B,$00,$00,$E7,$2C ;; ?QPWZ?               ;
                      .db $6B,$3D,$EF,$4D,$73,$5E,$F7,$6E ;; ?QPWZ?               ;
                      .db $FF,$7F,$F1,$7F,$BF,$01,$00,$7E ;; ?QPWZ?               ;
                      .db $BF,$03,$E0,$03,$FC,$7F,$FF,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$4F,$19,$78,$3E,$3E,$57 ;; ?QPWZ?               ;
                      .db $20,$7E,$E0,$7E,$E0,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $31,$52,$F6,$66,$9C,$7B,$85,$16 ;; ?QPWZ?               ;
                      .db $4B,$2F,$F1,$47,$00,$00,$4F,$19 ;; ?QPWZ?               ;
                      .db $78,$3E,$3E,$57,$FF,$03,$DE,$7B ;; ?QPWZ?               ;
                      .db $1F,$7C,$00,$00,$4F,$19,$78,$3E ;; ?QPWZ?               ;
                      .db $3E,$57,$7F,$2D,$4B,$2F,$F1,$47 ;; ?QPWZ?               ;
                      .db $FF,$7F,$00,$00,$71,$0D,$7F,$03 ;; ?QPWZ?               ;
                      .db $FF,$4F,$3F,$4F,$E0,$7F,$FF,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$E0,$01,$AD,$7D,$80,$03 ;; ?QPWZ?               ;
                      .db $B7,$00,$3F,$02,$FF,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $16,$00,$1F,$00,$08,$6D,$DD,$2D ;; ?QPWZ?               ;
                      .db $5F,$63,$FF,$7F,$00,$00,$80,$02 ;; ?QPWZ?               ;
                      .db $E0,$03,$08,$6D,$1A,$26,$3B,$57 ;; ?QPWZ?               ;
                      .db $FF,$7F,$00,$00,$E0,$7E,$20,$7F ;; ?QPWZ?               ;
                      .db $80,$7F,$E0,$7F,$E0,$7F,$FF,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$E0,$7E,$20,$7F,$80,$7F ;; ?QPWZ?               ;
                      .db $E0,$7F,$E0,$7F,$00,$00,$1B,$00 ;; ?QPWZ?               ;
                      .db $2D,$46,$F3,$5E,$85,$16,$4B,$2F ;; ?QPWZ?               ;
                      .db $F1,$47                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B5DE:          .db $00,$00,$E7,$2C,$6B,$3D,$EF,$4D ;; 00B5DE               ;
                      .db $73,$5E,$F7,$6E,$FF,$7F,$93,$73 ;; ?QPWZ?               ;
                      .db $00,$00,$FF,$03,$3B,$57,$93,$73 ;; ?QPWZ?               ;
                      .db $75,$3E,$12,$32,$AF,$25,$93,$73 ;; ?QPWZ?               ;
                      .db $3B,$57,$FF,$7F,$00,$00,$93,$73 ;; ?QPWZ?               ;
                      .db $00,$00,$3B,$57,$6C,$7E         ;; ?QPWZ?               ;
                                                          ;;                      ;
MorePalettes:         .db $DF                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B60D:          .db $02,$5F,$03,$FF,$27,$FF,$5F,$FF ;; 00B60D               ;
                      .db $73,$FF,$5F,$FF,$27,$5F,$03,$BF ;; ?QPWZ?               ;
                      .db $01,$1F,$00,$1B,$00,$18,$00,$18 ;; ?QPWZ?               ;
                      .db $00,$1B,$00,$1F,$00,$BF,$01,$7F ;; ?QPWZ?               ;
                      .db $43,$00,$00,$60,$7F,$3F,$17,$7F ;; ?QPWZ?               ;
                      .db $43,$00,$00,$FF,$1C,$20,$03,$7F ;; ?QPWZ?               ;
                      .db $43,$00,$00,$20,$03,$60,$7F,$7F ;; ?QPWZ?               ;
                      .db $43,$BF,$5B,$7B,$32,$E7,$08,$00 ;; ?QPWZ?               ;
                      .db $7E,$20,$7E,$A0,$7E,$E0,$7E,$20 ;; ?QPWZ?               ;
                      .db $7F,$80,$7F,$E0,$7F,$E0,$7F,$00 ;; ?QPWZ?               ;
                      .db $00,$E0,$1C,$E8,$3D,$F0,$5E,$F8 ;; ?QPWZ?               ;
                      .db $7F,$FF,$7F,$85,$16,$4B,$2F     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B66C:          .db $93,$73,$00,$00,$71,$0D,$9B,$1E ;; 00B66C               ;
                      .db $FF,$7F,$00,$00,$20,$03,$16,$00 ;; ?QPWZ?               ;
                      .db $1F,$00,$7F,$01,$9F,$02,$FF,$7F ;; ?QPWZ?               ;
                      .db $00,$00,$20,$03,$7D,$34,$1E,$55 ;; ?QPWZ?               ;
                      .db $FF,$65,$1F,$7B,$FF,$7F,$00,$00 ;; ?QPWZ?               ;
                      .db $20,$03,$80,$03,$F1,$1F,$F9,$03 ;; ?QPWZ?               ;
                      .db $FF,$4F                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B69E:          .db $FF,$7F,$C0,$18,$FB,$63,$0C,$03 ;; 00B69E               ;
                      .db $0B,$02,$35,$15,$5F,$1A,$9B,$77 ;; ?QPWZ?               ;
                      .db $60,$18,$97,$5B,$A8,$02,$A7,$01 ;; ?QPWZ?               ;
                      .db $D1,$0C,$FB,$11,$37,$6F,$00,$18 ;; ?QPWZ?               ;
                      .db $33,$53,$45,$02,$43,$01,$6E,$04 ;; ?QPWZ?               ;
                      .db $97,$09,$D3,$66,$00,$10,$CF,$4A ;; ?QPWZ?               ;
                      .db $E1,$01,$E0,$00,$0A,$00,$33,$01 ;; ?QPWZ?               ;
                      .db $6F,$5E,$00,$00,$6B,$42,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$00,$06,$00,$CF,$00,$0B,$56 ;; ?QPWZ?               ;
                      .db $00,$00,$07,$3A,$20,$01,$20,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$6B,$00,$A7,$4D,$00,$00 ;; ?QPWZ?               ;
                      .db $A3,$31,$C0,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $07,$00,$43,$45,$00,$00,$40,$29 ;; ?QPWZ?               ;
                      .db $60,$00,$00,$00,$00,$00,$03,$00 ;; ?QPWZ?               ;
TheEndPalettes:       .db $C4,$44,$20,$03,$DF,$4A,$00,$02 ;; ?QPWZ?               ;
                      .db $3B,$01,$08,$4E                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B71A:          .db $C4,$44,$1F,$39,$DF,$4A,$74,$28 ;; 00B71A               ;
                      .db $3F,$01,$08,$4E                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B726:          .db $D2,$28,$1E,$55,$5F,$63,$1F,$7B ;; 00B726               ;
                      .db $FB,$01,$DE,$02,$00,$00,$33,$15 ;; ?QPWZ?               ;
                      .db $B7,$25,$3B,$36,$AF,$25,$BF,$5B ;; ?QPWZ?               ;
                      .db $C6,$5A,$00,$00,$DE,$7B,$3B,$36 ;; ?QPWZ?               ;
                      .db $C6,$5A,$AF,$25,$BF,$37,$7F,$2D ;; ?QPWZ?               ;
                      .db $00,$00,$33,$15,$B7,$25,$3B,$36 ;; ?QPWZ?               ;
                      .db $FF,$5E,$7F,$6F,$C6,$5A,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$3B,$57,$C6,$5A,$AF,$25 ;; ?QPWZ?               ;
                      .db $A8,$12,$48,$13,$00,$00,$B7,$25 ;; ?QPWZ?               ;
                      .db $3B,$36,$BF,$46,$AF,$25,$5F,$5B ;; ?QPWZ?               ;
                      .db $C6,$5A,$00,$00,$DE,$7B,$BF,$46 ;; ?QPWZ?               ;
                      .db $C6,$5A,$AF,$25,$BF,$37,$FF,$03 ;; ?QPWZ?               ;
                      .db $00,$00,$85,$16,$4B,$2F,$F1,$47 ;; ?QPWZ?               ;
                      .db $AF,$25,$5F,$5B,$C6,$5A,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$3B,$57,$C6,$5A,$AF,$25 ;; ?QPWZ?               ;
                      .db $C4,$38,$48,$13,$E7,$1C,$F3,$19 ;; ?QPWZ?               ;
                      .db $B9,$32,$7F,$4B,$10,$76,$B9,$2E ;; ?QPWZ?               ;
                      .db $FF,$7F,$E7,$1C,$60,$45,$80,$66 ;; ?QPWZ?               ;
                      .db $F7,$7F,$1F,$03,$7F,$03,$FF,$47 ;; ?QPWZ?               ;
                      .db $E7,$1C,$F3,$19,$B9,$32,$7F,$4B ;; ?QPWZ?               ;
                      .db $1F,$00,$FF,$7F,$E7,$1C,$E7,$1C ;; ?QPWZ?               ;
                      .db $F3,$19,$B9,$32,$7F,$4B,$C6,$58 ;; ?QPWZ?               ;
                      .db $D5,$3A,$9C,$5B,$00,$00,$6D,$1D ;; ?QPWZ?               ;
                      .db $D0,$29,$33,$36,$6B,$2D,$F9,$4E ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$DE,$7B,$33,$36 ;; ?QPWZ?               ;
                      .db $82,$30,$6B,$2D,$BF,$37,$7F,$2D ;; ?QPWZ?               ;
                      .db $00,$00,$A7,$00,$2B,$15,$8E,$21 ;; ?QPWZ?               ;
                      .db $6B,$2D,$F9,$4E,$82,$30,$00,$00 ;; ?QPWZ?               ;
                      .db $DE,$7B,$F9,$4E,$82,$30,$6B,$2D ;; ?QPWZ?               ;
                      .db $82,$30,$48,$13,$00,$00,$71,$21 ;; ?QPWZ?               ;
                      .db $F5,$31,$79,$32,$F6,$41,$3B,$57 ;; ?QPWZ?               ;
                      .db $60,$7D,$00,$00,$39,$77,$79,$32 ;; ?QPWZ?               ;
                      .db $60,$7D,$18,$1E,$5C,$37,$09,$7E ;; ?QPWZ?               ;
                      .db $00,$00,$60,$36,$20,$4B,$EF,$22 ;; ?QPWZ?               ;
                      .db $7A,$52,$3A,$53,$60,$7D,$00,$00 ;; ?QPWZ?               ;
                      .db $8E,$21,$79,$32,$19,$21,$75,$3E ;; ?QPWZ?               ;
                      .db $35,$11,$98,$1D,$C7,$2C,$F0,$69 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$34,$66,$F9,$7F ;; ?QPWZ?               ;
                      .db $FF,$7F,$00,$00,$60,$45,$80,$66 ;; ?QPWZ?               ;
                      .db $F7,$7F,$1F,$03,$7F,$03,$FF,$47 ;; ?QPWZ?               ;
                      .db $2C,$41,$F0,$69,$B2,$66,$D5,$67 ;; ?QPWZ?               ;
                      .db $1F,$00,$FF,$7F,$C7,$2C,$C7,$2C ;; ?QPWZ?               ;
                      .db $F0,$69,$B2,$66,$D5,$67,$2C,$41 ;; ?QPWZ?               ;
                      .db $D5,$3A,$9C,$5B,$C0,$BF,$08,$00 ;; ?QPWZ?               ;
                      .db $80,$08                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00B888:          REP #$10                            ;; 00B888 : C2 10       ; Index (16 bit) 
CODE_00B88A:          LDY.W #$BFC0                        ;; 00B88A : A0 C0 BF    ; \  
CODE_00B88D:          STY $8A                             ;; 00B88D : 84 8A       ;  |Store the address 08/BFC0 at $8A-$8C 
CODE_00B88F:          LDA.B #$08                          ;; 00B88F : A9 08       ;  | 
CODE_00B891:          STA $8C                             ;; 00B891 : 85 8C       ; /  
CODE_00B893:          LDY.W #$2000                        ;; 00B893 : A0 00 20    ; \  
CODE_00B896:          STY $00                             ;; 00B896 : 84 00       ;  |Store the address 7E/2000 at $00-$02 
CODE_00B898:          LDA.B #$7E                          ;; 00B898 : A9 7E       ;  | 
CODE_00B89A:          STA $02                             ;; 00B89A : 85 02       ; /  
CODE_00B89C:          JSR.W CODE_00B8DE                   ;; 00B89C : 20 DE B8    ;
CODE_00B89F:          LDA.B #$7E                          ;; 00B89F : A9 7E       ; \  
CODE_00B8A1:          STA $8F                             ;; 00B8A1 : 85 8F       ;  | 
CODE_00B8A3:          REP #$30                            ;; 00B8A3 : C2 30       ;  |Store the address 7E/ACFE at $8D-$8F ; Index (16 bit) Accum (16 bit) 
CODE_00B8A5:          LDA.W #$ACFE                        ;; 00B8A5 : A9 FE AC    ;  | 
CODE_00B8A8:          STA $8D                             ;; 00B8A8 : 85 8D       ; /  
CODE_00B8AA:          LDX.W #$23FF                        ;; 00B8AA : A2 FF 23    ;
CODE_00B8AD:          LDY.W #$0008                        ;; 00B8AD : A0 08 00    ;
CODE_00B8B0:          LDA.L $7E2000,X                     ;; 00B8B0 : BF 00 20 7E ;
CODE_00B8B4:          AND.W #$00FF                        ;; 00B8B4 : 29 FF 00    ;
CODE_00B8B7:          STA [$8D]                           ;; 00B8B7 : 87 8D       ;
CODE_00B8B9:          DEX                                 ;; 00B8B9 : CA          ;
CODE_00B8BA:          DEC $8D                             ;; 00B8BA : C6 8D       ;
CODE_00B8BC:          DEC $8D                             ;; 00B8BC : C6 8D       ;
CODE_00B8BE:          DEY                                 ;; 00B8BE : 88          ;
CODE_00B8BF:          BNE CODE_00B8B0                     ;; 00B8BF : D0 EF       ;
CODE_00B8C1:          LDY.W #$0008                        ;; 00B8C1 : A0 08 00    ;
CODE_00B8C4:          DEX                                 ;; 00B8C4 : CA          ;
CODE_00B8C5:          LDA.L $7E2000,X                     ;; 00B8C5 : BF 00 20 7E ;
CODE_00B8C9:          STA [$8D]                           ;; 00B8C9 : 87 8D       ;
CODE_00B8CB:          DEX                                 ;; 00B8CB : CA          ;
CODE_00B8CC:          BMI CODE_00B8D7                     ;; 00B8CC : 30 09       ;
CODE_00B8CE:          DEC $8D                             ;; 00B8CE : C6 8D       ;
CODE_00B8D0:          DEC $8D                             ;; 00B8D0 : C6 8D       ;
CODE_00B8D2:          DEY                                 ;; 00B8D2 : 88          ;
CODE_00B8D3:          BNE CODE_00B8C4                     ;; 00B8D3 : D0 EF       ;
CODE_00B8D5:          BRA CODE_00B8AD                     ;; 00B8D5 : 80 D6       ;
                                                          ;;                      ;
CODE_00B8D7:          LDA.W #$8000                        ;; 00B8D7 : A9 00 80    ;
CODE_00B8DA:          STA $8A                             ;; 00B8DA : 85 8A       ;
CODE_00B8DC:          SEP #$20                            ;; 00B8DC : E2 20       ; Accum (8 bit) 
CODE_00B8DE:          REP #$10                            ;; 00B8DE : C2 10       ; Index (16 bit) 
CODE_00B8E0:          LDY.W #$0000                        ;; 00B8E0 : A0 00 00    ; \  
CODE_00B8E3:          JSR.W ReadByte                      ;; 00B8E3 : 20 83 B9    ;  | 
CODE_00B8E6:          CMP.B #$FF                          ;; 00B8E6 : C9 FF       ;  |If the next byte is xFF, return. 
CODE_00B8E8:          BNE CODE_00B8ED                     ;; 00B8E8 : D0 03       ;  |Compressed graphics files ends with xFF IIRC 
CODE_00B8EA:          SEP #$10                            ;; 00B8EA : E2 10       ;  | ; Index (8 bit) 
Return00B8EC:         RTS                                 ;; ?QPWZ? : 60          ; /  
                                                          ;;                      ;
CODE_00B8ED:          STA $8F                             ;; 00B8ED : 85 8F       ;
CODE_00B8EF:          AND.B #$E0                          ;; 00B8EF : 29 E0       ;
CODE_00B8F1:          CMP.B #$E0                          ;; 00B8F1 : C9 E0       ;
CODE_00B8F3:          BEQ CODE_00B8FF                     ;; 00B8F3 : F0 0A       ;
CODE_00B8F5:          PHA                                 ;; 00B8F5 : 48          ;
CODE_00B8F6:          LDA $8F                             ;; 00B8F6 : A5 8F       ;
CODE_00B8F8:          REP #$20                            ;; 00B8F8 : C2 20       ; Accum (16 bit) 
CODE_00B8FA:          AND.W #$001F                        ;; 00B8FA : 29 1F 00    ;
CODE_00B8FD:          BRA CODE_00B911                     ;; 00B8FD : 80 12       ;
                                                          ;;                      ;
CODE_00B8FF:          LDA $8F                             ;; 00B8FF : A5 8F       ; Accum (8 bit) 
CODE_00B901:          ASL                                 ;; 00B901 : 0A          ;
CODE_00B902:          ASL                                 ;; 00B902 : 0A          ;
CODE_00B903:          ASL                                 ;; 00B903 : 0A          ;
CODE_00B904:          AND.B #$E0                          ;; 00B904 : 29 E0       ;
CODE_00B906:          PHA                                 ;; 00B906 : 48          ;
CODE_00B907:          LDA $8F                             ;; 00B907 : A5 8F       ;
CODE_00B909:          AND.B #$03                          ;; 00B909 : 29 03       ;
CODE_00B90B:          XBA                                 ;; 00B90B : EB          ;
CODE_00B90C:          JSR.W ReadByte                      ;; 00B90C : 20 83 B9    ;
CODE_00B90F:          REP #$20                            ;; 00B90F : C2 20       ; Accum (16 bit) 
CODE_00B911:          INC A                               ;; 00B911 : 1A          ;
CODE_00B912:          STA $8D                             ;; 00B912 : 85 8D       ;
CODE_00B914:          SEP #$20                            ;; 00B914 : E2 20       ; Accum (8 bit) 
CODE_00B916:          PLA                                 ;; 00B916 : 68          ;
CODE_00B917:          BEQ CODE_00B930                     ;; 00B917 : F0 17       ;
CODE_00B919:          BMI CODE_00B966                     ;; 00B919 : 30 4B       ;
CODE_00B91B:          ASL                                 ;; 00B91B : 0A          ;
CODE_00B91C:          BPL CODE_00B93F                     ;; 00B91C : 10 21       ;
CODE_00B91E:          ASL                                 ;; 00B91E : 0A          ;
CODE_00B91F:          BPL CODE_00B94C                     ;; 00B91F : 10 2B       ;
CODE_00B921:          JSR.W ReadByte                      ;; 00B921 : 20 83 B9    ;
CODE_00B924:          LDX $8D                             ;; 00B924 : A6 8D       ;
CODE_00B926:          STA [$00],Y                         ;; 00B926 : 97 00       ;
CODE_00B928:          INC A                               ;; 00B928 : 1A          ;
CODE_00B929:          INY                                 ;; 00B929 : C8          ;
CODE_00B92A:          DEX                                 ;; 00B92A : CA          ;
CODE_00B92B:          BNE CODE_00B926                     ;; 00B92B : D0 F9       ;
CODE_00B92D:          JMP.W CODE_00B8E3                   ;; 00B92D : 4C E3 B8    ;
                                                          ;;                      ;
CODE_00B930:          JSR.W ReadByte                      ;; 00B930 : 20 83 B9    ;
CODE_00B933:          STA [$00],Y                         ;; 00B933 : 97 00       ;
CODE_00B935:          INY                                 ;; 00B935 : C8          ;
CODE_00B936:          LDX $8D                             ;; 00B936 : A6 8D       ;
CODE_00B938:          DEX                                 ;; 00B938 : CA          ;
CODE_00B939:          STX $8D                             ;; 00B939 : 86 8D       ;
CODE_00B93B:          BNE CODE_00B930                     ;; 00B93B : D0 F3       ;
CODE_00B93D:          BRA CODE_00B8E3                     ;; 00B93D : 80 A4       ;
                                                          ;;                      ;
CODE_00B93F:          JSR.W ReadByte                      ;; 00B93F : 20 83 B9    ;
CODE_00B942:          LDX $8D                             ;; 00B942 : A6 8D       ;
CODE_00B944:          STA [$00],Y                         ;; 00B944 : 97 00       ;
CODE_00B946:          INY                                 ;; 00B946 : C8          ;
CODE_00B947:          DEX                                 ;; 00B947 : CA          ;
CODE_00B948:          BNE CODE_00B944                     ;; 00B948 : D0 FA       ;
CODE_00B94A:          BRA CODE_00B8E3                     ;; 00B94A : 80 97       ;
                                                          ;;                      ;
CODE_00B94C:          JSR.W ReadByte                      ;; 00B94C : 20 83 B9    ;
CODE_00B94F:          XBA                                 ;; 00B94F : EB          ;
CODE_00B950:          JSR.W ReadByte                      ;; 00B950 : 20 83 B9    ;
CODE_00B953:          LDX $8D                             ;; 00B953 : A6 8D       ;
CODE_00B955:          XBA                                 ;; 00B955 : EB          ;
CODE_00B956:          STA [$00],Y                         ;; 00B956 : 97 00       ;
CODE_00B958:          INY                                 ;; 00B958 : C8          ;
CODE_00B959:          DEX                                 ;; 00B959 : CA          ;
CODE_00B95A:          BEQ CODE_00B963                     ;; 00B95A : F0 07       ;
CODE_00B95C:          XBA                                 ;; 00B95C : EB          ;
CODE_00B95D:          STA [$00],Y                         ;; 00B95D : 97 00       ;
CODE_00B95F:          INY                                 ;; 00B95F : C8          ;
CODE_00B960:          DEX                                 ;; 00B960 : CA          ;
CODE_00B961:          BNE CODE_00B955                     ;; 00B961 : D0 F2       ;
CODE_00B963:          JMP.W CODE_00B8E3                   ;; 00B963 : 4C E3 B8    ;
                                                          ;;                      ;
CODE_00B966:          JSR.W ReadByte                      ;; 00B966 : 20 83 B9    ;
CODE_00B969:          XBA                                 ;; 00B969 : EB          ;
CODE_00B96A:          JSR.W ReadByte                      ;; 00B96A : 20 83 B9    ;
CODE_00B96D:          TAX                                 ;; 00B96D : AA          ;
CODE_00B96E:          PHY                                 ;; 00B96E : 5A          ;
CODE_00B96F:          TXY                                 ;; 00B96F : 9B          ;
CODE_00B970:          LDA [$00],Y                         ;; 00B970 : B7 00       ;
CODE_00B972:          TYX                                 ;; 00B972 : BB          ;
CODE_00B973:          PLY                                 ;; 00B973 : 7A          ;
CODE_00B974:          STA [$00],Y                         ;; 00B974 : 97 00       ;
CODE_00B976:          INY                                 ;; 00B976 : C8          ;
CODE_00B977:          INX                                 ;; 00B977 : E8          ;
CODE_00B978:          REP #$20                            ;; 00B978 : C2 20       ; Accum (16 bit) 
CODE_00B97A:          DEC $8D                             ;; 00B97A : C6 8D       ;
CODE_00B97C:          SEP #$20                            ;; 00B97C : E2 20       ; Accum (8 bit) 
CODE_00B97E:          BNE CODE_00B96E                     ;; 00B97E : D0 EE       ;
CODE_00B980:          JMP.W CODE_00B8E3                   ;; 00B980 : 4C E3 B8    ;
                                                          ;;                      ;
ReadByte:             LDA [$8A]                           ;; ?QPWZ? : A7 8A       ; Read the byte ; Index (16 bit) 
CODE_00B985:          LDX $8A                             ;; 00B985 : A6 8A       ; \ Go to next byte 
CODE_00B987:          INX                                 ;; 00B987 : E8          ;  | 
CODE_00B988:          BNE CODE_00B98F                     ;; 00B988 : D0 05       ;  |   \  
CODE_00B98A:          LDX.W #$8000                        ;; 00B98A : A2 00 80    ;  |    |Handle bank crossing 
CODE_00B98D:          INC $8C                             ;; 00B98D : E6 8C       ;  |   /  
CODE_00B98F:          STX $8A                             ;; 00B98F : 86 8A       ; /  
Return00B991:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00B992:          .db $F9,$31,$BB,$52,$7D,$63,$6C,$10 ;; 00B992               ;
                      .db $57,$A1,$15,$9C,$63,$D2,$CB,$E5 ;; ?QPWZ?               ;
                      .db $1E,$AF,$BD,$10,$48,$E8,$74,$B4 ;; ?QPWZ?               ;
                      .db $AD,$E4,$80,$66,$7E,$88,$7F,$43 ;; ?QPWZ?               ;
                      .db $A1,$65,$CD,$CA,$E5,$B5,$21,$44 ;; ?QPWZ?               ;
                      .db $6C,$A3,$7B,$F0,$B9,$06,$36,$85 ;; ?QPWZ?               ;
                      .db $BB,$00                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B9C4:          .db $D9,$E2,$EC,$F5,$FF,$89,$93,$9D ;; 00B9C4               ;
                      .db $A6,$AF,$BA,$C3,$CD,$D5,$DD,$E6 ;; ?QPWZ?               ;
                      .db $EF,$F7,$FF,$89,$93,$9A,$A3,$A9 ;; ?QPWZ?               ;
                      .db $B2,$BB,$C3,$CC,$D4,$DC,$E6,$EE ;; ?QPWZ?               ;
                      .db $F6,$FF,$88,$91,$9A,$A3,$AE,$B7 ;; ?QPWZ?               ;
                      .db $C0,$C6,$CB,$D0,$D7,$E0,$E9,$F1 ;; ?QPWZ?               ;
                      .db $F3,$F8                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00B9F6:          .db $08,$08,$08,$08,$08,$09,$09,$09 ;; 00B9F6               ;
                      .db $09,$09,$09,$09,$09,$09,$09,$09 ;; ?QPWZ?               ;
                      .db $09,$09,$09,$0A,$0A,$0A,$0A,$0A ;; ?QPWZ?               ;
                      .db $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A ;; ?QPWZ?               ;
                      .db $0A,$0A,$0B,$0B,$0B,$0B,$0B,$0B ;; ?QPWZ?               ;
                      .db $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B ;; ?QPWZ?               ;
                      .db $0B,$0B                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00BA28:          PHB                                 ;; 00BA28 : 8B          ; Accum (8 bit) 
CODE_00BA29:          PHY                                 ;; 00BA29 : 5A          ;
CODE_00BA2A:          PHK                                 ;; 00BA2A : 4B          ;
CODE_00BA2B:          PLB                                 ;; 00BA2B : AB          ;
CODE_00BA2C:          LDA.W DATA_00B992,Y                 ;; 00BA2C : B9 92 B9    ;
CODE_00BA2F:          STA $8A                             ;; 00BA2F : 85 8A       ;
CODE_00BA31:          LDA.W DATA_00B9C4,Y                 ;; 00BA31 : B9 C4 B9    ;
CODE_00BA34:          STA $8B                             ;; 00BA34 : 85 8B       ;
CODE_00BA36:          LDA.W DATA_00B9F6,Y                 ;; 00BA36 : B9 F6 B9    ;
CODE_00BA39:          STA $8C                             ;; 00BA39 : 85 8C       ;
CODE_00BA3B:          LDA.B #$00                          ;; 00BA3B : A9 00       ;
CODE_00BA3D:          STA $00                             ;; 00BA3D : 85 00       ;
CODE_00BA3F:          LDA.B #$AD                          ;; 00BA3F : A9 AD       ;
CODE_00BA41:          STA $01                             ;; 00BA41 : 85 01       ;
CODE_00BA43:          LDA.B #$7E                          ;; 00BA43 : A9 7E       ;
CODE_00BA45:          STA $02                             ;; 00BA45 : 85 02       ;
CODE_00BA47:          JSR.W CODE_00B8DE                   ;; 00BA47 : 20 DE B8    ;
CODE_00BA4A:          PLY                                 ;; 00BA4A : 7A          ;
CODE_00BA4B:          PLB                                 ;; 00BA4B : AB          ;
Return00BA4C:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00BA4D:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; 00BA4D               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF                     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BA60:          .db $00,$B0,$60,$10,$C0,$70,$20,$D0 ;; 00BA60               ;
                      .db $80,$30,$E0,$90,$40,$F0,$A0,$50 ;; ?QPWZ?               ;
DATA_00BA70:          .db $00,$B0,$60,$10,$C0,$70,$20,$D0 ;; 00BA70               ;
                      .db $80,$30,$E0,$90,$40,$F0,$A0,$50 ;; ?QPWZ?               ;
DATA_00BA80:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00BA80               ;
                      .db $00,$00,$00,$00,$00,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BA8E:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00BA8E               ;
                      .db $00,$00,$00,$00,$00,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BA9C:          .db $C8,$C9,$CB,$CD,$CE,$D0,$D2,$D3 ;; 00BA9C               ;
                      .db $D5,$D7,$D8,$DA,$DC,$DD,$DF,$E1 ;; ?QPWZ?               ;
DATA_00BAAC:          .db $E3,$E4,$E6,$E8,$E9,$EB,$ED,$EE ;; 00BAAC               ;
                      .db $F0,$F2,$F3,$F5,$F7,$F8,$FA,$FC ;; ?QPWZ?               ;
DATA_00BABC:          .db $C8,$CA,$CC,$CE,$D0,$D2,$D4,$D6 ;; 00BABC               ;
                      .db $D8,$DA,$DC,$DE,$E0,$E2         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BACA:          .db $E4,$E6,$E8,$EA,$EC,$EE,$F0,$F2 ;; 00BACA               ;
                      .db $F4,$F6,$F8,$FA,$FC,$FE         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BAD8:          .db $00,$C8,$7E,$B0,$C9,$7E,$60,$CB ;; 00BAD8               ;
                      .db $7E,$10,$CD,$7E,$C0,$CE,$7E,$70 ;; ?QPWZ?               ;
                      .db $D0,$7E,$20,$D2,$7E,$D0,$D3,$7E ;; ?QPWZ?               ;
                      .db $80,$D5,$7E,$30,$D7,$7E,$E0,$D8 ;; ?QPWZ?               ;
                      .db $7E,$90,$DA,$7E,$40,$DC,$7E,$F0 ;; ?QPWZ?               ;
                      .db $DD,$7E,$A0,$DF,$7E,$50,$E1,$7E ;; ?QPWZ?               ;
DATA_00BB08:          .db $00,$E3,$7E,$B0,$E4,$7E,$60,$E6 ;; 00BB08               ;
                      .db $7E,$10,$E8,$7E,$C0,$E9,$7E,$70 ;; ?QPWZ?               ;
                      .db $EB,$7E,$20,$ED,$7E,$D0,$EE,$7E ;; ?QPWZ?               ;
                      .db $80,$F0,$7E,$30,$F2,$7E,$E0,$F3 ;; ?QPWZ?               ;
                      .db $7E,$90,$F5,$7E,$40,$F7,$7E,$F0 ;; ?QPWZ?               ;
                      .db $F8,$7E,$A0,$FA,$7E,$50,$FC,$7E ;; ?QPWZ?               ;
DATA_00BB38:          .db $00,$C8,$7E,$00,$CA,$7E,$00,$CC ;; 00BB38               ;
                      .db $7E,$00,$CE,$7E,$00,$D0,$7E,$00 ;; ?QPWZ?               ;
                      .db $D2,$7E,$00,$D4,$7E,$00,$D6,$7E ;; ?QPWZ?               ;
                      .db $00,$D8,$7E,$00,$DA,$7E,$00,$DC ;; ?QPWZ?               ;
                      .db $7E,$00,$DE,$7E,$00,$E0,$7E,$00 ;; ?QPWZ?               ;
                      .db $E2,$7E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BB62:          .db $00,$E3,$7E,$B0,$E4,$7E,$60,$E6 ;; 00BB62               ;
                      .db $7E,$10,$E8,$7E,$C0,$E9,$7E,$70 ;; ?QPWZ?               ;
                      .db $EB,$7E,$20,$ED,$7E,$D0,$EE,$7E ;; ?QPWZ?               ;
                      .db $80,$F0,$7E,$30,$F2,$7E,$E0,$F3 ;; ?QPWZ?               ;
                      .db $7E,$90,$F5,$7E,$40,$F7,$7E,$F0 ;; ?QPWZ?               ;
                      .db $F8,$7E,$A0,$FA,$7E,$50,$FC,$7E ;; ?QPWZ?               ;
DATA_00BB92:          .db $00,$C8,$7E,$B0,$C9,$7E,$60,$CB ;; 00BB92               ;
                      .db $7E,$10,$CD,$7E,$C0,$CE,$7E,$70 ;; ?QPWZ?               ;
                      .db $D0,$7E,$20,$D2,$7E,$D0,$D3,$7E ;; ?QPWZ?               ;
                      .db $80,$D5,$7E,$30,$D7,$7E,$E0,$D8 ;; ?QPWZ?               ;
                      .db $7E,$90,$DA,$7E,$40,$DC,$7E,$F0 ;; ?QPWZ?               ;
                      .db $DD,$7E,$A0,$DF,$7E,$50,$E1,$7E ;; ?QPWZ?               ;
DATA_00BBC2:          .db $00,$E4,$7E,$00,$E6,$7E,$00,$E8 ;; 00BBC2               ;
                      .db $7E,$00,$EA,$7E,$00,$EC,$7E,$00 ;; ?QPWZ?               ;
                      .db $EE,$7E,$00,$F0,$7E,$00,$F2,$7E ;; ?QPWZ?               ;
                      .db $00,$F4,$7E,$00,$F6,$7E,$00,$F8 ;; ?QPWZ?               ;
                      .db $7E,$00,$FA,$7E,$00,$FC,$7E,$00 ;; ?QPWZ?               ;
                      .db $FE,$7E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BBEC:          .db $00,$C8,$7E,$00,$CA,$7E,$00,$CC ;; 00BBEC               ;
                      .db $7E,$00,$CE,$7E,$00,$D0,$7E,$00 ;; ?QPWZ?               ;
                      .db $D2,$7E,$00,$D4,$7E,$00,$D6,$7E ;; ?QPWZ?               ;
                      .db $00,$D8,$7E,$00,$DA,$7E,$00,$DC ;; ?QPWZ?               ;
                      .db $7E,$00,$DE,$7E,$00,$E0,$7E,$00 ;; ?QPWZ?               ;
                      .db $E2,$7E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BC16:          .db $00,$E4,$7E,$00,$E6,$7E,$00,$E8 ;; 00BC16               ;
                      .db $7E,$00,$EA,$7E,$00,$EC,$7E,$00 ;; ?QPWZ?               ;
                      .db $EE,$7E,$00,$F0,$7E,$00,$F2,$7E ;; ?QPWZ?               ;
                      .db $00,$F4,$7E,$00,$F6,$7E,$00,$F8 ;; ?QPWZ?               ;
                      .db $7E,$00,$FA,$7E,$00,$FC,$7E,$00 ;; ?QPWZ?               ;
                      .db $FE,$7E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BC40:          .db $00,$C8,$7F,$B0,$C9,$7F,$60,$CB ;; 00BC40               ;
                      .db $7F,$10,$CD,$7F,$C0,$CE,$7F,$70 ;; ?QPWZ?               ;
                      .db $D0,$7F,$20,$D2,$7F,$D0,$D3,$7F ;; ?QPWZ?               ;
                      .db $80,$D5,$7F,$30,$D7,$7F,$E0,$D8 ;; ?QPWZ?               ;
                      .db $7F,$90,$DA,$7F,$40,$DC,$7F,$F0 ;; ?QPWZ?               ;
                      .db $DD,$7F,$A0,$DF,$7F,$50,$E1,$7F ;; ?QPWZ?               ;
DATA_00BC70:          .db $00,$E3,$7F,$B0,$E4,$7F,$60,$E6 ;; 00BC70               ;
                      .db $7F,$10,$E8,$7F,$C0,$E9,$7F,$70 ;; ?QPWZ?               ;
                      .db $EB,$7F,$20,$ED,$7F,$D0,$EE,$7F ;; ?QPWZ?               ;
                      .db $80,$F0,$7F,$30,$F2,$7F,$E0,$F3 ;; ?QPWZ?               ;
                      .db $7F,$90,$F5,$7F,$40,$F7,$7F,$F0 ;; ?QPWZ?               ;
                      .db $F8,$7F,$A0,$FA,$7F,$50,$FC,$7F ;; ?QPWZ?               ;
DATA_00BCA0:          .db $00,$C8,$7F,$00,$CA,$7F,$00,$CC ;; 00BCA0               ;
                      .db $7F,$00,$CE,$7F,$00,$D0,$7F,$00 ;; ?QPWZ?               ;
                      .db $D2,$7F,$00,$D4,$7F,$00,$D6,$7F ;; ?QPWZ?               ;
                      .db $00,$D8,$7F,$00,$DA,$7F,$00,$DC ;; ?QPWZ?               ;
                      .db $7F,$00,$DE,$7F,$00,$E0,$7F,$00 ;; ?QPWZ?               ;
                      .db $E2,$7F                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BCCA:          .db $00,$E3,$7F,$B0,$E4,$7F,$60,$E6 ;; 00BCCA               ;
                      .db $7F,$10,$E8,$7F,$C0,$E9,$7F,$70 ;; ?QPWZ?               ;
                      .db $EB,$7F,$20,$ED,$7F,$D0,$EE,$7F ;; ?QPWZ?               ;
                      .db $80,$F0,$7F,$30,$F2,$7F,$E0,$F3 ;; ?QPWZ?               ;
                      .db $7F,$90,$F5,$7F,$40,$F7,$7F,$F0 ;; ?QPWZ?               ;
                      .db $F8,$7F,$A0,$FA,$7F,$50,$FC,$7F ;; ?QPWZ?               ;
DATA_00BCFA:          .db $00,$C8,$7F,$B0,$C9,$7F,$60,$CB ;; 00BCFA               ;
                      .db $7F,$10,$CD,$7F,$C0,$CE,$7F,$70 ;; ?QPWZ?               ;
                      .db $D0,$7F,$20,$D2,$7F,$D0,$D3,$7F ;; ?QPWZ?               ;
                      .db $80,$D5,$7F,$30,$D7,$7F,$E0,$D8 ;; ?QPWZ?               ;
                      .db $7F,$90,$DA,$7F,$40,$DC,$7F,$F0 ;; ?QPWZ?               ;
                      .db $DD,$7F,$A0,$DF,$7F,$50,$E1,$7F ;; ?QPWZ?               ;
DATA_00BD2A:          .db $00,$E4,$7F,$00,$E6,$7F,$00,$E8 ;; 00BD2A               ;
                      .db $7F,$00,$EA,$7F,$00,$EC,$7F,$00 ;; ?QPWZ?               ;
                      .db $EE,$7F,$00,$F0,$7F,$00,$F2,$7F ;; ?QPWZ?               ;
                      .db $00,$F4,$7F,$00,$F6,$7F,$00,$F8 ;; ?QPWZ?               ;
                      .db $7F,$00,$FA,$7F,$00,$FC,$7F,$00 ;; ?QPWZ?               ;
                      .db $FE,$7F                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BD54:          .db $00,$C8,$7F,$00,$CA,$7F,$00,$CC ;; 00BD54               ;
                      .db $7F,$00,$CE,$7F,$00,$D0,$7F,$00 ;; ?QPWZ?               ;
                      .db $D2,$7F,$00,$D4,$7F,$00,$D6,$7F ;; ?QPWZ?               ;
                      .db $00,$D8,$7F,$00,$DA,$7F,$00,$DC ;; ?QPWZ?               ;
                      .db $7F,$00,$DE,$7F,$00,$E0,$7F,$00 ;; ?QPWZ?               ;
                      .db $E2,$7F                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00BD7E:          .db $00,$E4,$7F,$00,$E6,$7F,$00,$E8 ;; 00BD7E               ;
                      .db $7F,$00,$EA,$7F,$00,$EC,$7F,$00 ;; ?QPWZ?               ;
                      .db $EE,$7F,$00,$F0,$7F,$00,$F2,$7F ;; ?QPWZ?               ;
                      .db $00,$F4,$7F,$00,$F6,$7F,$00,$F8 ;; ?QPWZ?               ;
                      .db $7F,$00,$FA,$7F,$00,$FC,$7F,$00 ;; ?QPWZ?               ;
                      .db $FE,$7F                         ;; ?QPWZ?               ;
                                                          ;;                      ;
Ptrs00BDA8:           .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BB38                     ;; ?QPWZ? : 38 BB       ;
                      .dw DATA_00BB38                     ;; ?QPWZ? : 38 BB       ;
                      .dw DATA_00BB92                     ;; ?QPWZ? : 92 BB       ;
                      .dw DATA_00BB92                     ;; ?QPWZ? : 92 BB       ;
                      .dw DATA_00BBEC                     ;; ?QPWZ? : EC BB       ;
                      .dw DATA_00BBEC                     ;; ?QPWZ? : EC BB       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BBEC                     ;; ?QPWZ? : EC BB       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BBEC                     ;; ?QPWZ? : EC BB       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                      .dw DATA_00BAD8                     ;; ?QPWZ? : D8 BA       ;
                                                          ;;                      ;
Ptrs00BDE8:           .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BB62                     ;; ?QPWZ? : 62 BB       ;
                      .dw DATA_00BB62                     ;; ?QPWZ? : 62 BB       ;
                      .dw DATA_00BBC2                     ;; ?QPWZ? : C2 BB       ;
                      .dw DATA_00BBC2                     ;; ?QPWZ? : C2 BB       ;
                      .dw DATA_00BC16                     ;; ?QPWZ? : 16 BC       ;
                      .dw DATA_00BC16                     ;; ?QPWZ? : 16 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC16                     ;; ?QPWZ? : 16 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BC16                     ;; ?QPWZ? : 16 BC       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                      .dw DATA_00BB08                     ;; ?QPWZ? : 08 BB       ;
                                                          ;;                      ;
Ptrs00BE28:           .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BCA0                     ;; ?QPWZ? : A0 BC       ;
                      .dw DATA_00BCA0                     ;; ?QPWZ? : A0 BC       ;
                      .dw DATA_00BCFA                     ;; ?QPWZ? : FA BC       ;
                      .dw DATA_00BCFA                     ;; ?QPWZ? : FA BC       ;
                      .dw DATA_00BD54                     ;; ?QPWZ? : 54 BD       ;
                      .dw DATA_00BD54                     ;; ?QPWZ? : 54 BD       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BD54                     ;; ?QPWZ? : 54 BD       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BD54                     ;; ?QPWZ? : 54 BD       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                      .dw DATA_00BC40                     ;; ?QPWZ? : 40 BC       ;
                                                          ;;                      ;
Ptrs00BE68:           .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BCCA                     ;; ?QPWZ? : CA BC       ;
                      .dw DATA_00BCCA                     ;; ?QPWZ? : CA BC       ;
                      .dw DATA_00BD2A                     ;; ?QPWZ? : 2A BD       ;
                      .dw DATA_00BD2A                     ;; ?QPWZ? : 2A BD       ;
                      .dw DATA_00BD7E                     ;; ?QPWZ? : 7E BD       ;
                      .dw DATA_00BD7E                     ;; ?QPWZ? : 7E BD       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BD7E                     ;; ?QPWZ? : 7E BD       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BD7E                     ;; ?QPWZ? : 7E BD       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw $0000                           ;; ?QPWZ? : 00 00       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                      .dw DATA_00BC70                     ;; ?QPWZ? : 70 BC       ;
                                                          ;;                      ;
LoadBlkPtrs:          .dw Ptrs00BDA8                      ;; ?QPWZ? : A8 BD       ;
                      .dw Ptrs00BDE8                      ;; ?QPWZ? : E8 BD       ;
LoadBlkTable2:        .dw Ptrs00BE28                      ;; ?QPWZ? : 28 BE       ;
                      .dw Ptrs00BE68                      ;; ?QPWZ? : 68 BE       ;
                                                          ;;                      ;
GenerateTile:         PHP                                 ;; ?QPWZ? : 08          ;
CODE_00BEB1:          REP #$30                            ;; 00BEB1 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00BEB3:          PHX                                 ;; 00BEB3 : DA          ;
CODE_00BEB4:          LDA RAM_BlockBlock                  ;; 00BEB4 : A5 9C       ;
CODE_00BEB6:          AND.W #$00FF                        ;; 00BEB6 : 29 FF 00    ;
CODE_00BEB9:          BNE CODE_00BEBE                     ;; 00BEB9 : D0 03       ;
ADDR_00BEBB:          JMP.W CODE_00BFB9                   ;; 00BEBB : 4C B9 BF    ;
                                                          ;;                      ;
CODE_00BEBE:          LDA RAM_BlockYLo                    ;; 00BEBE : A5 9A       ;
CODE_00BEC0:          STA $0C                             ;; 00BEC0 : 85 0C       ;
CODE_00BEC2:          LDA RAM_BlockXLo                    ;; 00BEC2 : A5 98       ;
CODE_00BEC4:          STA $0E                             ;; 00BEC4 : 85 0E       ;
CODE_00BEC6:          LDA.W #$0000                        ;; 00BEC6 : A9 00 00    ;
CODE_00BEC9:          SEP #$20                            ;; 00BEC9 : E2 20       ; Accum (8 bit) 
CODE_00BECB:          LDA RAM_IsVerticalLvl               ;; 00BECB : A5 5B       ;
CODE_00BECD:          STA $09                             ;; 00BECD : 85 09       ;
CODE_00BECF:          LDA.W $1933                         ;; 00BECF : AD 33 19    ;
CODE_00BED2:          BEQ CODE_00BED6                     ;; 00BED2 : F0 02       ;
ADDR_00BED4:          LSR $09                             ;; 00BED4 : 46 09       ;
CODE_00BED6:          LDY $0E                             ;; 00BED6 : A4 0E       ;
CODE_00BED8:          LDA $09                             ;; 00BED8 : A5 09       ;
CODE_00BEDA:          AND.B #$01                          ;; 00BEDA : 29 01       ;
CODE_00BEDC:          BEQ CODE_00BEEC                     ;; 00BEDC : F0 0E       ;
CODE_00BEDE:          LDA RAM_BlockYHi                    ;; 00BEDE : A5 9B       ;
CODE_00BEE0:          STA $00                             ;; 00BEE0 : 85 00       ;
CODE_00BEE2:          LDA RAM_BlockXHi                    ;; 00BEE2 : A5 99       ;
CODE_00BEE4:          STA RAM_BlockYHi                    ;; 00BEE4 : 85 9B       ;
CODE_00BEE6:          LDA $00                             ;; 00BEE6 : A5 00       ;
CODE_00BEE8:          STA RAM_BlockXHi                    ;; 00BEE8 : 85 99       ;
CODE_00BEEA:          LDY $0C                             ;; 00BEEA : A4 0C       ;
CODE_00BEEC:          CPY.W #$0200                        ;; 00BEEC : C0 00 02    ;
CODE_00BEEF:          BCS ADDR_00BEBB                     ;; 00BEEF : B0 CA       ;
CODE_00BEF1:          LDA.W $1933                         ;; 00BEF1 : AD 33 19    ;
CODE_00BEF4:          ASL                                 ;; 00BEF4 : 0A          ;
CODE_00BEF5:          TAX                                 ;; 00BEF5 : AA          ;
CODE_00BEF6:          LDA.L LoadBlkPtrs,X                 ;; 00BEF6 : BF A8 BE 00 ; Set low byte of pointer 
CODE_00BEFA:          STA $65                             ;; 00BEFA : 85 65       ;
CODE_00BEFC:          LDA.L LoadBlkPtrs+1,X               ;; 00BEFC : BF A9 BE 00 ; Set middle byte of pointer 
CODE_00BF00:          STA $66                             ;; 00BF00 : 85 66       ;
CODE_00BF02:          STZ $67                             ;; 00BF02 : 64 67       ; High byte of pointer = #$00 
CODE_00BF04:          LDA.W $1925                         ;; 00BF04 : AD 25 19    ;
CODE_00BF07:          ASL                                 ;; 00BF07 : 0A          ;
CODE_00BF08:          TAY                                 ;; 00BF08 : A8          ;
CODE_00BF09:          LDA [$65],Y                         ;; 00BF09 : B7 65       ;
CODE_00BF0B:          STA $04                             ;; 00BF0B : 85 04       ;
CODE_00BF0D:          INY                                 ;; 00BF0D : C8          ;
CODE_00BF0E:          LDA [$65],Y                         ;; 00BF0E : B7 65       ;
CODE_00BF10:          STA $05                             ;; 00BF10 : 85 05       ;
CODE_00BF12:          STZ $06                             ;; 00BF12 : 64 06       ;
CODE_00BF14:          LDA RAM_BlockYHi                    ;; 00BF14 : A5 9B       ;
CODE_00BF16:          STA $07                             ;; 00BF16 : 85 07       ;
CODE_00BF18:          ASL                                 ;; 00BF18 : 0A          ;
CODE_00BF19:          CLC                                 ;; 00BF19 : 18          ;
CODE_00BF1A:          ADC $07                             ;; 00BF1A : 65 07       ;
CODE_00BF1C:          TAY                                 ;; 00BF1C : A8          ;
CODE_00BF1D:          LDA [$04],Y                         ;; 00BF1D : B7 04       ;
CODE_00BF1F:          STA $6B                             ;; 00BF1F : 85 6B       ;
CODE_00BF21:          STA $6E                             ;; 00BF21 : 85 6E       ;
CODE_00BF23:          INY                                 ;; 00BF23 : C8          ;
CODE_00BF24:          LDA [$04],Y                         ;; 00BF24 : B7 04       ;
CODE_00BF26:          STA $6C                             ;; 00BF26 : 85 6C       ;
CODE_00BF28:          STA $6F                             ;; 00BF28 : 85 6F       ;
CODE_00BF2A:          LDA.B #$7E                          ;; 00BF2A : A9 7E       ;
CODE_00BF2C:          STA $6D                             ;; 00BF2C : 85 6D       ;
CODE_00BF2E:          INC A                               ;; 00BF2E : 1A          ;
CODE_00BF2F:          STA $70                             ;; 00BF2F : 85 70       ;
CODE_00BF31:          LDA $09                             ;; 00BF31 : A5 09       ;
CODE_00BF33:          AND.B #$01                          ;; 00BF33 : 29 01       ;
CODE_00BF35:          BEQ CODE_00BF41                     ;; 00BF35 : F0 0A       ;
CODE_00BF37:          LDA RAM_BlockXHi                    ;; 00BF37 : A5 99       ;
CODE_00BF39:          LSR                                 ;; 00BF39 : 4A          ;
CODE_00BF3A:          LDA RAM_BlockYHi                    ;; 00BF3A : A5 9B       ;
CODE_00BF3C:          AND.B #$01                          ;; 00BF3C : 29 01       ;
CODE_00BF3E:          JMP.W CODE_00BF46                   ;; 00BF3E : 4C 46 BF    ;
                                                          ;;                      ;
CODE_00BF41:          LDA RAM_BlockYHi                    ;; 00BF41 : A5 9B       ;
CODE_00BF43:          LSR                                 ;; 00BF43 : 4A          ;
CODE_00BF44:          LDA RAM_BlockXHi                    ;; 00BF44 : A5 99       ;
CODE_00BF46:          ROL                                 ;; 00BF46 : 2A          ;
CODE_00BF47:          ASL                                 ;; 00BF47 : 0A          ;
CODE_00BF48:          ASL                                 ;; 00BF48 : 0A          ;
CODE_00BF49:          ORA.B #$20                          ;; 00BF49 : 09 20       ;
CODE_00BF4B:          STA $04                             ;; 00BF4B : 85 04       ;
CODE_00BF4D:          CPX.W #$0000                        ;; 00BF4D : E0 00 00    ;
CODE_00BF50:          BEQ CODE_00BF57                     ;; 00BF50 : F0 05       ;
ADDR_00BF52:          CLC                                 ;; 00BF52 : 18          ;
ADDR_00BF53:          ADC.B #$10                          ;; 00BF53 : 69 10       ;
ADDR_00BF55:          STA $04                             ;; 00BF55 : 85 04       ;
CODE_00BF57:          LDA RAM_BlockXLo                    ;; 00BF57 : A5 98       ;
CODE_00BF59:          AND.B #$F0                          ;; 00BF59 : 29 F0       ;
CODE_00BF5B:          CLC                                 ;; 00BF5B : 18          ;
CODE_00BF5C:          ASL                                 ;; 00BF5C : 0A          ;
CODE_00BF5D:          ROL                                 ;; 00BF5D : 2A          ;
CODE_00BF5E:          STA $05                             ;; 00BF5E : 85 05       ;
CODE_00BF60:          ROL                                 ;; 00BF60 : 2A          ;
CODE_00BF61:          AND.B #$03                          ;; 00BF61 : 29 03       ;
CODE_00BF63:          ORA $04                             ;; 00BF63 : 05 04       ;
CODE_00BF65:          STA $06                             ;; 00BF65 : 85 06       ;
CODE_00BF67:          LDA RAM_BlockYLo                    ;; 00BF67 : A5 9A       ;
CODE_00BF69:          AND.B #$F0                          ;; 00BF69 : 29 F0       ;
CODE_00BF6B:          LSR                                 ;; 00BF6B : 4A          ;
CODE_00BF6C:          LSR                                 ;; 00BF6C : 4A          ;
CODE_00BF6D:          LSR                                 ;; 00BF6D : 4A          ;
CODE_00BF6E:          STA $04                             ;; 00BF6E : 85 04       ;
CODE_00BF70:          LDA $05                             ;; 00BF70 : A5 05       ;
CODE_00BF72:          AND.B #$C0                          ;; 00BF72 : 29 C0       ;
CODE_00BF74:          ORA $04                             ;; 00BF74 : 05 04       ;
CODE_00BF76:          STA $07                             ;; 00BF76 : 85 07       ;
CODE_00BF78:          REP #$20                            ;; 00BF78 : C2 20       ; Accum (16 bit) 
CODE_00BF7A:          LDA $09                             ;; 00BF7A : A5 09       ;
CODE_00BF7C:          AND.W #$0001                        ;; 00BF7C : 29 01 00    ;
CODE_00BF7F:          BNE CODE_00BF9B                     ;; 00BF7F : D0 1A       ;
CODE_00BF81:          LDA RAM_ScreenBndryXLo              ;; 00BF81 : A5 1A       ;
CODE_00BF83:          SEC                                 ;; 00BF83 : 38          ;
CODE_00BF84:          SBC.W #$0080                        ;; 00BF84 : E9 80 00    ;
CODE_00BF87:          TAX                                 ;; 00BF87 : AA          ;
CODE_00BF88:          LDY RAM_ScreenBndryYLo              ;; 00BF88 : A4 1C       ;
CODE_00BF8A:          LDA.W $1933                         ;; 00BF8A : AD 33 19    ;
CODE_00BF8D:          BEQ CODE_00BFB2                     ;; 00BF8D : F0 23       ;
ADDR_00BF8F:          LDX $1E                             ;; 00BF8F : A6 1E       ;
ADDR_00BF91:          LDA $20                             ;; 00BF91 : A5 20       ;
ADDR_00BF93:          SEC                                 ;; 00BF93 : 38          ;
ADDR_00BF94:          SBC.W #$0080                        ;; 00BF94 : E9 80 00    ;
ADDR_00BF97:          TAY                                 ;; 00BF97 : A8          ;
ADDR_00BF98:          JMP.W CODE_00BFB2                   ;; 00BF98 : 4C B2 BF    ;
                                                          ;;                      ;
CODE_00BF9B:          LDX RAM_ScreenBndryXLo              ;; 00BF9B : A6 1A       ;
CODE_00BF9D:          LDA RAM_ScreenBndryYLo              ;; 00BF9D : A5 1C       ;
CODE_00BF9F:          SEC                                 ;; 00BF9F : 38          ;
CODE_00BFA0:          SBC.W #$0080                        ;; 00BFA0 : E9 80 00    ;
CODE_00BFA3:          TAY                                 ;; 00BFA3 : A8          ;
CODE_00BFA4:          LDA.W $1933                         ;; 00BFA4 : AD 33 19    ;
CODE_00BFA7:          BEQ CODE_00BFB2                     ;; 00BFA7 : F0 09       ;
ADDR_00BFA9:          LDA $1E                             ;; 00BFA9 : A5 1E       ;
ADDR_00BFAB:          SEC                                 ;; 00BFAB : 38          ;
ADDR_00BFAC:          SBC.W #$0080                        ;; 00BFAC : E9 80 00    ;
ADDR_00BFAF:          TAX                                 ;; 00BFAF : AA          ;
ADDR_00BFB0:          LDY $20                             ;; 00BFB0 : A4 20       ;
CODE_00BFB2:          STX $08                             ;; 00BFB2 : 86 08       ;
CODE_00BFB4:          STY $0A                             ;; 00BFB4 : 84 0A       ;
CODE_00BFB6:          JSR.W CODE_00BFBC                   ;; 00BFB6 : 20 BC BF    ;
CODE_00BFB9:          PLX                                 ;; 00BFB9 : FA          ;
CODE_00BFBA:          PLP                                 ;; 00BFBA : 28          ;
Return00BFBB:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00BFBC:          SEP #$30                            ;; 00BFBC : E2 30       ; Index (8 bit) Accum (8 bit) 
CODE_00BFBE:          LDA RAM_BlockBlock                  ;; 00BFBE : A5 9C       ;
CODE_00BFC0:          DEC A                               ;; 00BFC0 : 3A          ;
CODE_00BFC1:          PHK                                 ;; 00BFC1 : 4B          ;
CODE_00BFC2:          PER $0003                           ;; 00BFC2 : 62 03 00    ;
CODE_00BFC5:          JMP.L ExecutePtr                    ;; 00BFC5 : 5C DF 86 00 ; $9C - Tile generated 
                                                          ;;                      ;
                                                          ;;                      ;
TileGenerationPtr:    .dw CODE_00C074                     ;; ?QPWZ? : 74 C0       ; 01 - empty space 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 02 - empty space 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 03 - vine 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 04 - tree background, for berries 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 05 - always turning block 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 06 - coin 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 07 - Mushroom scale base 
                      .dw CODE_00C077                     ;; ?QPWZ? : 77 C0       ; 08 - mole hole 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 09 - invisible solid 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0a - multiple coin turnblock 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0b - multiple coin q block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0c - turn block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0d - used block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0e - music block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 0f - music 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 10 - all way music block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 11 - sideways turn block 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 12 - tranlucent 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 13 - on off 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 14 - side of pipe, left 
                      .dw CODE_00C0C4                     ;; ?QPWZ? : C4 C0       ; 15 - side of pipe, right 
                      .dw CODE_00C0C1                     ;; ?QPWZ? : C1 C0       ; 16 - used 
                      .dw CODE_00C0C1                     ;; ?QPWZ? : C1 C0       ; 17 - O block from 1up game 
                      .dw CODE_00C1AC                     ;; ?QPWZ? : AC C1       ; 18 - invisible block containing wings 
                      .dw CODE_00C334                     ;; ?QPWZ? : 34 C3       ; 19 - cage 
                      .dw CODE_00C334                     ;; ?QPWZ? : 34 C3       ; 1a - cage 
                      .dw CODE_00C3D1                     ;; ?QPWZ? : D1 C3       ; 1b -  
                                                          ;;                      ;
DATA_00BFFF:          .db $00,$00,$80,$00,$00,$01         ;; 00BFFF               ;
                                                          ;;                      ;
DATA_00C005:          .db $80,$40,$20,$10,$08,$04,$02,$01 ;; 00C005               ;
                                                          ;;                      ;
CODE_00C00D:          REP #$30                            ;; 00C00D : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C00F:          LDA RAM_BlockYLo                    ;; 00C00F : A5 9A       ;
CODE_00C011:          AND.W #$FF00                        ;; 00C011 : 29 00 FF    ;
CODE_00C014:          LSR                                 ;; 00C014 : 4A          ;
CODE_00C015:          LSR                                 ;; 00C015 : 4A          ;
CODE_00C016:          LSR                                 ;; 00C016 : 4A          ;
CODE_00C017:          LSR                                 ;; 00C017 : 4A          ;
CODE_00C018:          LSR                                 ;; 00C018 : 4A          ;
CODE_00C019:          LSR                                 ;; 00C019 : 4A          ;
CODE_00C01A:          STA $04                             ;; 00C01A : 85 04       ;
CODE_00C01C:          LDA RAM_BlockYLo                    ;; 00C01C : A5 9A       ;
CODE_00C01E:          AND.W #$0080                        ;; 00C01E : 29 80 00    ;
CODE_00C021:          LSR                                 ;; 00C021 : 4A          ;
CODE_00C022:          LSR                                 ;; 00C022 : 4A          ;
CODE_00C023:          LSR                                 ;; 00C023 : 4A          ;
CODE_00C024:          LSR                                 ;; 00C024 : 4A          ;
CODE_00C025:          LSR                                 ;; 00C025 : 4A          ;
CODE_00C026:          LSR                                 ;; 00C026 : 4A          ;
CODE_00C027:          LSR                                 ;; 00C027 : 4A          ;
CODE_00C028:          ORA $04                             ;; 00C028 : 05 04       ;
CODE_00C02A:          STA $04                             ;; 00C02A : 85 04       ;
CODE_00C02C:          LDA RAM_BlockXLo                    ;; 00C02C : A5 98       ;
CODE_00C02E:          AND.W #$0100                        ;; 00C02E : 29 00 01    ;
CODE_00C031:          BEQ CODE_00C03A                     ;; 00C031 : F0 07       ;
CODE_00C033:          LDA $04                             ;; 00C033 : A5 04       ;
CODE_00C035:          ORA.W #$0002                        ;; 00C035 : 09 02 00    ;
CODE_00C038:          STA $04                             ;; 00C038 : 85 04       ;
CODE_00C03A:          LDA.W $13BE                         ;; 00C03A : AD BE 13    ;
CODE_00C03D:          AND.W #$000F                        ;; 00C03D : 29 0F 00    ;
CODE_00C040:          ASL                                 ;; 00C040 : 0A          ;
CODE_00C041:          TAX                                 ;; 00C041 : AA          ;
CODE_00C042:          LDA.L DATA_00BFFF,X                 ;; 00C042 : BF FF BF 00 ;
CODE_00C046:          CLC                                 ;; 00C046 : 18          ;
CODE_00C047:          ADC $04                             ;; 00C047 : 65 04       ;
CODE_00C049:          STA $04                             ;; 00C049 : 85 04       ;
CODE_00C04B:          TAY                                 ;; 00C04B : A8          ;
CODE_00C04C:          LDA RAM_BlockYLo                    ;; 00C04C : A5 9A       ;
CODE_00C04E:          AND.W #$0070                        ;; 00C04E : 29 70 00    ;
CODE_00C051:          LSR                                 ;; 00C051 : 4A          ;
CODE_00C052:          LSR                                 ;; 00C052 : 4A          ;
CODE_00C053:          LSR                                 ;; 00C053 : 4A          ;
CODE_00C054:          LSR                                 ;; 00C054 : 4A          ;
CODE_00C055:          TAX                                 ;; 00C055 : AA          ;
CODE_00C056:          SEP #$20                            ;; 00C056 : E2 20       ; Accum (8 bit) 
CODE_00C058:          LDA.W $19F8,Y                       ;; 00C058 : B9 F8 19    ;
CODE_00C05B:          ORA.L DATA_00C005,X                 ;; 00C05B : 1F 05 C0 00 ;
CODE_00C05F:          STA.W $19F8,Y                       ;; 00C05F : 99 F8 19    ;
Return00C062:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00C063:          .db $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE ;; 00C063               ;
TileToGeneratePg0:    .db $25,$25,$25,$06,$49,$48,$2B,$A2 ;; ?QPWZ?               ;
                      .db $C6                             ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00C074:          JSR.W CODE_00C00D                   ;; 00C074 : 20 0D C0    ;
CODE_00C077:          REP #$30                            ;; 00C077 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C079:          LDA RAM_BlockXLo                    ;; 00C079 : A5 98       ;
CODE_00C07B:          AND.W #$01F0                        ;; 00C07B : 29 F0 01    ;
CODE_00C07E:          STA $04                             ;; 00C07E : 85 04       ;
CODE_00C080:          LDA RAM_BlockYLo                    ;; 00C080 : A5 9A       ;
CODE_00C082:          LSR                                 ;; 00C082 : 4A          ;
CODE_00C083:          LSR                                 ;; 00C083 : 4A          ;
CODE_00C084:          LSR                                 ;; 00C084 : 4A          ;
CODE_00C085:          LSR                                 ;; 00C085 : 4A          ;
CODE_00C086:          AND.W #$000F                        ;; 00C086 : 29 0F 00    ;
CODE_00C089:          ORA $04                             ;; 00C089 : 05 04       ;
CODE_00C08B:          TAY                                 ;; 00C08B : A8          ;
CODE_00C08C:          LDA RAM_BlockBlock                  ;; 00C08C : A5 9C       ; \ X = index of tile to generate 
CODE_00C08E:          AND.W #$00FF                        ;; 00C08E : 29 FF 00    ;  | 
CODE_00C091:          TAX                                 ;; 00C091 : AA          ; / 
CODE_00C092:          SEP #$20                            ;; 00C092 : E2 20       ; Accum (8 bit) 
CODE_00C094:          LDA [$6E],Y                         ;; 00C094 : B7 6E       ; \ Reset #$01 bit 
CODE_00C096:          AND.B #$FE                          ;; 00C096 : 29 FE       ;  | 
CODE_00C098:          STA [$6E],Y                         ;; 00C098 : 97 6E       ; / 
CODE_00C09A:          LDA.L TileToGeneratePg0,X           ;; 00C09A : BF 6B C0 00 ; \ Store tile 
CODE_00C09E:          STA [$6B],Y                         ;; 00C09E : 97 6B       ; / 
CODE_00C0A0:          REP #$20                            ;; 00C0A0 : C2 20       ; Accum (16 bit) 
CODE_00C0A2:          AND.W #$00FF                        ;; 00C0A2 : 29 FF 00    ;
CODE_00C0A5:          ASL                                 ;; 00C0A5 : 0A          ;
CODE_00C0A6:          TAY                                 ;; 00C0A6 : A8          ;
CODE_00C0A7:          JMP.W CODE_00C0FB                   ;; 00C0A7 : 4C FB C0    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00C0AA:          .db $80,$40,$20,$10,$08,$04,$02,$01 ;; 00C0AA               ;
TileToGeneratePg1:    .db $52,$1B,$23,$1E,$32,$13,$15,$16 ;; ?QPWZ?               ;
                      .db $2B,$2C,$12,$68,$69,$32,$5E     ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00C0C1:          JSR.W CODE_00C00D                   ;; 00C0C1 : 20 0D C0    ;
CODE_00C0C4:          REP #$30                            ;; 00C0C4 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C0C6:          LDA RAM_BlockXLo                    ;; 00C0C6 : A5 98       ;
CODE_00C0C8:          AND.W #$01F0                        ;; 00C0C8 : 29 F0 01    ;
CODE_00C0CB:          STA $04                             ;; 00C0CB : 85 04       ;
CODE_00C0CD:          LDA RAM_BlockYLo                    ;; 00C0CD : A5 9A       ;
CODE_00C0CF:          LSR                                 ;; 00C0CF : 4A          ;
CODE_00C0D0:          LSR                                 ;; 00C0D0 : 4A          ;
CODE_00C0D1:          LSR                                 ;; 00C0D1 : 4A          ;
CODE_00C0D2:          LSR                                 ;; 00C0D2 : 4A          ;
CODE_00C0D3:          AND.W #$000F                        ;; 00C0D3 : 29 0F 00    ;
CODE_00C0D6:          ORA $04                             ;; 00C0D6 : 05 04       ;
CODE_00C0D8:          TAY                                 ;; 00C0D8 : A8          ;
CODE_00C0D9:          LDA RAM_BlockBlock                  ;; 00C0D9 : A5 9C       ; \ X = index of tile to generate 
CODE_00C0DB:          SEC                                 ;; 00C0DB : 38          ;  | 
CODE_00C0DC:          SBC.W #$0009                        ;; 00C0DC : E9 09 00    ;  | 
CODE_00C0DF:          AND.W #$00FF                        ;; 00C0DF : 29 FF 00    ;  | 
CODE_00C0E2:          TAX                                 ;; 00C0E2 : AA          ; / 
CODE_00C0E3:          SEP #$20                            ;; 00C0E3 : E2 20       ; Accum (8 bit) 
CODE_00C0E5:          LDA [$6E],Y                         ;; 00C0E5 : B7 6E       ; \ Set #$01 bit 
CODE_00C0E7:          ORA.B #$01                          ;; 00C0E7 : 09 01       ;  | 
CODE_00C0E9:          STA [$6E],Y                         ;; 00C0E9 : 97 6E       ; / 
CODE_00C0EB:          LDA.L TileToGeneratePg1,X           ;; 00C0EB : BF B2 C0 00 ; \ Store tile 
CODE_00C0EF:          STA [$6B],Y                         ;; 00C0EF : 97 6B       ; / 
CODE_00C0F1:          REP #$20                            ;; 00C0F1 : C2 20       ; Accum (16 bit) 
CODE_00C0F3:          AND.W #$00FF                        ;; 00C0F3 : 29 FF 00    ;
CODE_00C0F6:          ORA.W #$0100                        ;; 00C0F6 : 09 00 01    ;
CODE_00C0F9:          ASL                                 ;; 00C0F9 : 0A          ;
CODE_00C0FA:          TAY                                 ;; 00C0FA : A8          ;
CODE_00C0FB:          LDA RAM_IsVerticalLvl               ;; 00C0FB : A5 5B       ;
CODE_00C0FD:          STA $00                             ;; 00C0FD : 85 00       ;
CODE_00C0FF:          LDA.W $1933                         ;; 00C0FF : AD 33 19    ;
CODE_00C102:          BEQ CODE_00C106                     ;; 00C102 : F0 02       ;
ADDR_00C104:          LSR $00                             ;; 00C104 : 46 00       ;
CODE_00C106:          LDA $00                             ;; 00C106 : A5 00       ;
CODE_00C108:          AND.W #$0001                        ;; 00C108 : 29 01 00    ;
CODE_00C10B:          BNE CODE_00C127                     ;; 00C10B : D0 1A       ;
CODE_00C10D:          LDA $08                             ;; 00C10D : A5 08       ;
CODE_00C10F:          AND.W #$FFF0                        ;; 00C10F : 29 F0 FF    ;
CODE_00C112:          BMI CODE_00C11A                     ;; 00C112 : 30 06       ;
CODE_00C114:          CMP $0C                             ;; 00C114 : C5 0C       ;
CODE_00C116:          BEQ CODE_00C13E                     ;; 00C116 : F0 26       ;
CODE_00C118:          BCS CODE_00C124                     ;; 00C118 : B0 0A       ;
CODE_00C11A:          CLC                                 ;; 00C11A : 18          ;
CODE_00C11B:          ADC.W #$0200                        ;; 00C11B : 69 00 02    ;
CODE_00C11E:          CMP $0C                             ;; 00C11E : C5 0C       ;
CODE_00C120:          BEQ CODE_00C124                     ;; 00C120 : F0 02       ;
CODE_00C122:          BCS CODE_00C13E                     ;; 00C122 : B0 1A       ;
CODE_00C124:          JMP.W Return00C1AB                  ;; 00C124 : 4C AB C1    ;
                                                          ;;                      ;
CODE_00C127:          LDA $0A                             ;; 00C127 : A5 0A       ;
CODE_00C129:          AND.W #$FFF0                        ;; 00C129 : 29 F0 FF    ;
CODE_00C12C:          BMI CODE_00C134                     ;; 00C12C : 30 06       ;
CODE_00C12E:          CMP $0E                             ;; 00C12E : C5 0E       ;
CODE_00C130:          BEQ CODE_00C13E                     ;; 00C130 : F0 0C       ;
CODE_00C132:          BCS Return00C1AB                    ;; 00C132 : B0 77       ;
CODE_00C134:          CLC                                 ;; 00C134 : 18          ;
CODE_00C135:          ADC.W #$0200                        ;; 00C135 : 69 00 02    ;
CODE_00C138:          CMP $0E                             ;; 00C138 : C5 0E       ;
CODE_00C13A:          BEQ Return00C1AB                    ;; 00C13A : F0 6F       ;
CODE_00C13C:          BCC Return00C1AB                    ;; 00C13C : 90 6D       ;
CODE_00C13E:          LDA.L $7F837B                       ;; 00C13E : AF 7B 83 7F ;
CODE_00C142:          TAX                                 ;; 00C142 : AA          ;
CODE_00C143:          SEP #$20                            ;; 00C143 : E2 20       ; Accum (8 bit) 
CODE_00C145:          LDA $06                             ;; 00C145 : A5 06       ;
CODE_00C147:          STA.L $7F837D,X                     ;; 00C147 : 9F 7D 83 7F ;
CODE_00C14B:          STA.L $7F8385,X                     ;; 00C14B : 9F 85 83 7F ;
CODE_00C14F:          LDA $07                             ;; 00C14F : A5 07       ;
CODE_00C151:          STA.L $7F837E,X                     ;; 00C151 : 9F 7E 83 7F ;
CODE_00C155:          CLC                                 ;; 00C155 : 18          ;
CODE_00C156:          ADC.B #$20                          ;; 00C156 : 69 20       ;
CODE_00C158:          STA.L $7F8386,X                     ;; 00C158 : 9F 86 83 7F ;
CODE_00C15C:          LDA.B #$00                          ;; 00C15C : A9 00       ;
CODE_00C15E:          STA.L $7F837F,X                     ;; 00C15E : 9F 7F 83 7F ;
CODE_00C162:          STA.L $7F8387,X                     ;; 00C162 : 9F 87 83 7F ;
CODE_00C166:          LDA.B #$03                          ;; 00C166 : A9 03       ;
CODE_00C168:          STA.L $7F8380,X                     ;; 00C168 : 9F 80 83 7F ;
CODE_00C16C:          STA.L $7F8388,X                     ;; 00C16C : 9F 88 83 7F ;
CODE_00C170:          LDA.B #$FF                          ;; 00C170 : A9 FF       ;
CODE_00C172:          STA.L $7F838D,X                     ;; 00C172 : 9F 8D 83 7F ;
CODE_00C176:          LDA.B #$0D                          ;; 00C176 : A9 0D       ;
CODE_00C178:          STA $06                             ;; 00C178 : 85 06       ;
CODE_00C17A:          REP #$20                            ;; 00C17A : C2 20       ; Accum (16 bit) 
CODE_00C17C:          LDA.W $0FBE,Y                       ;; 00C17C : B9 BE 0F    ;
CODE_00C17F:          STA $04                             ;; 00C17F : 85 04       ;
CODE_00C181:          LDY.W #$0000                        ;; 00C181 : A0 00 00    ;
CODE_00C184:          LDA [$04],Y                         ;; 00C184 : B7 04       ;
CODE_00C186:          STA.L $7F8381,X                     ;; 00C186 : 9F 81 83 7F ;
CODE_00C18A:          INY                                 ;; 00C18A : C8          ;
CODE_00C18B:          INY                                 ;; 00C18B : C8          ;
CODE_00C18C:          LDA [$04],Y                         ;; 00C18C : B7 04       ;
CODE_00C18E:          STA.L $7F8389,X                     ;; 00C18E : 9F 89 83 7F ;
CODE_00C192:          INY                                 ;; 00C192 : C8          ;
CODE_00C193:          INY                                 ;; 00C193 : C8          ;
CODE_00C194:          LDA [$04],Y                         ;; 00C194 : B7 04       ;
CODE_00C196:          STA.L $7F8383,X                     ;; 00C196 : 9F 83 83 7F ;
CODE_00C19A:          INY                                 ;; 00C19A : C8          ;
CODE_00C19B:          INY                                 ;; 00C19B : C8          ;
CODE_00C19C:          LDA [$04],Y                         ;; 00C19C : B7 04       ;
CODE_00C19E:          STA.L $7F838B,X                     ;; 00C19E : 9F 8B 83 7F ;
CODE_00C1A2:          TXA                                 ;; 00C1A2 : 8A          ;
CODE_00C1A3:          CLC                                 ;; 00C1A3 : 18          ;
CODE_00C1A4:          ADC.W #$0010                        ;; 00C1A4 : 69 10 00    ;
CODE_00C1A7:          STA.L $7F837B                       ;; 00C1A7 : 8F 7B 83 7F ;
Return00C1AB:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C1AC:          JSR.W CODE_00C00D                   ;; 00C1AC : 20 0D C0    ;
CODE_00C1AF:          REP #$30                            ;; 00C1AF : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C1B1:          LDA RAM_BlockXLo                    ;; 00C1B1 : A5 98       ;
CODE_00C1B3:          AND.W #$01F0                        ;; 00C1B3 : 29 F0 01    ;
CODE_00C1B6:          STA $04                             ;; 00C1B6 : 85 04       ;
CODE_00C1B8:          LDA RAM_BlockYLo                    ;; 00C1B8 : A5 9A       ;
CODE_00C1BA:          LSR                                 ;; 00C1BA : 4A          ;
CODE_00C1BB:          LSR                                 ;; 00C1BB : 4A          ;
CODE_00C1BC:          LSR                                 ;; 00C1BC : 4A          ;
CODE_00C1BD:          LSR                                 ;; 00C1BD : 4A          ;
CODE_00C1BE:          AND.W #$000F                        ;; 00C1BE : 29 0F 00    ;
CODE_00C1C1:          ORA $04                             ;; 00C1C1 : 05 04       ;
CODE_00C1C3:          TAY                                 ;; 00C1C3 : A8          ;
CODE_00C1C4:          SEP #$20                            ;; 00C1C4 : E2 20       ; Accum (8 bit) 
CODE_00C1C6:          LDA.B #$25                          ;; 00C1C6 : A9 25       ;
CODE_00C1C8:          STA [$6B],Y                         ;; 00C1C8 : 97 6B       ;
CODE_00C1CA:          REP #$20                            ;; 00C1CA : C2 20       ; Accum (16 bit) 
CODE_00C1CC:          TYA                                 ;; 00C1CC : 98          ;
CODE_00C1CD:          CLC                                 ;; 00C1CD : 18          ;
CODE_00C1CE:          ADC.W #$0010                        ;; 00C1CE : 69 10 00    ;
CODE_00C1D1:          TAY                                 ;; 00C1D1 : A8          ;
CODE_00C1D2:          SEP #$20                            ;; 00C1D2 : E2 20       ; Accum (8 bit) 
CODE_00C1D4:          LDA.B #$25                          ;; 00C1D4 : A9 25       ;
CODE_00C1D6:          STA [$6B],Y                         ;; 00C1D6 : 97 6B       ;
CODE_00C1D8:          REP #$20                            ;; 00C1D8 : C2 20       ; Accum (16 bit) 
CODE_00C1DA:          AND.W #$00FF                        ;; 00C1DA : 29 FF 00    ;
CODE_00C1DD:          ASL                                 ;; 00C1DD : 0A          ;
CODE_00C1DE:          TAY                                 ;; 00C1DE : A8          ;
CODE_00C1DF:          LDA RAM_IsVerticalLvl               ;; 00C1DF : A5 5B       ;
CODE_00C1E1:          STA $00                             ;; 00C1E1 : 85 00       ;
CODE_00C1E3:          LDA.W $1933                         ;; 00C1E3 : AD 33 19    ;
CODE_00C1E6:          BEQ CODE_00C1EA                     ;; 00C1E6 : F0 02       ;
ADDR_00C1E8:          LSR $00                             ;; 00C1E8 : 46 00       ;
CODE_00C1EA:          LDA $00                             ;; 00C1EA : A5 00       ;
CODE_00C1EC:          AND.W #$0001                        ;; 00C1EC : 29 01 00    ;
CODE_00C1EF:          BNE CODE_00C20B                     ;; 00C1EF : D0 1A       ;
CODE_00C1F1:          LDA $08                             ;; 00C1F1 : A5 08       ;
CODE_00C1F3:          AND.W #$FFF0                        ;; 00C1F3 : 29 F0 FF    ;
CODE_00C1F6:          BMI CODE_00C1FE                     ;; 00C1F6 : 30 06       ;
CODE_00C1F8:          CMP $0C                             ;; 00C1F8 : C5 0C       ;
CODE_00C1FA:          BEQ CODE_00C222                     ;; 00C1FA : F0 26       ;
CODE_00C1FC:          BCS Return00C1AB                    ;; 00C1FC : B0 AD       ;
CODE_00C1FE:          CLC                                 ;; 00C1FE : 18          ;
CODE_00C1FF:          ADC.W #$0200                        ;; 00C1FF : 69 00 02    ;
CODE_00C202:          CMP $0C                             ;; 00C202 : C5 0C       ;
CODE_00C204:          BCC Return00C1AB                    ;; 00C204 : 90 A5       ;
CODE_00C206:          BEQ Return00C1AB                    ;; 00C206 : F0 A3       ;
CODE_00C208:          JMP.W CODE_00C222                   ;; 00C208 : 4C 22 C2    ;
                                                          ;;                      ;
CODE_00C20B:          LDA $0A                             ;; 00C20B : A5 0A       ;
CODE_00C20D:          AND.W #$FFF0                        ;; 00C20D : 29 F0 FF    ;
CODE_00C210:          BMI CODE_00C218                     ;; 00C210 : 30 06       ;
CODE_00C212:          CMP $0E                             ;; 00C212 : C5 0E       ;
CODE_00C214:          BEQ CODE_00C222                     ;; 00C214 : F0 0C       ;
CODE_00C216:          BCS Return00C1AB                    ;; 00C216 : B0 93       ;
CODE_00C218:          CLC                                 ;; 00C218 : 18          ;
CODE_00C219:          ADC.W #$0200                        ;; 00C219 : 69 00 02    ;
CODE_00C21C:          CMP $0E                             ;; 00C21C : C5 0E       ;
CODE_00C21E:          BEQ Return00C1AB                    ;; 00C21E : F0 8B       ;
CODE_00C220:          BCC Return00C1AB                    ;; 00C220 : 90 89       ;
CODE_00C222:          LDA.L $7F837B                       ;; 00C222 : AF 7B 83 7F ;
CODE_00C226:          TAX                                 ;; 00C226 : AA          ;
CODE_00C227:          SEP #$20                            ;; 00C227 : E2 20       ; Accum (8 bit) 
CODE_00C229:          LDA $06                             ;; 00C229 : A5 06       ;
CODE_00C22B:          STA.L $7F837D,X                     ;; 00C22B : 9F 7D 83 7F ;
CODE_00C22F:          STA.L $7F8389,X                     ;; 00C22F : 9F 89 83 7F ;
CODE_00C233:          LDA $07                             ;; 00C233 : A5 07       ;
CODE_00C235:          STA.L $7F837E,X                     ;; 00C235 : 9F 7E 83 7F ;
CODE_00C239:          INC A                               ;; 00C239 : 1A          ;
CODE_00C23A:          STA.L $7F838A,X                     ;; 00C23A : 9F 8A 83 7F ;
CODE_00C23E:          LDA.B #$80                          ;; 00C23E : A9 80       ;
CODE_00C240:          STA.L $7F837F,X                     ;; 00C240 : 9F 7F 83 7F ;
CODE_00C244:          STA.L $7F838B,X                     ;; 00C244 : 9F 8B 83 7F ;
CODE_00C248:          LDA.B #$07                          ;; 00C248 : A9 07       ;
CODE_00C24A:          STA.L $7F8380,X                     ;; 00C24A : 9F 80 83 7F ;
CODE_00C24E:          STA.L $7F838C,X                     ;; 00C24E : 9F 8C 83 7F ;
CODE_00C252:          LDA.B #$FF                          ;; 00C252 : A9 FF       ;
CODE_00C254:          STA.L $7F8395,X                     ;; 00C254 : 9F 95 83 7F ;
CODE_00C258:          LDA.B #$0D                          ;; 00C258 : A9 0D       ;
CODE_00C25A:          STA $06                             ;; 00C25A : 85 06       ;
CODE_00C25C:          REP #$20                            ;; 00C25C : C2 20       ; Accum (16 bit) 
CODE_00C25E:          LDA.W $0FBE,Y                       ;; 00C25E : B9 BE 0F    ;
CODE_00C261:          STA $04                             ;; 00C261 : 85 04       ;
CODE_00C263:          LDY.W #$0000                        ;; 00C263 : A0 00 00    ;
CODE_00C266:          LDA [$04],Y                         ;; 00C266 : B7 04       ;
CODE_00C268:          STA.L $7F8381,X                     ;; 00C268 : 9F 81 83 7F ;
CODE_00C26C:          STA.L $7F8385,X                     ;; 00C26C : 9F 85 83 7F ;
CODE_00C270:          INY                                 ;; 00C270 : C8          ;
CODE_00C271:          INY                                 ;; 00C271 : C8          ;
CODE_00C272:          LDA [$04],Y                         ;; 00C272 : B7 04       ;
CODE_00C274:          STA.L $7F838D,X                     ;; 00C274 : 9F 8D 83 7F ;
CODE_00C278:          STA.L $7F8391,X                     ;; 00C278 : 9F 91 83 7F ;
CODE_00C27C:          INY                                 ;; 00C27C : C8          ;
CODE_00C27D:          INY                                 ;; 00C27D : C8          ;
CODE_00C27E:          LDA [$04],Y                         ;; 00C27E : B7 04       ;
CODE_00C280:          STA.L $7F8383,X                     ;; 00C280 : 9F 83 83 7F ;
CODE_00C284:          STA.L $7F8387,X                     ;; 00C284 : 9F 87 83 7F ;
CODE_00C288:          INY                                 ;; 00C288 : C8          ;
CODE_00C289:          INY                                 ;; 00C289 : C8          ;
CODE_00C28A:          LDA [$04],Y                         ;; 00C28A : B7 04       ;
CODE_00C28C:          STA.L $7F838F,X                     ;; 00C28C : 9F 8F 83 7F ;
CODE_00C290:          STA.L $7F8393,X                     ;; 00C290 : 9F 93 83 7F ;
CODE_00C294:          TXA                                 ;; 00C294 : 8A          ;
CODE_00C295:          CLC                                 ;; 00C295 : 18          ;
CODE_00C296:          ADC.W #$0018                        ;; 00C296 : 69 18 00    ;
CODE_00C299:          STA.L $7F837B                       ;; 00C299 : 8F 7B 83 7F ;
Return00C29D:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
FlippedGateBgTiles?:  .db $99,$9C,$8B,$1C,$8B,$1C,$8B,$1C ;; ?QPWZ?               ;
                      .db $8B,$1C,$99,$DC,$9B,$1C,$F8,$1C ;; ?QPWZ?               ;
                      .db $F8,$1C,$F8,$1C,$F8,$1C,$9B,$5C ;; ?QPWZ?               ;
                      .db $9B,$1C,$F8,$1C,$F8,$1C,$F8,$1C ;; ?QPWZ?               ;
                      .db $F8,$1C,$9B,$5C,$9B,$1C,$F8,$1C ;; ?QPWZ?               ;
                      .db $F8,$1C,$F8,$1C,$F8,$1C,$9B,$5C ;; ?QPWZ?               ;
                      .db $9B,$1C,$F8,$1C,$F8,$1C,$F8,$1C ;; ?QPWZ?               ;
                      .db $F8,$1C,$9B,$5C,$99,$1C,$8B,$9C ;; ?QPWZ?               ;
                      .db $8B,$9C,$8B,$9C,$8B,$9C,$99,$5C ;; ?QPWZ?               ;
                      .db $BA,$9C,$AB,$1C,$AB,$1C,$AB,$1C ;; ?QPWZ?               ;
                      .db $AB,$1C,$BA,$DC,$AA,$1C,$82,$1C ;; ?QPWZ?               ;
                      .db $82,$1C,$82,$1C,$82,$1C,$AA,$5C ;; ?QPWZ?               ;
                      .db $AA,$1C,$82,$1C,$82,$1C,$82,$1C ;; ?QPWZ?               ;
                      .db $82,$1C,$AA,$5C,$AA,$1C,$82,$1C ;; ?QPWZ?               ;
                      .db $82,$1C,$82,$1C,$82,$1C,$AA,$5C ;; ?QPWZ?               ;
                      .db $AA,$1C,$82,$1C,$82,$1C,$82,$1C ;; ?QPWZ?               ;
                      .db $82,$1C,$AA,$5C,$BA,$1C,$AB,$9C ;; ?QPWZ?               ;
                      .db $AB,$9C,$AB,$9C,$AB,$9C,$BA,$5C ;; ?QPWZ?               ;
DATA_00C32E:          .db $9E,$C2                         ;; 00C32E               ;
                                                          ;;                      ;
DATA_00C330:          .db $00,$E6,$C2,$00                 ;; 00C330               ;
                                                          ;;                      ;
CODE_00C334:          INC $07                             ;; 00C334 : E6 07       ; Accum (8 bit) 
CODE_00C336:          LDA $07                             ;; 00C336 : A5 07       ;
CODE_00C338:          CLC                                 ;; 00C338 : 18          ;
CODE_00C339:          ADC.B #$20                          ;; 00C339 : 69 20       ;
CODE_00C33B:          STA $07                             ;; 00C33B : 85 07       ;
CODE_00C33D:          LDA $06                             ;; 00C33D : A5 06       ;
CODE_00C33F:          ADC.B #$00                          ;; 00C33F : 69 00       ;
CODE_00C341:          STA $06                             ;; 00C341 : 85 06       ;
CODE_00C343:          LDA RAM_BlockBlock                  ;; 00C343 : A5 9C       ;
CODE_00C345:          SEC                                 ;; 00C345 : 38          ;
CODE_00C346:          SBC.B #$19                          ;; 00C346 : E9 19       ;
CODE_00C348:          STA $00                             ;; 00C348 : 85 00       ;
CODE_00C34A:          ASL                                 ;; 00C34A : 0A          ;
CODE_00C34B:          CLC                                 ;; 00C34B : 18          ;
CODE_00C34C:          ADC $00                             ;; 00C34C : 65 00       ;
CODE_00C34E:          TAX                                 ;; 00C34E : AA          ;
CODE_00C34F:          LDA.L DATA_00C330,X                 ;; 00C34F : BF 30 C3 00 ;
CODE_00C353:          STA $04                             ;; 00C353 : 85 04       ;
CODE_00C355:          REP #$30                            ;; 00C355 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C357:          LDA.L DATA_00C32E,X                 ;; 00C357 : BF 2E C3 00 ;
CODE_00C35B:          STA $02                             ;; 00C35B : 85 02       ;
CODE_00C35D:          LDA.L $7F837B                       ;; 00C35D : AF 7B 83 7F ;
CODE_00C361:          TAX                                 ;; 00C361 : AA          ;
CODE_00C362:          LDY.W #$0005                        ;; 00C362 : A0 05 00    ;
CODE_00C365:          SEP #$20                            ;; 00C365 : E2 20       ; Accum (8 bit) 
CODE_00C367:          LDA $06                             ;; 00C367 : A5 06       ;
CODE_00C369:          STA.L $7F837D,X                     ;; 00C369 : 9F 7D 83 7F ;
CODE_00C36D:          LDA $07                             ;; 00C36D : A5 07       ;
CODE_00C36F:          STA.L $7F837E,X                     ;; 00C36F : 9F 7E 83 7F ;
CODE_00C373:          LDA.B #$00                          ;; 00C373 : A9 00       ;
CODE_00C375:          STA.L $7F837F,X                     ;; 00C375 : 9F 7F 83 7F ;
CODE_00C379:          LDA.B #$0B                          ;; 00C379 : A9 0B       ;
CODE_00C37B:          STA.L $7F8380,X                     ;; 00C37B : 9F 80 83 7F ;
CODE_00C37F:          LDA $07                             ;; 00C37F : A5 07       ;
CODE_00C381:          CLC                                 ;; 00C381 : 18          ;
CODE_00C382:          ADC.B #$20                          ;; 00C382 : 69 20       ;
CODE_00C384:          STA $07                             ;; 00C384 : 85 07       ;
CODE_00C386:          LDA $06                             ;; 00C386 : A5 06       ;
CODE_00C388:          ADC.B #$00                          ;; 00C388 : 69 00       ;
CODE_00C38A:          STA $06                             ;; 00C38A : 85 06       ;
CODE_00C38C:          REP #$20                            ;; 00C38C : C2 20       ; Accum (16 bit) 
CODE_00C38E:          TXA                                 ;; 00C38E : 8A          ;
CODE_00C38F:          CLC                                 ;; 00C38F : 18          ;
CODE_00C390:          ADC.W #$0010                        ;; 00C390 : 69 10 00    ;
CODE_00C393:          TAX                                 ;; 00C393 : AA          ;
CODE_00C394:          DEY                                 ;; 00C394 : 88          ;
CODE_00C395:          BPL CODE_00C365                     ;; 00C395 : 10 CE       ;
CODE_00C397:          LDA.L $7F837B                       ;; 00C397 : AF 7B 83 7F ;
CODE_00C39B:          TAX                                 ;; 00C39B : AA          ;
CODE_00C39C:          LDY.W #$0000                        ;; 00C39C : A0 00 00    ;
CODE_00C39F:          LDA.W #$0005                        ;; 00C39F : A9 05 00    ;
CODE_00C3A2:          STA $00                             ;; 00C3A2 : 85 00       ;
CODE_00C3A4:          LDA [$02],Y                         ;; 00C3A4 : B7 02       ;
CODE_00C3A6:          STA.L $7F8381,X                     ;; 00C3A6 : 9F 81 83 7F ;
CODE_00C3AA:          INY                                 ;; 00C3AA : C8          ;
CODE_00C3AB:          INY                                 ;; 00C3AB : C8          ;
CODE_00C3AC:          INX                                 ;; 00C3AC : E8          ;
CODE_00C3AD:          INX                                 ;; 00C3AD : E8          ;
CODE_00C3AE:          DEC $00                             ;; 00C3AE : C6 00       ;
CODE_00C3B0:          BPL CODE_00C3A4                     ;; 00C3B0 : 10 F2       ;
CODE_00C3B2:          TXA                                 ;; 00C3B2 : 8A          ;
CODE_00C3B3:          CLC                                 ;; 00C3B3 : 18          ;
CODE_00C3B4:          ADC.W #$0004                        ;; 00C3B4 : 69 04 00    ;
CODE_00C3B7:          TAX                                 ;; 00C3B7 : AA          ;
CODE_00C3B8:          CPY.W #$0048                        ;; 00C3B8 : C0 48 00    ;
CODE_00C3BB:          BNE CODE_00C39F                     ;; 00C3BB : D0 E2       ;
CODE_00C3BD:          LDA.W #$00FF                        ;; 00C3BD : A9 FF 00    ;
CODE_00C3C0:          STA.L $7F837D,X                     ;; 00C3C0 : 9F 7D 83 7F ;
CODE_00C3C4:          LDA.L $7F837B                       ;; 00C3C4 : AF 7B 83 7F ;
CODE_00C3C8:          CLC                                 ;; 00C3C8 : 18          ;
CODE_00C3C9:          ADC.W #$0060                        ;; 00C3C9 : 69 60 00    ;
CODE_00C3CC:          STA.L $7F837B                       ;; 00C3CC : 8F 7B 83 7F ;
Return00C3D0:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C3D1:          REP #$30                            ;; 00C3D1 : C2 30       ; Index (16 bit) Accum (16 bit) 
CODE_00C3D3:          LDA RAM_BlockXLo                    ;; 00C3D3 : A5 98       ;
CODE_00C3D5:          AND.W #$01F0                        ;; 00C3D5 : 29 F0 01    ;
CODE_00C3D8:          STA $04                             ;; 00C3D8 : 85 04       ;
CODE_00C3DA:          LDA RAM_BlockYLo                    ;; 00C3DA : A5 9A       ;
CODE_00C3DC:          LSR                                 ;; 00C3DC : 4A          ;
CODE_00C3DD:          LSR                                 ;; 00C3DD : 4A          ;
CODE_00C3DE:          LSR                                 ;; 00C3DE : 4A          ;
CODE_00C3DF:          LSR                                 ;; 00C3DF : 4A          ;
CODE_00C3E0:          AND.W #$000F                        ;; 00C3E0 : 29 0F 00    ;
CODE_00C3E3:          ORA $04                             ;; 00C3E3 : 05 04       ;
CODE_00C3E5:          TAY                                 ;; 00C3E5 : A8          ;
CODE_00C3E6:          LDA.L $7F837B                       ;; 00C3E6 : AF 7B 83 7F ;
CODE_00C3EA:          TAX                                 ;; 00C3EA : AA          ;
CODE_00C3EB:          SEP #$20                            ;; 00C3EB : E2 20       ; Accum (8 bit) 
CODE_00C3ED:          LDA.B #$25                          ;; 00C3ED : A9 25       ;
CODE_00C3EF:          STA [$6B],Y                         ;; 00C3EF : 97 6B       ;
CODE_00C3F1:          INY                                 ;; 00C3F1 : C8          ;
CODE_00C3F2:          LDA.B #$25                          ;; 00C3F2 : A9 25       ;
CODE_00C3F4:          STA [$6B],Y                         ;; 00C3F4 : 97 6B       ;
CODE_00C3F6:          REP #$20                            ;; 00C3F6 : C2 20       ; Accum (16 bit) 
CODE_00C3F8:          TYA                                 ;; 00C3F8 : 98          ;
CODE_00C3F9:          CLC                                 ;; 00C3F9 : 18          ;
CODE_00C3FA:          ADC.W #$0010                        ;; 00C3FA : 69 10 00    ;
CODE_00C3FD:          TAY                                 ;; 00C3FD : A8          ;
CODE_00C3FE:          SEP #$20                            ;; 00C3FE : E2 20       ; Accum (8 bit) 
CODE_00C400:          LDA.B #$25                          ;; 00C400 : A9 25       ;
CODE_00C402:          STA [$6B],Y                         ;; 00C402 : 97 6B       ;
CODE_00C404:          DEY                                 ;; 00C404 : 88          ;
CODE_00C405:          LDA.B #$25                          ;; 00C405 : A9 25       ;
CODE_00C407:          STA [$6B],Y                         ;; 00C407 : 97 6B       ;
CODE_00C409:          LDY.W #$0003                        ;; 00C409 : A0 03 00    ;
CODE_00C40C:          LDA $06                             ;; 00C40C : A5 06       ;
CODE_00C40E:          STA.L $7F837D,X                     ;; 00C40E : 9F 7D 83 7F ;
CODE_00C412:          LDA $07                             ;; 00C412 : A5 07       ;
CODE_00C414:          STA.L $7F837E,X                     ;; 00C414 : 9F 7E 83 7F ;
CODE_00C418:          LDA.B #$40                          ;; 00C418 : A9 40       ;
CODE_00C41A:          STA.L $7F837F,X                     ;; 00C41A : 9F 7F 83 7F ;
CODE_00C41E:          LDA.B #$06                          ;; 00C41E : A9 06       ;
CODE_00C420:          STA.L $7F8380,X                     ;; 00C420 : 9F 80 83 7F ;
CODE_00C424:          REP #$20                            ;; 00C424 : C2 20       ; Accum (16 bit) 
CODE_00C426:          LDA.W #$18F8                        ;; 00C426 : A9 F8 18    ;
CODE_00C429:          STA.L $7F8381,X                     ;; 00C429 : 9F 81 83 7F ;
CODE_00C42D:          TXA                                 ;; 00C42D : 8A          ;
CODE_00C42E:          CLC                                 ;; 00C42E : 18          ;
CODE_00C42F:          ADC.W #$0006                        ;; 00C42F : 69 06 00    ;
CODE_00C432:          TAX                                 ;; 00C432 : AA          ;
CODE_00C433:          SEP #$20                            ;; 00C433 : E2 20       ; Accum (8 bit) 
CODE_00C435:          LDA $07                             ;; 00C435 : A5 07       ;
CODE_00C437:          CLC                                 ;; 00C437 : 18          ;
CODE_00C438:          ADC.B #$20                          ;; 00C438 : 69 20       ;
CODE_00C43A:          STA $07                             ;; 00C43A : 85 07       ;
CODE_00C43C:          LDA $06                             ;; 00C43C : A5 06       ;
CODE_00C43E:          ADC.B #$00                          ;; 00C43E : 69 00       ;
CODE_00C440:          STA $06                             ;; 00C440 : 85 06       ;
CODE_00C442:          DEY                                 ;; 00C442 : 88          ;
CODE_00C443:          BPL CODE_00C40C                     ;; 00C443 : 10 C7       ;
CODE_00C445:          LDA.B #$FF                          ;; 00C445 : A9 FF       ;
CODE_00C447:          STA.L $7F837D,X                     ;; 00C447 : 9F 7D 83 7F ;
CODE_00C44B:          REP #$20                            ;; 00C44B : C2 20       ; Accum (16 bit) 
CODE_00C44D:          TXA                                 ;; 00C44D : 8A          ;
CODE_00C44E:          STA.L $7F837B                       ;; 00C44E : 8F 7B 83 7F ;
Return00C452:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00C453:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; 00C453               ;
                      .db $FF,$FF,$FF,$FF,$FF,$80,$40,$20 ;; ?QPWZ?               ;
                      .db $10,$08,$04,$02,$01,$80,$40,$20 ;; ?QPWZ?               ;
                      .db $10,$08,$04,$02,$01             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00C470:          .db $90,$00,$90,$00                 ;; 00C470               ;
                                                          ;;                      ;
DATA_00C474:          .db $04,$FC,$04,$FC                 ;; 00C474               ;
                                                          ;;                      ;
DATA_00C478:          .db $30,$33,$33,$30,$01,$00         ;; 00C478               ;
                                                          ;;                      ;
CODE_00C47E:          STZ $78                             ;; 00C47E : 64 78       ; Index (8 bit) Accum (8 bit) 
CODE_00C480:          LDA.W $13CB                         ;; 00C480 : AD CB 13    ;
CODE_00C483:          BPL CODE_00C48C                     ;; 00C483 : 10 07       ;
ADDR_00C485:          JSL.L CODE_01C580                   ;; 00C485 : 22 80 C5 01 ;
ADDR_00C489:          STZ.W $13CB                         ;; 00C489 : 9C CB 13    ;
CODE_00C48C:          LDY.W $1434                         ;; 00C48C : AC 34 14    ;
CODE_00C48F:          BEQ CODE_00C4BA                     ;; 00C48F : F0 29       ;
CODE_00C491:          STY.W $13FB                         ;; 00C491 : 8C FB 13    ;
CODE_00C494:          STY RAM_SpritesLocked               ;; 00C494 : 84 9D       ;
CODE_00C496:          LDX.W $1435                         ;; 00C496 : AE 35 14    ;
CODE_00C499:          LDA.W $1433                         ;; 00C499 : AD 33 14    ;
CODE_00C49C:          CMP.W DATA_00C470,X                 ;; 00C49C : DD 70 C4    ;
CODE_00C49F:          BNE CODE_00C4BC                     ;; 00C49F : D0 1B       ;
CODE_00C4A1:          DEY                                 ;; 00C4A1 : 88          ;
CODE_00C4A2:          BNE CODE_00C4B7                     ;; 00C4A2 : D0 13       ;
CODE_00C4A4:          INC.W $1435                         ;; 00C4A4 : EE 35 14    ;
CODE_00C4A7:          TXA                                 ;; 00C4A7 : 8A          ;
CODE_00C4A8:          LSR                                 ;; 00C4A8 : 4A          ;
CODE_00C4A9:          BCC CODE_00C4F8                     ;; 00C4A9 : 90 4D       ;
CODE_00C4AB:          JSR.W CODE_00FCEC                   ;; 00C4AB : 20 EC FC    ;
CODE_00C4AE:          LDA.B #$02                          ;; 00C4AE : A9 02       ;
CODE_00C4B0:          LDY.B #$0B                          ;; 00C4B0 : A0 0B       ;
CODE_00C4B2:          JSR.W CODE_00C9FE                   ;; 00C4B2 : 20 FE C9    ;
CODE_00C4B5:          LDY.B #$00                          ;; 00C4B5 : A0 00       ;
CODE_00C4B7:          STY.W $1434                         ;; 00C4B7 : 8C 34 14    ;
CODE_00C4BA:          BRA CODE_00C4F8                     ;; 00C4BA : 80 3C       ;
                                                          ;;                      ;
CODE_00C4BC:          CLC                                 ;; 00C4BC : 18          ;
CODE_00C4BD:          ADC.W DATA_00C474,X                 ;; 00C4BD : 7D 74 C4    ;
CODE_00C4C0:          STA.W $1433                         ;; 00C4C0 : 8D 33 14    ;
CODE_00C4C3:          LDA.B #$22                          ;; 00C4C3 : A9 22       ;
CODE_00C4C5:          STA $41                             ;; 00C4C5 : 85 41       ;
CODE_00C4C7:          LDA.B #$02                          ;; 00C4C7 : A9 02       ;
CODE_00C4C9:          STA $42                             ;; 00C4C9 : 85 42       ;
CODE_00C4CB:          LDA.W DATA_00C478,X                 ;; 00C4CB : BD 78 C4    ;
CODE_00C4CE:          STA $43                             ;; 00C4CE : 85 43       ;
CODE_00C4D0:          LDA.B #$12                          ;; 00C4D0 : A9 12       ;
CODE_00C4D2:          STA $44                             ;; 00C4D2 : 85 44       ;
CODE_00C4D4:          REP #$20                            ;; 00C4D4 : C2 20       ; Accum (16 bit) 
CODE_00C4D6:          LDA.W #$CB93                        ;; 00C4D6 : A9 93 CB    ;
CODE_00C4D9:          STA $04                             ;; 00C4D9 : 85 04       ;
CODE_00C4DB:          STZ $06                             ;; 00C4DB : 64 06       ;
CODE_00C4DD:          SEP #$20                            ;; 00C4DD : E2 20       ; Accum (8 bit) 
CODE_00C4DF:          LDA.W RAM_KeyHolePos1               ;; 00C4DF : AD 36 14    ;
CODE_00C4E2:          SEC                                 ;; 00C4E2 : 38          ;
CODE_00C4E3:          SBC RAM_ScreenBndryXLo              ;; 00C4E3 : E5 1A       ;
CODE_00C4E5:          CLC                                 ;; 00C4E5 : 18          ;
CODE_00C4E6:          ADC.B #$04                          ;; 00C4E6 : 69 04       ;
CODE_00C4E8:          STA $00                             ;; 00C4E8 : 85 00       ;
CODE_00C4EA:          LDA.W RAM_KeyHolePos2               ;; 00C4EA : AD 38 14    ;
CODE_00C4ED:          SEC                                 ;; 00C4ED : 38          ;
CODE_00C4EE:          SBC RAM_ScreenBndryYLo              ;; 00C4EE : E5 1C       ;
CODE_00C4F0:          CLC                                 ;; 00C4F0 : 18          ;
CODE_00C4F1:          ADC.B #$10                          ;; 00C4F1 : 69 10       ;
CODE_00C4F3:          STA $01                             ;; 00C4F3 : 85 01       ;
CODE_00C4F5:          JSR.W CODE_00CA88                   ;; 00C4F5 : 20 88 CA    ;
CODE_00C4F8:          LDA.W $13FB                         ;; 00C4F8 : AD FB 13    ;
CODE_00C4FB:          BEQ CODE_00C500                     ;; 00C4FB : F0 03       ;
CODE_00C4FD:          JMP.W CODE_00C58F                   ;; 00C4FD : 4C 8F C5    ;
                                                          ;;                      ;
CODE_00C500:          LDA RAM_SpritesLocked               ;; 00C500 : A5 9D       ; \ Branch if sprites locked 
CODE_00C502:          BNE CODE_00C569                     ;; 00C502 : D0 65       ; / 
CODE_00C504:          INC RAM_FrameCounterB               ;; 00C504 : E6 14       ;
CODE_00C506:          LDX.B #$13                          ;; 00C506 : A2 13       ;
CODE_00C508:          LDA.W $1495,X                       ;; 00C508 : BD 95 14    ;
CODE_00C50B:          BEQ CODE_00C510                     ;; 00C50B : F0 03       ;
CODE_00C50D:          DEC.W $1495,X                       ;; 00C50D : DE 95 14    ;
CODE_00C510:          DEX                                 ;; 00C510 : CA          ;
CODE_00C511:          BNE CODE_00C508                     ;; 00C511 : D0 F5       ;
CODE_00C513:          LDA RAM_FrameCounterB               ;; 00C513 : A5 14       ;
CODE_00C515:          AND.B #$03                          ;; 00C515 : 29 03       ;
CODE_00C517:          BNE CODE_00C569                     ;; 00C517 : D0 50       ;
CODE_00C519:          LDA.W $1425                         ;; 00C519 : AD 25 14    ;
CODE_00C51C:          BEQ CODE_00C533                     ;; 00C51C : F0 15       ;
CODE_00C51E:          LDA.W $14AB                         ;; 00C51E : AD AB 14    ;
CODE_00C521:          CMP.B #$44                          ;; 00C521 : C9 44       ;
CODE_00C523:          BNE CODE_00C52A                     ;; 00C523 : D0 05       ;
CODE_00C525:          LDY.B #$14                          ;; 00C525 : A0 14       ;
CODE_00C527:          STY.W $1DFB                         ;; 00C527 : 8C FB 1D    ; / Change music 
CODE_00C52A:          CMP.B #$01                          ;; 00C52A : C9 01       ;
CODE_00C52C:          BNE CODE_00C533                     ;; 00C52C : D0 05       ;
CODE_00C52E:          LDY.B #$0B                          ;; 00C52E : A0 0B       ;
CODE_00C530:          STY.W RAM_GameMode                  ;; 00C530 : 8C 00 01    ;
CODE_00C533:          LDY.W RAM_BluePowTimer              ;; 00C533 : AC AD 14    ;
CODE_00C536:          CPY.W RAM_SilverPowTimer            ;; 00C536 : CC AE 14    ;
CODE_00C539:          BCS CODE_00C53E                     ;; 00C539 : B0 03       ;
CODE_00C53B:          LDY.W RAM_SilverPowTimer            ;; 00C53B : AC AE 14    ;
CODE_00C53E:          LDA.W $0DDA                         ;; 00C53E : AD DA 0D    ;
CODE_00C541:          BMI CODE_00C54F                     ;; 00C541 : 30 0C       ;
CODE_00C543:          CPY.B #$01                          ;; 00C543 : C0 01       ;
CODE_00C545:          BNE CODE_00C54F                     ;; 00C545 : D0 08       ;
CODE_00C547:          LDY.W $190C                         ;; 00C547 : AC 0C 19    ;
CODE_00C54A:          BNE CODE_00C54F                     ;; 00C54A : D0 03       ;
CODE_00C54C:          STA.W $1DFB                         ;; 00C54C : 8D FB 1D    ; / Change music 
CODE_00C54F:          CMP.B #$FF                          ;; 00C54F : C9 FF       ;
CODE_00C551:          BEQ CODE_00C55C                     ;; 00C551 : F0 09       ;
CODE_00C553:          CPY.B #$1E                          ;; 00C553 : C0 1E       ;
CODE_00C555:          BNE CODE_00C55C                     ;; 00C555 : D0 05       ;
CODE_00C557:          LDA.B #$24                          ;; 00C557 : A9 24       ; \ Play sound effect 
CODE_00C559:          STA.W $1DFC                         ;; 00C559 : 8D FC 1D    ; / 
CODE_00C55C:          LDX.B #$06                          ;; 00C55C : A2 06       ;
CODE_00C55E:          LDA.W $14A8,X                       ;; 00C55E : BD A8 14    ;
CODE_00C561:          BEQ CODE_00C566                     ;; 00C561 : F0 03       ;
CODE_00C563:          DEC.W $14A8,X                       ;; 00C563 : DE A8 14    ;
CODE_00C566:          DEX                                 ;; 00C566 : CA          ;
CODE_00C567:          BNE CODE_00C55E                     ;; 00C567 : D0 F5       ;
CODE_00C569:          JSR.W CODE_00C593                   ;; 00C569 : 20 93 C5    ;
CODE_00C56C:          LDA $16                             ;; 00C56C : A5 16       ;
CODE_00C56E:          AND.B #$20                          ;; 00C56E : 29 20       ;
CODE_00C570:          BEQ CODE_00C58F                     ;; 00C570 : F0 1D       ;
CODE_00C572:          LDA RAM_ControllerA                 ;; 00C572 : A5 15       ;
CODE_00C574:          AND.B #$08                          ;; 00C574 : 29 08       ;
CODE_00C576:          BRA CODE_00C585                     ;; 00C576 : 80 0D       ; Change to BEQ to reach debug routine below 
                                                          ;;                      ;
ADDR_00C578:          LDA RAM_MarioPowerUp                ;; 00C578 : A5 19       ; \ Unreachable 
ADDR_00C57A:          INC A                               ;; 00C57A : 1A          ;  | Debug: Cycle through powerups 
ADDR_00C57B:          CMP.B #$04                          ;; 00C57B : C9 04       ;  | 
ADDR_00C57D:          BCC ADDR_00C581                     ;; 00C57D : 90 02       ;  | 
ADDR_00C57F:          LDA.B #$00                          ;; 00C57F : A9 00       ;  | 
ADDR_00C581:          STA RAM_MarioPowerUp                ;; 00C581 : 85 19       ;  | 
ADDR_00C583:          BRA CODE_00C58F                     ;; 00C583 : 80 0A       ; / 
                                                          ;;                      ;
CODE_00C585:          PHB                                 ;; 00C585 : 8B          ;
CODE_00C586:          LDA.B #$02                          ;; 00C586 : A9 02       ;
CODE_00C588:          PHA                                 ;; 00C588 : 48          ;
CODE_00C589:          PLB                                 ;; 00C589 : AB          ;
CODE_00C58A:          JSL.L CODE_028008                   ;; 00C58A : 22 08 80 02 ;
CODE_00C58E:          PLB                                 ;; 00C58E : AB          ;
CODE_00C58F:          STZ.W $1402                         ;; 00C58F : 9C 02 14    ;
Return00C592:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C593:          LDA RAM_MarioAnimation              ;; 00C593 : A5 71       ;
CODE_00C595:          JSL.L ExecutePtr                    ;; 00C595 : 22 DF 86 00 ;
                                                          ;;                      ;
AnimationSeqPtr:      .dw ResetAni                        ;; ?QPWZ? : 68 CC       ; 0 - Reset                        
                      .dw PowerDownAni                    ;; ?QPWZ? : 29 D1       ; 1 - Power down                   
                      .dw MushroomAni                     ;; ?QPWZ? : 47 D1       ; 2 - Mushroom power up            
                      .dw CapeAni                         ;; ?QPWZ? : 5F D1       ; 3 - Cape power up                
                      .dw FlowerAni                       ;; ?QPWZ? : 6F D1       ; 4 - Flower power up              
                      .dw DoorPipeAni                     ;; ?QPWZ? : 97 D1       ; 5 - Door/Horizontal pipe exit    
                      .dw VertPipeAni                     ;; ?QPWZ? : 03 D2       ; 6 - Vertical pipe exit           
                      .dw PipeCannonAni                   ;; ?QPWZ? : 87 D2       ; 7 - Shot out of diagonal pipe    
                      .dw YoshiWingsAni                   ;; ?QPWZ? : FD C7       ; 8 - Yoshi wings exit             
                      .dw MarioDeathAni                   ;; ?QPWZ? : B6 D0       ; 9 - Mario Death                  
                      .dw EnterCastleAni                  ;; ?QPWZ? : 70 C8       ; A - Enter Castle                 
                      .dw UnknownAniB                     ;; ?QPWZ? : B5 C5       ; B - freeze forever               
                      .dw UnknownAniC                     ;; ?QPWZ? : E7 C6       ; C - random movement??            
                      .dw Return00C592                    ;; ?QPWZ? : 92 C5       ; D - freeze forever               
                                                          ;;                      ;
UnknownAniB:          STZ.W $13DE                         ;; ?QPWZ? : 9C DE 13    ;
CODE_00C5B8:          STZ.W $13ED                         ;; 00C5B8 : 9C ED 13    ;
CODE_00C5BB:          LDA.W $1493                         ;; 00C5BB : AD 93 14    ;
CODE_00C5BE:          BEQ CODE_00C5CE                     ;; 00C5BE : F0 0E       ;
CODE_00C5C0:          JSL.L CODE_0CAB13                   ;; 00C5C0 : 22 13 AB 0C ;
CODE_00C5C4:          LDA.W RAM_GameMode                  ;; 00C5C4 : AD 00 01    ;
CODE_00C5C7:          CMP.B #$14                          ;; 00C5C7 : C9 14       ;
CODE_00C5C9:          BEQ CODE_00C5D1                     ;; 00C5C9 : F0 06       ;
CODE_00C5CB:          JMP.W CODE_00C95B                   ;; 00C5CB : 4C 5B C9    ;
                                                          ;;                      ;
CODE_00C5CE:          STZ.W $0D9F                         ;; 00C5CE : 9C 9F 0D    ;
CODE_00C5D1:          LDA.B #$01                          ;; 00C5D1 : A9 01       ;
CODE_00C5D3:          STA.W $1B88                         ;; 00C5D3 : 8D 88 1B    ;
CODE_00C5D6:          LDA.B #$07                          ;; 00C5D6 : A9 07       ;
                                                          ;;                      ;
Instr00C5D8:          .db $8D,$28,$19                     ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00C5DB:          JSR.W NoButtons                     ;; 00C5DB : 20 2D F6    ;
CODE_00C5DE:          JMP.W CODE_00CD24                   ;; 00C5DE : 4C 24 CD    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00C5E1:          .db $10,$30,$31,$32,$33,$34,$0E     ;; 00C5E1               ;
                                                          ;;                      ;
DATA_00C5E8:          .db $26                             ;; 00C5E8               ;
                                                          ;;                      ;
DATA_00C5E9:          .db $11,$02,$48,$00,$60,$01,$09,$80 ;; 00C5E9               ;
                      .db $08,$00,$20,$04,$60,$00,$01,$FF ;; ?QPWZ?               ;
                      .db $01,$02,$48,$00,$60,$41,$2C,$C1 ;; ?QPWZ?               ;
                      .db $04,$27,$04,$2F,$08,$25,$01,$2F ;; ?QPWZ?               ;
                      .db $04,$27,$04,$00,$08,$41,$1B,$C1 ;; ?QPWZ?               ;
                      .db $04,$27,$04,$2F,$08,$25,$01,$2F ;; ?QPWZ?               ;
                      .db $04,$27,$04,$00,$04,$01,$08,$20 ;; ?QPWZ?               ;
                      .db $01,$01,$10,$00,$08,$41,$12,$81 ;; ?QPWZ?               ;
                      .db $0A,$00,$40,$82,$10,$02,$20,$00 ;; ?QPWZ?               ;
                      .db $30,$01,$01,$00,$50,$22,$01,$FF ;; ?QPWZ?               ;
                      .db $01,$02,$48,$00,$60,$01,$09,$80 ;; ?QPWZ?               ;
                      .db $08,$00,$20,$04,$60,$00,$20,$10 ;; ?QPWZ?               ;
                      .db $20,$01,$58,$00,$2C,$31,$01,$3A ;; ?QPWZ?               ;
                      .db $10,$31,$01,$3A,$10,$31,$01,$3A ;; ?QPWZ?               ;
                      .db $20,$28,$A0,$28,$40,$29,$04,$28 ;; ?QPWZ?               ;
                      .db $04,$29,$04,$28,$04,$29,$04,$28 ;; ?QPWZ?               ;
                      .db $40,$22,$01,$FF,$01,$02,$48,$00 ;; ?QPWZ?               ;
                      .db $60,$01,$09,$80,$08,$00,$20,$04 ;; ?QPWZ?               ;
                      .db $60,$10,$20,$31,$01,$18,$60,$31 ;; ?QPWZ?               ;
                      .db $01,$3B,$80,$31,$01,$3C,$40,$FF ;; ?QPWZ?               ;
                      .db $01,$02,$48,$00,$60,$02,$30,$01 ;; ?QPWZ?               ;
                      .db $84,$00,$20,$23,$01,$01,$16,$02 ;; ?QPWZ?               ;
                      .db $20,$20,$01,$01,$20,$02,$20,$01 ;; ?QPWZ?               ;
                      .db $02,$00,$80,$FF,$01,$02,$48,$00 ;; ?QPWZ?               ;
                      .db $60,$02,$28,$01,$83,$00,$28,$24 ;; ?QPWZ?               ;
                      .db $01,$02,$01,$00,$FF,$00,$40,$20 ;; ?QPWZ?               ;
                      .db $01,$00,$40,$02,$60,$00,$30,$FF ;; ?QPWZ?               ;
                      .db $01,$02,$48,$00,$60,$01,$4E,$00 ;; ?QPWZ?               ;
                      .db $40,$26,$01,$00,$1E,$20,$01,$00 ;; ?QPWZ?               ;
                      .db $20,$08,$10,$20,$01,$2D,$18,$00 ;; ?QPWZ?               ;
                      .db $A0,$20,$01,$2E,$01,$FF         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00C6DF:          .db $01,$00,$10,$A0,$84,$50,$BC,$D8 ;; 00C6DF               ;
                                                          ;;                      ;
UnknownAniC:          JSR.W NoButtons                     ;; ?QPWZ? : 20 2D F6    ;
CODE_00C6EA:          STZ.W $13DE                         ;; 00C6EA : 9C DE 13    ;
CODE_00C6ED:          JSR.W CODE_00DC2D                   ;; 00C6ED : 20 2D DC    ;
CODE_00C6F0:          LDA RAM_MarioSpeedY                 ;; 00C6F0 : A5 7D       ; \ Branch if Mario has upward speed 
CODE_00C6F2:          BMI CODE_00C73F                     ;; 00C6F2 : 30 4B       ; / 
CODE_00C6F4:          LDA RAM_MarioYPos                   ;; 00C6F4 : A5 96       ;
CODE_00C6F6:          CMP.B #$58                          ;; 00C6F6 : C9 58       ;
CODE_00C6F8:          BCS CODE_00C739                     ;; 00C6F8 : B0 3F       ;
CODE_00C6FA:          LDY RAM_MarioXPos                   ;; 00C6FA : A4 94       ;
CODE_00C6FC:          CPY.B #$40                          ;; 00C6FC : C0 40       ;
CODE_00C6FE:          BCC CODE_00C73F                     ;; 00C6FE : 90 3F       ;
CODE_00C700:          CPY.B #$60                          ;; 00C700 : C0 60       ;
CODE_00C702:          BCC CODE_00C71C                     ;; 00C702 : 90 18       ;
CODE_00C704:          LDY RAM_ScreenBndryYLo              ;; 00C704 : A4 1C       ;
CODE_00C706:          BEQ CODE_00C73F                     ;; 00C706 : F0 37       ;
CODE_00C708:          CLC                                 ;; 00C708 : 18          ;
CODE_00C709:          ADC RAM_ScreenBndryYLo              ;; 00C709 : 65 1C       ;
CODE_00C70B:          CMP.B #$1C                          ;; 00C70B : C9 1C       ;
CODE_00C70D:          BMI CODE_00C73F                     ;; 00C70D : 30 30       ;
CODE_00C70F:          SEC                                 ;; 00C70F : 38          ;
CODE_00C710:          SBC RAM_ScreenBndryYLo              ;; 00C710 : E5 1C       ;
CODE_00C712:          LDX.B #$D0                          ;; 00C712 : A2 D0       ;
CODE_00C714:          LDY RAM_MarioDirection              ;; 00C714 : A4 76       ;
CODE_00C716:          BEQ CODE_00C730                     ;; 00C716 : F0 18       ;
CODE_00C718:          LDY.B #$00                          ;; 00C718 : A0 00       ;
CODE_00C71A:          BRA CODE_00C72E                     ;; 00C71A : 80 12       ;
                                                          ;;                      ;
CODE_00C71C:          CMP.B #$4C                          ;; 00C71C : C9 4C       ;
CODE_00C71E:          BCC CODE_00C73F                     ;; 00C71E : 90 1F       ;
CODE_00C720:          LDA.B #$1B                          ;; 00C720 : A9 1B       ; \ Play sound effect 
CODE_00C722:          STA.W $1DFC                         ;; 00C722 : 8D FC 1D    ; / 
CODE_00C725:          INC.W RAM_ScrollSprNum              ;; 00C725 : EE 3E 14    ;
CODE_00C728:          LDA.B #$4C                          ;; 00C728 : A9 4C       ;
CODE_00C72A:          LDY.B #$F4                          ;; 00C72A : A0 F4       ;
CODE_00C72C:          LDX.B #$C0                          ;; 00C72C : A2 C0       ;
CODE_00C72E:          STY RAM_MarioSpeedX                 ;; 00C72E : 84 7B       ;
CODE_00C730:          STX RAM_MarioSpeedY                 ;; 00C730 : 86 7D       ;
CODE_00C732:          LDX.B #$01                          ;; 00C732 : A2 01       ; \ Play sound effect 
CODE_00C734:          STX.W $1DF9                         ;; 00C734 : 8E F9 1D    ; / 
CODE_00C737:          BRA CODE_00C73D                     ;; 00C737 : 80 04       ;
                                                          ;;                      ;
CODE_00C739:          STZ RAM_IsFlying                    ;; 00C739 : 64 72       ;
CODE_00C73B:          LDA.B #$58                          ;; 00C73B : A9 58       ;
CODE_00C73D:          STA RAM_MarioYPos                   ;; 00C73D : 85 96       ;
CODE_00C73F:          LDX.W $13C6                         ;; 00C73F : AE C6 13    ;
CODE_00C742:          LDA $8F                             ;; 00C742 : A5 8F       ;
CODE_00C744:          CLC                                 ;; 00C744 : 18          ;
CODE_00C745:          ADC.W DATA_00C6DF,X                 ;; 00C745 : 7D DF C6    ;
CODE_00C748:          TAX                                 ;; 00C748 : AA          ;
CODE_00C749:          LDA $88                             ;; 00C749 : A5 88       ;
CODE_00C74B:          BNE CODE_00C764                     ;; 00C74B : D0 17       ;
CODE_00C74D:          INC $8F                             ;; 00C74D : E6 8F       ;
CODE_00C74F:          INC $8F                             ;; 00C74F : E6 8F       ;
CODE_00C751:          INX                                 ;; 00C751 : E8          ;
CODE_00C752:          INX                                 ;; 00C752 : E8          ;
CODE_00C753:          LDA.W DATA_00C5E9,X                 ;; 00C753 : BD E9 C5    ;
CODE_00C756:          STA $88                             ;; 00C756 : 85 88       ;
CODE_00C758:          LDA.W DATA_00C5E8,X                 ;; 00C758 : BD E8 C5    ;
CODE_00C75B:          CMP.B #$2D                          ;; 00C75B : C9 2D       ;
CODE_00C75D:          BNE CODE_00C764                     ;; 00C75D : D0 05       ;
CODE_00C75F:          LDA.B #$1E                          ;; 00C75F : A9 1E       ; \ Play sound effect 
CODE_00C761:          STA.W $1DF9                         ;; 00C761 : 8D F9 1D    ; / 
CODE_00C764:          LDA.W DATA_00C5E8,X                 ;; 00C764 : BD E8 C5    ;
CODE_00C767:          CMP.B #$FF                          ;; 00C767 : C9 FF       ;
CODE_00C769:          BNE CODE_00C76E                     ;; 00C769 : D0 03       ;
CODE_00C76B:          JMP.W Return00C7F8                  ;; 00C76B : 4C F8 C7    ;
                                                          ;;                      ;
CODE_00C76E:          PHA                                 ;; 00C76E : 48          ;
CODE_00C76F:          AND.B #$10                          ;; 00C76F : 29 10       ;
CODE_00C771:          BEQ CODE_00C777                     ;; 00C771 : F0 04       ;
CODE_00C773:          JSL.L CODE_0CD4A4                   ;; 00C773 : 22 A4 D4 0C ;
CODE_00C777:          PLA                                 ;; 00C777 : 68          ;
CODE_00C778:          TAY                                 ;; 00C778 : A8          ;
CODE_00C779:          AND.B #$20                          ;; 00C779 : 29 20       ;
CODE_00C77B:          BNE CODE_00C789                     ;; 00C77B : D0 0C       ;
CODE_00C77D:          STY RAM_ControllerA                 ;; 00C77D : 84 15       ;
CODE_00C77F:          TYA                                 ;; 00C77F : 98          ;
CODE_00C780:          AND.B #$BF                          ;; 00C780 : 29 BF       ;
CODE_00C782:          STA $16                             ;; 00C782 : 85 16       ;
CODE_00C784:          JSR.W CODE_00CD39                   ;; 00C784 : 20 39 CD    ;
CODE_00C787:          BRA CODE_00C7F6                     ;; 00C787 : 80 6D       ;
                                                          ;;                      ;
CODE_00C789:          TYA                                 ;; 00C789 : 98          ;
CODE_00C78A:          AND.B #$0F                          ;; 00C78A : 29 0F       ;
CODE_00C78C:          CMP.B #$07                          ;; 00C78C : C9 07       ;
CODE_00C78E:          BCS CODE_00C7E9                     ;; 00C78E : B0 59       ;
CODE_00C790:          DEC A                               ;; 00C790 : 3A          ;
CODE_00C791:          BPL CODE_00C7A2                     ;; 00C791 : 10 0F       ;
CODE_00C793:          LDA.W RAM_PickUpImgTimer            ;; 00C793 : AD 98 14    ;
CODE_00C796:          BEQ CODE_00C79D                     ;; 00C796 : F0 05       ;
CODE_00C798:          LDA.B #$09                          ;; 00C798 : A9 09       ; \ Play sound effect 
CODE_00C79A:          STA.W $1DF9                         ;; 00C79A : 8D F9 1D    ; / 
CODE_00C79D:          INC.W RAM_ScrollSprNum              ;; 00C79D : EE 3E 14    ;
CODE_00C7A0:          BRA CODE_00C7F6                     ;; 00C7A0 : 80 54       ;
                                                          ;;                      ;
CODE_00C7A2:          BNE CODE_00C7A9                     ;; 00C7A2 : D0 05       ;
CODE_00C7A4:          INC.W $1445                         ;; 00C7A4 : EE 45 14    ;
CODE_00C7A7:          BRA CODE_00C7F6                     ;; 00C7A7 : 80 4D       ;
                                                          ;;                      ;
CODE_00C7A9:          DEC A                               ;; 00C7A9 : 3A          ;
CODE_00C7AA:          BNE CODE_00C7B6                     ;; 00C7AA : D0 0A       ;
CODE_00C7AC:          LDA.B #$0E                          ;; 00C7AC : A9 0E       ; \ Play sound effect 
CODE_00C7AE:          STA.W $1DF9                         ;; 00C7AE : 8D F9 1D    ; / 
CODE_00C7B1:          INC.W $1446                         ;; 00C7B1 : EE 46 14    ;
CODE_00C7B4:          BRA CODE_00C7F6                     ;; 00C7B4 : 80 40       ;
                                                          ;;                      ;
CODE_00C7B6:          DEC A                               ;; 00C7B6 : 3A          ;
CODE_00C7B7:          BNE CODE_00C7C0                     ;; 00C7B7 : D0 07       ;
CODE_00C7B9:          LDY.B #$88                          ;; 00C7B9 : A0 88       ;
CODE_00C7BB:          STY.W $1445                         ;; 00C7BB : 8C 45 14    ;
CODE_00C7BE:          BRA CODE_00C7F6                     ;; 00C7BE : 80 36       ;
                                                          ;;                      ;
CODE_00C7C0:          DEC A                               ;; 00C7C0 : 3A          ;
CODE_00C7C1:          BNE CODE_00C7CE                     ;; 00C7C1 : D0 0B       ;
CODE_00C7C3:          LDA.B #$38                          ;; 00C7C3 : A9 38       ;
CODE_00C7C5:          STA.W $1446                         ;; 00C7C5 : 8D 46 14    ;
CODE_00C7C8:          LDA.B #$07                          ;; 00C7C8 : A9 07       ;
CODE_00C7CA:          TRB RAM_MarioXPos                   ;; 00C7CA : 14 94       ;
CODE_00C7CC:          BRA CODE_00C7F6                     ;; 00C7CC : 80 28       ;
                                                          ;;                      ;
CODE_00C7CE:          DEC A                               ;; 00C7CE : 3A          ;
CODE_00C7CF:          BNE CODE_00C7DF                     ;; 00C7CF : D0 0E       ;
CODE_00C7D1:          LDA.B #$09                          ;; 00C7D1 : A9 09       ; \ Play sound effect 
CODE_00C7D3:          STA.W $1DFC                         ;; 00C7D3 : 8D FC 1D    ; / 
CODE_00C7D6:          LDA.B #$D8                          ;; 00C7D6 : A9 D8       ;
CODE_00C7D8:          STA RAM_MarioSpeedX                 ;; 00C7D8 : 85 7B       ;
CODE_00C7DA:          INC.W RAM_ScrollSprNum              ;; 00C7DA : EE 3E 14    ;
CODE_00C7DD:          BRA CODE_00C79D                     ;; 00C7DD : 80 BE       ;
                                                          ;;                      ;
CODE_00C7DF:          LDA.B #$20                          ;; 00C7DF : A9 20       ;
CODE_00C7E1:          STA.W RAM_PickUpImgTimer            ;; 00C7E1 : 8D 98 14    ;
CODE_00C7E4:          INC.W $148F                         ;; 00C7E4 : EE 8F 14    ;
CODE_00C7E7:          BRA CODE_00C7F6                     ;; 00C7E7 : 80 0D       ;
                                                          ;;                      ;
CODE_00C7E9:          TAY                                 ;; 00C7E9 : A8          ;
CODE_00C7EA:          LDA.W ADDR_00C5DA,Y                 ;; 00C7EA : B9 DA C5    ;
CODE_00C7ED:          STA.W MarioFrame                    ;; 00C7ED : 8D E0 13    ;
CODE_00C7F0:          STZ.W $148F                         ;; 00C7F0 : 9C 8F 14    ;
CODE_00C7F3:          JSR.W CODE_00D7E4                   ;; 00C7F3 : 20 E4 D7    ;
CODE_00C7F6:          DEC $88                             ;; 00C7F6 : C6 88       ;
Return00C7F8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00C7F9:          .db $C0,$FF,$A0,$00                 ;; 00C7F9               ;
                                                          ;;                      ;
YoshiWingsAni:        JSR.W NoButtons                     ;; ?QPWZ? : 20 2D F6    ;
CODE_00C800:          LDA.B #$0B                          ;; 00C800 : A9 0B       ;
CODE_00C802:          STA RAM_IsFlying                    ;; 00C802 : 85 72       ;
CODE_00C804:          JSR.W CODE_00D7E4                   ;; 00C804 : 20 E4 D7    ;
CODE_00C807:          LDA RAM_MarioSpeedY                 ;; 00C807 : A5 7D       ; \ Branch if Mario has downward speed 
CODE_00C809:          BPL CODE_00C80F                     ;; 00C809 : 10 04       ; / 
CODE_00C80B:          CMP.B #$90                          ;; 00C80B : C9 90       ; \ Branch if Y speed < #$90 
CODE_00C80D:          BCC CODE_00C814                     ;; 00C80D : 90 05       ; / 
CODE_00C80F:          SEC                                 ;; 00C80F : 38          ; \ Y Speed -= #$0D 
CODE_00C810:          SBC.B #$0D                          ;; 00C810 : E9 0D       ;  | 
CODE_00C812:          STA RAM_MarioSpeedY                 ;; 00C812 : 85 7D       ; / 
CODE_00C814:          LDA.B #$02                          ;; 00C814 : A9 02       ;
CODE_00C816:          LDY RAM_MarioSpeedX                 ;; 00C816 : A4 7B       ;
CODE_00C818:          BEQ CODE_00C827                     ;; 00C818 : F0 0D       ;
CODE_00C81A:          BMI CODE_00C81E                     ;; 00C81A : 30 02       ;
CODE_00C81C:          LDA.B #$FE                          ;; 00C81C : A9 FE       ;
CODE_00C81E:          CLC                                 ;; 00C81E : 18          ;
CODE_00C81F:          ADC RAM_MarioSpeedX                 ;; 00C81F : 65 7B       ;
CODE_00C821:          STA RAM_MarioSpeedX                 ;; 00C821 : 85 7B       ;
CODE_00C823:          BVC CODE_00C827                     ;; 00C823 : 50 02       ;
ADDR_00C825:          STZ RAM_MarioSpeedX                 ;; 00C825 : 64 7B       ;
CODE_00C827:          JSR.W CODE_00DC2D                   ;; 00C827 : 20 2D DC    ;
CODE_00C82A:          REP #$20                            ;; 00C82A : C2 20       ; Accum (16 bit) 
CODE_00C82C:          LDY.W $1B95                         ;; 00C82C : AC 95 1B    ;
CODE_00C82F:          LDA $80                             ;; 00C82F : A5 80       ;
CODE_00C831:          CMP.W DATA_00C7F9,Y                 ;; 00C831 : D9 F9 C7    ;
CODE_00C834:          SEP #$20                            ;; 00C834 : E2 20       ; Accum (8 bit) 
CODE_00C836:          BPL Instr00C845                     ;; 00C836 : 10 0D       ;
CODE_00C838:          STZ RAM_MarioAnimation              ;; 00C838 : 64 71       ;
CODE_00C83A:          TYA                                 ;; 00C83A : 98          ;
CODE_00C83B:          BNE Instr00C845                     ;; 00C83B : D0 08       ;
CODE_00C83D:          INY                                 ;; 00C83D : C8          ;
CODE_00C83E:          INY                                 ;; 00C83E : C8          ;
CODE_00C83F:          STY.W $1B95                         ;; 00C83F : 8C 95 1B    ;
CODE_00C842:          JSR.W CODE_00D273                   ;; 00C842 : 20 73 D2    ;
                                                          ;;                      ;
Instr00C845:          .db $4C,$8F,$CD                     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00C848:          .db $01,$5F,$00,$30,$08,$30,$00,$20 ;; 00C848               ;
                      .db $40,$01,$00,$30,$01,$80,$FF,$01 ;; ?QPWZ?               ;
                      .db $3F,$00,$30,$20,$01,$80,$06,$00 ;; ?QPWZ?               ;
                      .db $3A,$01,$38,$00,$30,$08,$30,$00 ;; ?QPWZ?               ;
                      .db $20,$40,$01,$00,$30,$01,$80,$FF ;; ?QPWZ?               ;
                                                          ;;                      ;
EnterCastleAni:       STZ.W $13E2                         ;; ?QPWZ? : 9C E2 13    ;
CODE_00C873:          LDX.W $1931                         ;; 00C873 : AE 31 19    ;
CODE_00C876:          BIT.W DATA_00A625,X                 ;; 00C876 : 3C 25 A6    ;
CODE_00C879:          BMI CODE_00C889                     ;; 00C879 : 30 0E       ;
CODE_00C87B:          BVS ADDR_00C883                     ;; 00C87B : 70 06       ;
CODE_00C87D:          JSL.L CODE_02F57C                   ;; 00C87D : 22 7C F5 02 ;
CODE_00C881:          BRA CODE_00C88D                     ;; 00C881 : 80 0A       ;
                                                          ;;                      ;
ADDR_00C883:          JSL.L ADDR_02F58C                   ;; 00C883 : 22 8C F5 02 ;
ADDR_00C887:          BRA CODE_00C88D                     ;; 00C887 : 80 04       ;
                                                          ;;                      ;
CODE_00C889:          JSL.L CODE_02F584                   ;; 00C889 : 22 84 F5 02 ;
CODE_00C88D:          LDX $88                             ;; 00C88D : A6 88       ;
CODE_00C88F:          LDA $16                             ;; 00C88F : A5 16       ;
CODE_00C891:          ORA $18                             ;; 00C891 : 05 18       ;
CODE_00C893:          JSR.W NoButtons                     ;; 00C893 : 20 2D F6    ;
CODE_00C896:          BMI CODE_00C8FB                     ;; 00C896 : 30 63       ;
CODE_00C898:          STZ.W $13DE                         ;; 00C898 : 9C DE 13    ;
CODE_00C89B:          DEC $89                             ;; 00C89B : C6 89       ;
CODE_00C89D:          BNE CODE_00C8A8                     ;; 00C89D : D0 09       ;
CODE_00C89F:          INX                                 ;; 00C89F : E8          ;
CODE_00C8A0:          INX                                 ;; 00C8A0 : E8          ;
CODE_00C8A1:          STX $88                             ;; 00C8A1 : 86 88       ;
CODE_00C8A3:          LDA.W ADDR_00C847,X                 ;; 00C8A3 : BD 47 C8    ;
CODE_00C8A6:          STA $89                             ;; 00C8A6 : 85 89       ;
CODE_00C8A8:          LDA.W ADDR_00C846,X                 ;; 00C8A8 : BD 46 C8    ;
CODE_00C8AB:          CMP.B #$FF                          ;; 00C8AB : C9 FF       ;
CODE_00C8AD:          BEQ CODE_00C8FB                     ;; 00C8AD : F0 4C       ;
CODE_00C8AF:          AND.B #$DF                          ;; 00C8AF : 29 DF       ;
CODE_00C8B1:          STA RAM_ControllerA                 ;; 00C8B1 : 85 15       ;
CODE_00C8B3:          CMP.W ADDR_00C846,X                 ;; 00C8B3 : DD 46 C8    ;
CODE_00C8B6:          BEQ CODE_00C8BC                     ;; 00C8B6 : F0 04       ;
CODE_00C8B8:          LDY.B #$80                          ;; 00C8B8 : A0 80       ;
CODE_00C8BA:          STY $18                             ;; 00C8BA : 84 18       ;
CODE_00C8BC:          ASL                                 ;; 00C8BC : 0A          ;
CODE_00C8BD:          BPL CODE_00C8D1                     ;; 00C8BD : 10 12       ;
CODE_00C8BF:          JSR.W NoButtons                     ;; 00C8BF : 20 2D F6    ;
CODE_00C8C2:          LDY.B #$B0                          ;; 00C8C2 : A0 B0       ;
CODE_00C8C4:          LDX.W $1931                         ;; 00C8C4 : AE 31 19    ;
CODE_00C8C7:          BIT.W DATA_00A625,X                 ;; 00C8C7 : 3C 25 A6    ;
CODE_00C8CA:          BMI CODE_00C8CE                     ;; 00C8CA : 30 02       ;
CODE_00C8CC:          LDY.B #$7F                          ;; 00C8CC : A0 7F       ;
CODE_00C8CE:          STY.W $18D9                         ;; 00C8CE : 8C D9 18    ;
CODE_00C8D1:          JSR.W CODE_00DC2D                   ;; 00C8D1 : 20 2D DC    ;
CODE_00C8D4:          LDA.B #$24                          ;; 00C8D4 : A9 24       ;
CODE_00C8D6:          STA RAM_IsFlying                    ;; 00C8D6 : 85 72       ;
CODE_00C8D8:          LDA.B #$6F                          ;; 00C8D8 : A9 6F       ;
CODE_00C8DA:          LDY.W RAM_OnYoshi                   ;; 00C8DA : AC 7A 18    ;
CODE_00C8DD:          BEQ CODE_00C8E1                     ;; 00C8DD : F0 02       ;
CODE_00C8DF:          LDA.B #$5F                          ;; 00C8DF : A9 5F       ;
CODE_00C8E1:          LDX.W $1931                         ;; 00C8E1 : AE 31 19    ;
CODE_00C8E4:          BIT.W DATA_00A625,X                 ;; 00C8E4 : 3C 25 A6    ;
CODE_00C8E7:          BVC CODE_00C8EC                     ;; 00C8E7 : 50 03       ;
ADDR_00C8E9:          SEC                                 ;; 00C8E9 : 38          ;
ADDR_00C8EA:          SBC.B #$10                          ;; 00C8EA : E9 10       ;
CODE_00C8EC:          CMP RAM_MarioYPos                   ;; 00C8EC : C5 96       ;
CODE_00C8EE:          BCS CODE_00C8F8                     ;; 00C8EE : B0 08       ;
CODE_00C8F0:          INC A                               ;; 00C8F0 : 1A          ;
CODE_00C8F1:          STA RAM_MarioYPos                   ;; 00C8F1 : 85 96       ;
CODE_00C8F3:          STZ RAM_IsFlying                    ;; 00C8F3 : 64 72       ;
CODE_00C8F5:          STZ.W RAM_IsSpinJump                ;; 00C8F5 : 9C 0D 14    ;
CODE_00C8F8:          JMP.W CODE_00CD82                   ;; 00C8F8 : 4C 82 CD    ;
                                                          ;;                      ;
CODE_00C8FB:          INC.W $141D                         ;; 00C8FB : EE 1D 14    ;
CODE_00C8FE:          LDA.B #$0F                          ;; 00C8FE : A9 0F       ;
CODE_00C900:          STA.W RAM_GameMode                  ;; 00C900 : 8D 00 01    ;
CODE_00C903:          CPX.B #$11                          ;; 00C903 : E0 11       ;
CODE_00C905:          BCC CODE_00C90A                     ;; 00C905 : 90 03       ;
CODE_00C907:          INC.W RAM_OWHasYoshi                ;; 00C907 : EE C1 0D    ;
CODE_00C90A:          LDA.B #$01                          ;; 00C90A : A9 01       ;
CODE_00C90C:          STA.W $1B9B                         ;; 00C90C : 8D 9B 1B    ;
CODE_00C90F:          LDA.B #$03                          ;; 00C90F : A9 03       ; \ Play sound effect 
CODE_00C911:          STA.W $1DFA                         ;; 00C911 : 8D FA 1D    ; / 
Return00C914:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C915:          JSR.W NoButtons                     ;; 00C915 : 20 2D F6    ;
CODE_00C918:          STZ.W $18C2                         ;; 00C918 : 9C C2 18    ;
CODE_00C91B:          STZ.W $13DE                         ;; 00C91B : 9C DE 13    ;
CODE_00C91E:          STZ.W $13ED                         ;; 00C91E : 9C ED 13    ;
CODE_00C921:          LDA RAM_IsVerticalLvl               ;; 00C921 : A5 5B       ;
CODE_00C923:          LSR                                 ;; 00C923 : 4A          ;
CODE_00C924:          BCS CODE_00C944                     ;; 00C924 : B0 1E       ;
CODE_00C926:          LDA.W $13C6                         ;; 00C926 : AD C6 13    ;
CODE_00C929:          ORA.W $13D2                         ;; 00C929 : 0D D2 13    ;
CODE_00C92C:          BEQ CODE_00C96B                     ;; 00C92C : F0 3D       ;
CODE_00C92E:          LDA RAM_IsFlying                    ;; 00C92E : A5 72       ;
CODE_00C930:          BEQ CODE_00C935                     ;; 00C930 : F0 03       ;
ADDR_00C932:          JSR.W CODE_00CCE0                   ;; 00C932 : 20 E0 CC    ;
CODE_00C935:          LDA.W $13D2                         ;; 00C935 : AD D2 13    ;
CODE_00C938:          BNE CODE_00C948                     ;; 00C938 : D0 0E       ;
CODE_00C93A:          JSR.W CODE_00B03E                   ;; 00C93A : 20 3E B0    ;
CODE_00C93D:          LDA.W $1495                         ;; 00C93D : AD 95 14    ;
CODE_00C940:          CMP.B #$40                          ;; 00C940 : C9 40       ;
CODE_00C942:          BCC Return00C96A                    ;; 00C942 : 90 26       ;
CODE_00C944:          JSL.L CODE_05CBFF                   ;; 00C944 : 22 FF CB 05 ;
CODE_00C948:          LDY.B #$01                          ;; 00C948 : A0 01       ;
CODE_00C94A:          STY RAM_SpritesLocked               ;; 00C94A : 84 9D       ;
CODE_00C94C:          LDA RAM_FrameCounter                ;; 00C94C : A5 13       ;
CODE_00C94E:          LSR                                 ;; 00C94E : 4A          ;
CODE_00C94F:          BCC Return00C96A                    ;; 00C94F : 90 19       ;
CODE_00C951:          DEC.W $1493                         ;; 00C951 : CE 93 14    ;
CODE_00C954:          BNE Return00C96A                    ;; 00C954 : D0 14       ;
CODE_00C956:          LDA.W $13D2                         ;; 00C956 : AD D2 13    ;
CODE_00C959:          BNE CODE_00C962                     ;; 00C959 : D0 07       ;
CODE_00C95B:          LDY.B #$0B                          ;; 00C95B : A0 0B       ;
CODE_00C95D:          LDA.B #$01                          ;; 00C95D : A9 01       ;
CODE_00C95F:          JMP.W CODE_00C9FE                   ;; 00C95F : 4C FE C9    ;
                                                          ;;                      ;
CODE_00C962:          LDA.B #$A0                          ;; 00C962 : A9 A0       ;
CODE_00C964:          STA.W $1DF5                         ;; 00C964 : 8D F5 1D    ;
CODE_00C967:          INC.W $1426                         ;; 00C967 : EE 26 14    ;
Return00C96A:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C96B:          JSR.W CODE_00AF17                   ;; 00C96B : 20 17 AF    ;
CODE_00C96E:          LDA.W $1B99                         ;; 00C96E : AD 99 1B    ;
CODE_00C971:          BNE CODE_00C9AF                     ;; 00C971 : D0 3C       ;
CODE_00C973:          LDA.W $1493                         ;; 00C973 : AD 93 14    ;
CODE_00C976:          CMP.B #$28                          ;; 00C976 : C9 28       ;
CODE_00C978:          BCC CODE_00C984                     ;; 00C978 : 90 0A       ;
CODE_00C97A:          LDA.B #$01                          ;; 00C97A : A9 01       ;
CODE_00C97C:          STA RAM_MarioDirection              ;; 00C97C : 85 76       ;
CODE_00C97E:          STA RAM_ControllerA                 ;; 00C97E : 85 15       ;
CODE_00C980:          LDA.B #$05                          ;; 00C980 : A9 05       ;
CODE_00C982:          STA RAM_MarioSpeedX                 ;; 00C982 : 85 7B       ;
CODE_00C984:          LDA RAM_IsFlying                    ;; 00C984 : A5 72       ;
CODE_00C986:          BEQ CODE_00C98B                     ;; 00C986 : F0 03       ;
CODE_00C988:          JSR.W CODE_00D76B                   ;; 00C988 : 20 6B D7    ;
CODE_00C98B:          LDA RAM_MarioSpeedX                 ;; 00C98B : A5 7B       ;
CODE_00C98D:          BNE Instr00C9A4                     ;; 00C98D : D0 15       ;
CODE_00C98F:          STZ.W $1411                         ;; 00C98F : 9C 11 14    ;
CODE_00C992:          JSR.W CODE_00CA3E                   ;; 00C992 : 20 3E CA    ;
CODE_00C995:          INC.W $1B99                         ;; 00C995 : EE 99 1B    ;
CODE_00C998:          LDA.B #$40                          ;; 00C998 : A9 40       ;
CODE_00C99A:          STA.W $1492                         ;; 00C99A : 8D 92 14    ;
CODE_00C99D:          ASL                                 ;; 00C99D : 0A          ;
CODE_00C99E:          STA.W $1494                         ;; 00C99E : 8D 94 14    ;
CODE_00C9A1:          STZ.W $1495                         ;; 00C9A1 : 9C 95 14    ;
                                                          ;;                      ;
Instr00C9A4:          .db $4C,$24,$CD                     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00C9A7:          .db $25,$07,$40,$0E,$20,$1A,$34,$32 ;; 00C9A7               ;
                                                          ;;                      ;
CODE_00C9AF:          JSR.W SetMarioPeaceImg              ;; 00C9AF : 20 31 CA    ;
CODE_00C9B2:          LDA.W $1492                         ;; 00C9B2 : AD 92 14    ;
CODE_00C9B5:          BEQ CODE_00C9C2                     ;; 00C9B5 : F0 0B       ;
CODE_00C9B7:          DEC.W $1492                         ;; 00C9B7 : CE 92 14    ;
CODE_00C9BA:          BNE Return00C9C1                    ;; 00C9BA : D0 05       ;
CODE_00C9BC:          LDA.B #$11                          ;; 00C9BC : A9 11       ;
CODE_00C9BE:          STA.W $1DFB                         ;; 00C9BE : 8D FB 1D    ; / Change music 
Return00C9C1:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00C9C2:          JSR.W CODE_00CA44                   ;; 00C9C2 : 20 44 CA    ;
CODE_00C9C5:          LDA.B #$01                          ;; 00C9C5 : A9 01       ;
CODE_00C9C7:          STA RAM_ControllerA                 ;; 00C9C7 : 85 15       ;
CODE_00C9C9:          JSR.W CODE_00CD24                   ;; 00C9C9 : 20 24 CD    ;
CODE_00C9CC:          LDA.W $1433                         ;; 00C9CC : AD 33 14    ;
CODE_00C9CF:          BNE Return00CA30                    ;; 00C9CF : D0 5F       ;
CODE_00C9D1:          LDA.W $141C                         ;; 00C9D1 : AD 1C 14    ; \ Branch if Goal Tape extra bits == #$02 
CODE_00C9D4:          INC A                               ;; 00C9D4 : 1A          ;  | (never happens) 
CODE_00C9D5:          CMP.B #$03                          ;; 00C9D5 : C9 03       ;  | 
CODE_00C9D7:          BNE CODE_00C9DF                     ;; 00C9D7 : D0 06       ; / 
ADDR_00C9D9:          LDA.B #$01                          ;; 00C9D9 : A9 01       ; \ Unreachable 
ADDR_00C9DB:          STA.W $1F11                         ;; 00C9DB : 8D 11 1F    ;  | Set submap to be Yoshi's Island 
ADDR_00C9DE:          LSR                                 ;; 00C9DE : 4A          ; / 
CODE_00C9DF:          LDY.B #$0C                          ;; 00C9DF : A0 0C       ;
CODE_00C9E1:          LDX.W $1425                         ;; 00C9E1 : AE 25 14    ;
CODE_00C9E4:          BEQ CODE_00C9F8                     ;; 00C9E4 : F0 12       ;
CODE_00C9E6:          LDX.B #$FF                          ;; 00C9E6 : A2 FF       ;
CODE_00C9E8:          STX.W $1425                         ;; 00C9E8 : 8E 25 14    ;
CODE_00C9EB:          LDX.B #$F0                          ;; 00C9EB : A2 F0       ;
CODE_00C9ED:          STX.W $0DB0                         ;; 00C9ED : 8E B0 0D    ;
CODE_00C9F0:          STZ.W $1493                         ;; 00C9F0 : 9C 93 14    ;
CODE_00C9F3:          STZ.W $0DDA                         ;; 00C9F3 : 9C DA 0D    ;
CODE_00C9F6:          LDY.B #$10                          ;; 00C9F6 : A0 10       ;
CODE_00C9F8:          STZ.W $0DAE                         ;; 00C9F8 : 9C AE 0D    ;
CODE_00C9FB:          STZ.W $0DAF                         ;; 00C9FB : 9C AF 0D    ;
CODE_00C9FE:          STA.W $0DD5                         ;; 00C9FE : 8D D5 0D    ; Store secret/normal exit info 
CODE_00CA01:          LDA.W $13C6                         ;; 00CA01 : AD C6 13    ;
CODE_00CA04:          BEQ CODE_00CA25                     ;; 00CA04 : F0 1F       ;
CODE_00CA06:          LDX.B #$08                          ;; 00CA06 : A2 08       ;
CODE_00CA08:          LDA.W $13BF                         ;; 00CA08 : AD BF 13    ;
CODE_00CA0B:          CMP.B #$13                          ;; 00CA0B : C9 13       ;
CODE_00CA0D:          BNE CODE_00CA12                     ;; 00CA0D : D0 03       ;
CODE_00CA0F:          INC.W $0DD5                         ;; 00CA0F : EE D5 0D    ;
CODE_00CA12:          CMP.B #$31                          ;; 00CA12 : C9 31       ;
CODE_00CA14:          BEQ CODE_00CA20                     ;; 00CA14 : F0 0A       ;
CODE_00CA16:          CMP.W ADDR_00C9A6,X                 ;; 00CA16 : DD A6 C9    ;
CODE_00CA19:          BEQ CODE_00CA20                     ;; 00CA19 : F0 05       ;
CODE_00CA1B:          DEX                                 ;; 00CA1B : CA          ;
CODE_00CA1C:          BNE CODE_00CA16                     ;; 00CA1C : D0 F8       ;
CODE_00CA1E:          BRA CODE_00CA25                     ;; 00CA1E : 80 05       ;
                                                          ;;                      ;
CODE_00CA20:          STX.W $13C6                         ;; 00CA20 : 8E C6 13    ;
CODE_00CA23:          LDY.B #$18                          ;; 00CA23 : A0 18       ;
CODE_00CA25:          STY.W RAM_GameMode                  ;; 00CA25 : 8C 00 01    ;
CODE_00CA28:          INC.W $1DE9                         ;; 00CA28 : EE E9 1D    ;
CODE_00CA2B:          LDA.B #$01                          ;; 00CA2B : A9 01       ;
CODE_00CA2D:          STA.W $13CE                         ;; 00CA2D : 8D CE 13    ;
Return00CA30:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
SetMarioPeaceImg:     LDA.B #$26                          ;; ?QPWZ? : A9 26       ; \ Mario's image = Peace Sign, or 
CODE_00CA33:          LDY.W RAM_OnYoshi                   ;; 00CA33 : AC 7A 18    ;  | 
CODE_00CA36:          BEQ CODE_00CA3A                     ;; 00CA36 : F0 02       ;  | 
CODE_00CA38:          LDA.B #$14                          ;; 00CA38 : A9 14       ;  | Mario's image = Peace Sign on Yoshi 
CODE_00CA3A:          STA.W MarioFrame                    ;; 00CA3A : 8D E0 13    ; / 
Return00CA3D:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CA3E:          LDA.B #$F0                          ;; 00CA3E : A9 F0       ;
CODE_00CA40:          STA.W $1433                         ;; 00CA40 : 8D 33 14    ;
Return00CA43:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CA44:          LDA.W $1433                         ;; 00CA44 : AD 33 14    ;
CODE_00CA47:          BNE CODE_00CA4A                     ;; 00CA47 : D0 01       ;
Return00CA49:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CA4A:          JSR.W CODE_00CA61                   ;; 00CA4A : 20 61 CA    ;
CODE_00CA4D:          LDA.B #$FC                          ;; 00CA4D : A9 FC       ;
CODE_00CA4F:          JSR.W CODE_00CA6D                   ;; 00CA4F : 20 6D CA    ;
CODE_00CA52:          LDA.B #$33                          ;; 00CA52 : A9 33       ;
CODE_00CA54:          STA $41                             ;; 00CA54 : 85 41       ;
CODE_00CA56:          STA $43                             ;; 00CA56 : 85 43       ;
CODE_00CA58:          LDA.B #$03                          ;; 00CA58 : A9 03       ;
CODE_00CA5A:          STA $42                             ;; 00CA5A : 85 42       ;
CODE_00CA5C:          LDA.B #$22                          ;; 00CA5C : A9 22       ;
CODE_00CA5E:          STA $44                             ;; 00CA5E : 85 44       ;
Return00CA60:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CA61:          REP #$20                            ;; 00CA61 : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_00CA63:          LDA.W #$CB12                        ;; 00CA63 : A9 12 CB    ; \  
CODE_00CA66:          STA $04                             ;; 00CA66 : 85 04       ;  |Load xCB12 into $04 and $06 
CODE_00CA68:          STA $06                             ;; 00CA68 : 85 06       ; /  
CODE_00CA6A:          SEP #$20                            ;; 00CA6A : E2 20       ; 8 bit A ; Accum (8 bit) 
Return00CA6C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CA6D:          CLC                                 ;; 00CA6D : 18          ;
CODE_00CA6E:          ADC.W $1433                         ;; 00CA6E : 6D 33 14    ;
CODE_00CA71:          STA.W $1433                         ;; 00CA71 : 8D 33 14    ;
CODE_00CA74:          LDA $7E                             ;; 00CA74 : A5 7E       ;
CODE_00CA76:          CLC                                 ;; 00CA76 : 18          ;
CODE_00CA77:          ADC.B #$08                          ;; 00CA77 : 69 08       ;
CODE_00CA79:          STA $00                             ;; 00CA79 : 85 00       ;
CODE_00CA7B:          LDA.B #$18                          ;; 00CA7B : A9 18       ;
CODE_00CA7D:          LDY RAM_MarioPowerUp                ;; 00CA7D : A4 19       ;
CODE_00CA7F:          BEQ CODE_00CA83                     ;; 00CA7F : F0 02       ;
CODE_00CA81:          LDA.B #$10                          ;; 00CA81 : A9 10       ;
CODE_00CA83:          CLC                                 ;; 00CA83 : 18          ;
CODE_00CA84:          ADC $80                             ;; 00CA84 : 65 80       ;
CODE_00CA86:          STA $01                             ;; 00CA86 : 85 01       ;
CODE_00CA88:          REP #$30                            ;; 00CA88 : C2 30       ; 16 bit A ; Index (16 bit) Accum (16 bit) 
CODE_00CA8A:          AND.W #$00FF                        ;; 00CA8A : 29 FF 00    ; Keep lower byte of A 
CODE_00CA8D:          ASL                                 ;; 00CA8D : 0A          ; \  
CODE_00CA8E:          DEC A                               ;; 00CA8E : 3A          ;  |Set Y to ((2A-1)*2) 
CODE_00CA8F:          ASL                                 ;; 00CA8F : 0A          ;  | 
CODE_00CA90:          TAY                                 ;; 00CA90 : A8          ; /  
CODE_00CA91:          SEP #$20                            ;; 00CA91 : E2 20       ; 8 bit A ; Accum (8 bit) 
CODE_00CA93:          LDX.W #$0000                        ;; 00CA93 : A2 00 00    ;
CODE_00CA96:          LDA $01                             ;; 00CA96 : A5 01       ;
CODE_00CA98:          CMP.W $1433                         ;; 00CA98 : CD 33 14    ;
CODE_00CA9B:          BCC CODE_00CABD                     ;; 00CA9B : 90 20       ;
CODE_00CA9D:          LDA.B #$FF                          ;; 00CA9D : A9 FF       ;
CODE_00CA9F:          STA.W $04A0,X                       ;; 00CA9F : 9D A0 04    ;
CODE_00CAA2:          STZ.W $04A1,X                       ;; 00CAA2 : 9E A1 04    ;
CODE_00CAA5:          CPY.W #$01C0                        ;; 00CAA5 : C0 C0 01    ;
CODE_00CAA8:          BCS CODE_00CAB1                     ;; 00CAA8 : B0 07       ;
CODE_00CAAA:          STA.W $04A0,Y                       ;; 00CAAA : 99 A0 04    ;
CODE_00CAAD:          INC A                               ;; 00CAAD : 1A          ;
CODE_00CAAE:          STA.W $04A1,Y                       ;; 00CAAE : 99 A1 04    ;
CODE_00CAB1:          INX                                 ;; 00CAB1 : E8          ;
CODE_00CAB2:          INX                                 ;; 00CAB2 : E8          ;
CODE_00CAB3:          DEY                                 ;; 00CAB3 : 88          ;
CODE_00CAB4:          DEY                                 ;; 00CAB4 : 88          ;
CODE_00CAB5:          LDA $01                             ;; 00CAB5 : A5 01       ;
CODE_00CAB7:          BEQ CODE_00CB0A                     ;; 00CAB7 : F0 51       ;
CODE_00CAB9:          DEC $01                             ;; 00CAB9 : C6 01       ;
CODE_00CABB:          BRA CODE_00CA96                     ;; 00CABB : 80 D9       ;
                                                          ;;                      ;
CODE_00CABD:          JSR.W CODE_00CC14                   ;; 00CABD : 20 14 CC    ;
CODE_00CAC0:          CLC                                 ;; 00CAC0 : 18          ;
CODE_00CAC1:          ADC $00                             ;; 00CAC1 : 65 00       ;
CODE_00CAC3:          BCC CODE_00CAC7                     ;; 00CAC3 : 90 02       ;
CODE_00CAC5:          LDA.B #$FF                          ;; 00CAC5 : A9 FF       ;
CODE_00CAC7:          STA.W $04A1,X                       ;; 00CAC7 : 9D A1 04    ;
CODE_00CACA:          LDA $00                             ;; 00CACA : A5 00       ;
CODE_00CACC:          SEC                                 ;; 00CACC : 38          ;
CODE_00CACD:          SBC $02                             ;; 00CACD : E5 02       ;
CODE_00CACF:          BCS CODE_00CAD3                     ;; 00CACF : B0 02       ;
CODE_00CAD1:          LDA.B #$00                          ;; 00CAD1 : A9 00       ;
CODE_00CAD3:          STA.W $04A0,X                       ;; 00CAD3 : 9D A0 04    ;
CODE_00CAD6:          CPY.W #$01E0                        ;; 00CAD6 : C0 E0 01    ;
CODE_00CAD9:          BCS CODE_00CAFE                     ;; 00CAD9 : B0 23       ;
CODE_00CADB:          LDA $07                             ;; 00CADB : A5 07       ;
CODE_00CADD:          BNE CODE_00CAE7                     ;; 00CADD : D0 08       ;
CODE_00CADF:          LDA.B #$00                          ;; 00CADF : A9 00       ;
CODE_00CAE1:          STA.W $04A1,Y                       ;; 00CAE1 : 99 A1 04    ;
CODE_00CAE4:          DEC A                               ;; 00CAE4 : 3A          ;
CODE_00CAE5:          BRA CODE_00CAFB                     ;; 00CAE5 : 80 14       ;
                                                          ;;                      ;
CODE_00CAE7:          LDA $03                             ;; 00CAE7 : A5 03       ;
CODE_00CAE9:          ADC $00                             ;; 00CAE9 : 65 00       ;
CODE_00CAEB:          BCC CODE_00CAEF                     ;; 00CAEB : 90 02       ;
CODE_00CAED:          LDA.B #$FF                          ;; 00CAED : A9 FF       ;
CODE_00CAEF:          STA.W $04A1,Y                       ;; 00CAEF : 99 A1 04    ;
CODE_00CAF2:          LDA $00                             ;; 00CAF2 : A5 00       ;
CODE_00CAF4:          SEC                                 ;; 00CAF4 : 38          ;
CODE_00CAF5:          SBC $03                             ;; 00CAF5 : E5 03       ;
CODE_00CAF7:          BCS CODE_00CAFB                     ;; 00CAF7 : B0 02       ;
CODE_00CAF9:          LDA.B #$00                          ;; 00CAF9 : A9 00       ;
CODE_00CAFB:          STA.W $04A0,Y                       ;; 00CAFB : 99 A0 04    ;
CODE_00CAFE:          INX                                 ;; 00CAFE : E8          ;
CODE_00CAFF:          INX                                 ;; 00CAFF : E8          ;
CODE_00CB00:          DEY                                 ;; 00CB00 : 88          ;
CODE_00CB01:          DEY                                 ;; 00CB01 : 88          ;
CODE_00CB02:          LDA $01                             ;; 00CB02 : A5 01       ;
CODE_00CB04:          BEQ CODE_00CB0A                     ;; 00CB04 : F0 04       ;
CODE_00CB06:          DEC $01                             ;; 00CB06 : C6 01       ;
CODE_00CB08:          BNE CODE_00CABD                     ;; 00CB08 : D0 B3       ;
CODE_00CB0A:          LDA.B #$80                          ;; 00CB0A : A9 80       ;
CODE_00CB0C:          STA.W $0D9F                         ;; 00CB0C : 8D 9F 0D    ;
CODE_00CB0F:          SEP #$10                            ;; 00CB0F : E2 10       ; Index (8 bit) 
Return00CB11:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00CB12:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; 00CB12               ;
                      .db $FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE ;; ?QPWZ?               ;
                      .db $FD,$FD,$FD,$FD,$FC,$FC,$FC,$FB ;; ?QPWZ?               ;
                      .db $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8 ;; ?QPWZ?               ;
                      .db $F7,$F7,$F6,$F6,$F5,$F5,$F4,$F3 ;; ?QPWZ?               ;
                      .db $F3,$F2,$F1,$F1,$F0,$EF,$EE,$EE ;; ?QPWZ?               ;
                      .db $ED,$EC,$EB,$EA,$E9,$E9,$E8,$E7 ;; ?QPWZ?               ;
                      .db $E6,$E5,$E4,$E3,$E2,$E1,$DF,$DE ;; ?QPWZ?               ;
                      .db $DD,$DC,$DB,$DA,$D8,$D7,$D6,$D5 ;; ?QPWZ?               ;
                      .db $D3,$D2,$D0,$CF,$CD,$CC,$CA,$C9 ;; ?QPWZ?               ;
                      .db $C7,$C6,$C4,$C2,$C1,$BF,$BD,$BB ;; ?QPWZ?               ;
                      .db $B9,$B7,$B6,$B4,$B1,$AF,$AD,$AB ;; ?QPWZ?               ;
                      .db $A9,$A7,$A4,$A2,$9F,$9D,$9A,$97 ;; ?QPWZ?               ;
                      .db $95,$92,$8F,$8C,$89,$86,$82,$7F ;; ?QPWZ?               ;
                      .db $7B,$78,$74,$70,$6C,$67,$63,$5E ;; ?QPWZ?               ;
                      .db $59,$53,$4D,$46,$3F,$37,$2D,$1F ;; ?QPWZ?               ;
                      .db $00,$54,$53,$52,$52,$51,$50,$50 ;; ?QPWZ?               ;
                      .db $4F,$4E,$4E,$4D,$4C,$4C,$4B,$4A ;; ?QPWZ?               ;
                      .db $4A,$4B,$48,$48,$47,$46,$46,$45 ;; ?QPWZ?               ;
                      .db $44,$44,$43,$42,$42,$41,$40,$40 ;; ?QPWZ?               ;
                      .db $3F,$3E,$3E,$3D,$3C,$3C,$3B,$3A ;; ?QPWZ?               ;
                      .db $3A,$39,$38,$38,$37,$36,$36,$35 ;; ?QPWZ?               ;
                      .db $34,$34,$33,$32,$32,$31,$33,$35 ;; ?QPWZ?               ;
                      .db $38,$3A,$3C,$3E,$3F,$41,$43,$44 ;; ?QPWZ?               ;
                      .db $45,$47,$48,$49,$4A,$4B,$4C,$4D ;; ?QPWZ?               ;
                      .db $4E,$4E,$4F,$50,$50,$51,$51,$52 ;; ?QPWZ?               ;
                      .db $52,$53,$53,$53,$53,$53,$53,$53 ;; ?QPWZ?               ;
                      .db $53,$53,$53,$53,$53,$53,$52,$52 ;; ?QPWZ?               ;
                      .db $51,$51,$50,$50,$4F,$4E,$4E,$4D ;; ?QPWZ?               ;
                      .db $4C,$4B,$4A,$49,$48,$47,$45,$44 ;; ?QPWZ?               ;
                      .db $43,$41,$3F,$3E,$3C,$3A,$38,$35 ;; ?QPWZ?               ;
                      .db $33,$30,$2D,$2A,$26,$23,$1E,$18 ;; ?QPWZ?               ;
                      .db $11,$00                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00CC14:          PHY                                 ;; 00CC14 : 5A          ;
CODE_00CC15:          LDA $01                             ;; 00CC15 : A5 01       ;
CODE_00CC17:          STA.W $4205                         ;; 00CC17 : 8D 05 42    ; Dividend (High-Byte)
CODE_00CC1A:          STZ.W $4204                         ;; 00CC1A : 9C 04 42    ; Dividend (Low Byte)
CODE_00CC1D:          LDA.W $1433                         ;; 00CC1D : AD 33 14    ;
CODE_00CC20:          STA.W $4206                         ;; 00CC20 : 8D 06 42    ; Divisor B
CODE_00CC23:          NOP                                 ;; 00CC23 : EA          ;
CODE_00CC24:          NOP                                 ;; 00CC24 : EA          ;
CODE_00CC25:          NOP                                 ;; 00CC25 : EA          ;
CODE_00CC26:          NOP                                 ;; 00CC26 : EA          ;
CODE_00CC27:          NOP                                 ;; 00CC27 : EA          ;
CODE_00CC28:          NOP                                 ;; 00CC28 : EA          ;
CODE_00CC29:          REP #$20                            ;; 00CC29 : C2 20       ; Accum (16 bit) 
CODE_00CC2B:          LDA.W $4214                         ;; 00CC2B : AD 14 42    ; Quotient of Divide Result (Low Byte)
CODE_00CC2E:          LSR                                 ;; 00CC2E : 4A          ;
CODE_00CC2F:          TAY                                 ;; 00CC2F : A8          ;
CODE_00CC30:          SEP #$20                            ;; 00CC30 : E2 20       ; Accum (8 bit) 
CODE_00CC32:          LDA ($06),Y                         ;; 00CC32 : B1 06       ;
CODE_00CC34:          STA.W $4202                         ;; 00CC34 : 8D 02 42    ; Multiplicand A
CODE_00CC37:          LDA.W $1433                         ;; 00CC37 : AD 33 14    ;
CODE_00CC3A:          STA.W $4203                         ;; 00CC3A : 8D 03 42    ; Multplier B
CODE_00CC3D:          NOP                                 ;; 00CC3D : EA          ;
CODE_00CC3E:          NOP                                 ;; 00CC3E : EA          ;
CODE_00CC3F:          NOP                                 ;; 00CC3F : EA          ;
CODE_00CC40:          NOP                                 ;; 00CC40 : EA          ;
CODE_00CC41:          LDA.W $4217                         ;; 00CC41 : AD 17 42    ; Product/Remainder Result (High Byte)
CODE_00CC44:          STA $03                             ;; 00CC44 : 85 03       ;
CODE_00CC46:          LDA ($04),Y                         ;; 00CC46 : B1 04       ;
CODE_00CC48:          STA.W $4202                         ;; 00CC48 : 8D 02 42    ; Multiplicand A
CODE_00CC4B:          LDA.W $1433                         ;; 00CC4B : AD 33 14    ;
CODE_00CC4E:          STA.W $4203                         ;; 00CC4E : 8D 03 42    ; Multplier B
CODE_00CC51:          NOP                                 ;; 00CC51 : EA          ;
CODE_00CC52:          NOP                                 ;; 00CC52 : EA          ;
CODE_00CC53:          NOP                                 ;; 00CC53 : EA          ;
CODE_00CC54:          NOP                                 ;; 00CC54 : EA          ;
CODE_00CC55:          LDA.W $4217                         ;; 00CC55 : AD 17 42    ; Product/Remainder Result (High Byte)
CODE_00CC58:          STA $02                             ;; 00CC58 : 85 02       ;
CODE_00CC5A:          PLY                                 ;; 00CC5A : 7A          ;
Return00CC5B:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00CC5C:          .db $00,$00,$00,$00,$02,$00,$06,$00 ;; 00CC5C               ;
                      .db $FE,$FF,$FA,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
ResetAni:             LDA RAM_ControllerB                 ;; ?QPWZ? : A5 17       ;
CODE_00CC6A:          AND.B #$20                          ;; 00CC6A : 29 20       ;
CODE_00CC6C:          BEQ CODE_00CC81                     ;; 00CC6C : F0 13       ;
CODE_00CC6E:          LDA $18                             ;; 00CC6E : A5 18       ;
CODE_00CC70:          CMP.B #$80                          ;; 00CC70 : C9 80       ;
CODE_00CC72:          BNE CODE_00CC81                     ;; 00CC72 : D0 0D       ;
ADDR_00CC74:          INC.W $1E01                         ;; 00CC74 : EE 01 1E    ;
ADDR_00CC77:          LDA.W $1E01                         ;; 00CC77 : AD 01 1E    ;
ADDR_00CC7A:          CMP.B #$03                          ;; 00CC7A : C9 03       ;
ADDR_00CC7C:          BCC CODE_00CC81                     ;; 00CC7C : 90 03       ;
ADDR_00CC7E:          STZ.W $1E01                         ;; 00CC7E : 9C 01 1E    ;
CODE_00CC81:          LDA.W $1E01                         ;; 00CC81 : AD 01 1E    ;
CODE_00CC84:          BRA CODE_00CCBB                     ;; 00CC84 : 80 35       ; Change to BEQ to enable debug code below 
                                                          ;;                      ;
ADDR_00CC86:          LSR                                 ;; 00CC86 : 4A          ; \ Unreachable 
ADDR_00CC87:          BEQ ADDR_00CCB3                     ;; 00CC87 : F0 2A       ;  | Debug: Free roaming mode 
ADDR_00CC89:          LDA.B #$FF                          ;; 00CC89 : A9 FF       ;  | 
ADDR_00CC8B:          STA.W $1497                         ;; 00CC8B : 8D 97 14    ;  | 
ADDR_00CC8E:          LDA RAM_ControllerA                 ;; 00CC8E : A5 15       ;  | 
ADDR_00CC90:          AND.B #$03                          ;; 00CC90 : 29 03       ;  | 
ADDR_00CC92:          ASL                                 ;; 00CC92 : 0A          ;  | 
ADDR_00CC93:          ASL                                 ;; 00CC93 : 0A          ;  | 
ADDR_00CC94:          LDX.B #$00                          ;; 00CC94 : A2 00       ;  | 
ADDR_00CC96:          JSR.W ADDR_00CC9F                   ;; 00CC96 : 20 9F CC    ;  | 
ADDR_00CC99:          LDA RAM_ControllerA                 ;; 00CC99 : A5 15       ;  | 
ADDR_00CC9B:          AND.B #$0C                          ;; 00CC9B : 29 0C       ;  | 
ADDR_00CC9D:          LDX.B #$02                          ;; 00CC9D : A2 02       ;  | 
ADDR_00CC9F:          BIT RAM_ControllerA                 ;; 00CC9F : 24 15       ;  | 
ADDR_00CCA1:          BVC ADDR_00CCA5                     ;; 00CCA1 : 50 02       ;  | 
ADDR_00CCA3:          ORA.B #$02                          ;; 00CCA3 : 09 02       ;  | 
ADDR_00CCA5:          TAY                                 ;; 00CCA5 : A8          ;  | 
ADDR_00CCA6:          REP #$20                            ;; 00CCA6 : C2 20       ;  | Accum (16 bit) ; Accum (16 bit) 
ADDR_00CCA8:          LDA RAM_MarioXPos,X                 ;; 00CCA8 : B5 94       ;  | 
ADDR_00CCAA:          CLC                                 ;; 00CCAA : 18          ;  | 
ADDR_00CCAB:          ADC.W DATA_00CC5C,Y                 ;; 00CCAB : 79 5C CC    ;  | 
ADDR_00CCAE:          STA RAM_MarioXPos,X                 ;; 00CCAE : 95 94       ;  | 
ADDR_00CCB0:          SEP #$20                            ;; 00CCB0 : E2 20       ;  | Accum (8 bit) ; Accum (8 bit) 
Return00CCB2:         RTS                                 ;; ?QPWZ? : 60          ; / Return 
                                                          ;;                      ;
ADDR_00CCB3:          LDA.B #$70                          ;; 00CCB3 : A9 70       ;
ADDR_00CCB5:          STA.W $13E4                         ;; 00CCB5 : 8D E4 13    ;
ADDR_00CCB8:          STA.W $149F                         ;; 00CCB8 : 8D 9F 14    ;
CODE_00CCBB:          LDA.W $1493                         ;; 00CCBB : AD 93 14    ;
CODE_00CCBE:          BEQ CODE_00CCC3                     ;; 00CCBE : F0 03       ;
CODE_00CCC0:          JMP.W CODE_00C915                   ;; 00CCC0 : 4C 15 C9    ;
                                                          ;;                      ;
CODE_00CCC3:          JSR.W CODE_00CDDD                   ;; 00CCC3 : 20 DD CD    ;
CODE_00CCC6:          LDA RAM_SpritesLocked               ;; 00CCC6 : A5 9D       ; \ Branch if sprites locked 
CODE_00CCC8:          BNE Return00CCDF                    ;; 00CCC8 : D0 15       ; / 
CODE_00CCCA:          STZ.W $13E8                         ;; 00CCCA : 9C E8 13    ;
CODE_00CCCD:          STZ.W $13DE                         ;; 00CCCD : 9C DE 13    ;
CODE_00CCD0:          LDA.W RAM_LockMarioTimer            ;; 00CCD0 : AD BD 18    ; \ If lock Mario timer is set... 
CODE_00CCD3:          BEQ CODE_00CCE0                     ;; 00CCD3 : F0 0B       ;  | 
CODE_00CCD5:          DEC.W RAM_LockMarioTimer            ;; 00CCD5 : CE BD 18    ;  | Decrease the timer 
CODE_00CCD8:          STZ RAM_MarioSpeedX                 ;; 00CCD8 : 64 7B       ;  | X speed = 0 
CODE_00CCDA:          LDA.B #$0F                          ;; 00CCDA : A9 0F       ;  | Mario's image = Going down tube 
CODE_00CCDC:          STA.W MarioFrame                    ;; 00CCDC : 8D E0 13    ; / 
Return00CCDF:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CCE0:          LDA.W $0D9B                         ;; 00CCE0 : AD 9B 0D    ;
CODE_00CCE3:          BPL CODE_00CD24                     ;; 00CCE3 : 10 3F       ;
CODE_00CCE5:          LSR                                 ;; 00CCE5 : 4A          ;
CODE_00CCE6:          BCS CODE_00CD24                     ;; 00CCE6 : B0 3C       ;
CODE_00CCE8:          BIT.W $0D9B                         ;; 00CCE8 : 2C 9B 0D    ;
CODE_00CCEB:          BVS CODE_00CD1C                     ;; 00CCEB : 70 2F       ;
CODE_00CCED:          LDA RAM_IsFlying                    ;; 00CCED : A5 72       ;
CODE_00CCEF:          BNE CODE_00CD1C                     ;; 00CCEF : D0 2B       ;
CODE_00CCF1:          REP #$20                            ;; 00CCF1 : C2 20       ; Accum (16 bit) 
CODE_00CCF3:          LDA.W RAM_KeyHolePos1               ;; 00CCF3 : AD 36 14    ;
CODE_00CCF6:          STA RAM_MarioXPos                   ;; 00CCF6 : 85 94       ;
CODE_00CCF8:          LDA.W RAM_KeyHolePos2               ;; 00CCF8 : AD 38 14    ;
CODE_00CCFB:          STA RAM_MarioYPos                   ;; 00CCFB : 85 96       ;
CODE_00CCFD:          SEP #$20                            ;; 00CCFD : E2 20       ; Accum (8 bit) 
CODE_00CCFF:          JSR.W CODE_00DC2D                   ;; 00CCFF : 20 2D DC    ;
CODE_00CD02:          REP #$20                            ;; 00CD02 : C2 20       ; Accum (16 bit) 
CODE_00CD04:          LDA RAM_MarioXPos                   ;; 00CD04 : A5 94       ;
CODE_00CD06:          STA.W RAM_KeyHolePos1               ;; 00CD06 : 8D 36 14    ;
CODE_00CD09:          STA.W $14B4                         ;; 00CD09 : 8D B4 14    ;
CODE_00CD0C:          LDA RAM_MarioYPos                   ;; 00CD0C : A5 96       ;
CODE_00CD0E:          AND.W #$FFF0                        ;; 00CD0E : 29 F0 FF    ;
CODE_00CD11:          STA.W RAM_KeyHolePos2               ;; 00CD11 : 8D 38 14    ;
CODE_00CD14:          STA.W $14B6                         ;; 00CD14 : 8D B6 14    ;
CODE_00CD17:          JSR.W CODE_00F9C9                   ;; 00CD17 : 20 C9 F9    ;
CODE_00CD1A:          BRA CODE_00CD1F                     ;; 00CD1A : 80 03       ;
                                                          ;;                      ;
CODE_00CD1C:          JSR.W CODE_00DC2D                   ;; 00CD1C : 20 2D DC    ; Accum (8 bit) 
CODE_00CD1F:          JSR.W CODE_00F8F2                   ;; 00CD1F : 20 F2 F8    ;
CODE_00CD22:          BRA CODE_00CD36                     ;; 00CD22 : 80 12       ;
                                                          ;;                      ;
CODE_00CD24:          LDA RAM_MarioSpeedY                 ;; 00CD24 : A5 7D       ; \ Branch if Mario has downward speed 
CODE_00CD26:          BPL CODE_00CD30                     ;; 00CD26 : 10 08       ; / 
CODE_00CD28:          LDA RAM_MarioObjStatus              ;; 00CD28 : A5 77       ;
CODE_00CD2A:          AND.B #$08                          ;; 00CD2A : 29 08       ;
CODE_00CD2C:          BEQ CODE_00CD30                     ;; 00CD2C : F0 02       ;
CODE_00CD2E:          STZ RAM_MarioSpeedY                 ;; 00CD2E : 64 7D       ; Y speed = 0 
CODE_00CD30:          JSR.W CODE_00DC2D                   ;; 00CD30 : 20 2D DC    ;
CODE_00CD33:          JSR.W CODE_00E92B                   ;; 00CD33 : 20 2B E9    ;
CODE_00CD36:          JSR.W CODE_00F595                   ;; 00CD36 : 20 95 F5    ;
CODE_00CD39:          STZ.W RAM_ChangingDir               ;; 00CD39 : 9C DD 13    ;
CODE_00CD3C:          LDY.W $13F3                         ;; 00CD3C : AC F3 13    ;
CODE_00CD3F:          BNE CODE_00CD95                     ;; 00CD3F : D0 54       ;
CODE_00CD41:          LDA.W $18BE                         ;; 00CD41 : AD BE 18    ;
CODE_00CD44:          BEQ CODE_00CD4A                     ;; 00CD44 : F0 04       ;
CODE_00CD46:          LDA.B #$1F                          ;; 00CD46 : A9 1F       ;
CODE_00CD48:          STA $8B                             ;; 00CD48 : 85 8B       ;
CODE_00CD4A:          LDA RAM_IsClimbing                  ;; 00CD4A : A5 74       ;
CODE_00CD4C:          BNE CODE_00CD72                     ;; 00CD4C : D0 24       ;
CODE_00CD4E:          LDA.W $148F                         ;; 00CD4E : AD 8F 14    ;
CODE_00CD51:          ORA.W RAM_OnYoshi                   ;; 00CD51 : 0D 7A 18    ;
CODE_00CD54:          BNE CODE_00CD79                     ;; 00CD54 : D0 23       ;
CODE_00CD56:          LDA $8B                             ;; 00CD56 : A5 8B       ;
CODE_00CD58:          AND.B #$1B                          ;; 00CD58 : 29 1B       ;
CODE_00CD5A:          CMP.B #$1B                          ;; 00CD5A : C9 1B       ;
CODE_00CD5C:          BNE CODE_00CD79                     ;; 00CD5C : D0 1B       ;
CODE_00CD5E:          LDA RAM_ControllerA                 ;; 00CD5E : A5 15       ;
CODE_00CD60:          AND.B #$0C                          ;; 00CD60 : 29 0C       ;
CODE_00CD62:          BEQ CODE_00CD79                     ;; 00CD62 : F0 15       ;
CODE_00CD64:          LDY RAM_IsFlying                    ;; 00CD64 : A4 72       ;
CODE_00CD66:          BNE CODE_00CD72                     ;; 00CD66 : D0 0A       ;
CODE_00CD68:          AND.B #$08                          ;; 00CD68 : 29 08       ;
CODE_00CD6A:          BNE CODE_00CD72                     ;; 00CD6A : D0 06       ;
ADDR_00CD6C:          LDA $8B                             ;; 00CD6C : A5 8B       ;
ADDR_00CD6E:          AND.B #$04                          ;; 00CD6E : 29 04       ;
ADDR_00CD70:          BEQ CODE_00CD79                     ;; 00CD70 : F0 07       ;
CODE_00CD72:          LDA $8B                             ;; 00CD72 : A5 8B       ;
CODE_00CD74:          STA RAM_IsClimbing                  ;; 00CD74 : 85 74       ;
CODE_00CD76:          JMP.W CODE_00DB17                   ;; 00CD76 : 4C 17 DB    ;
                                                          ;;                      ;
CODE_00CD79:          LDA RAM_IsSwimming                  ;; 00CD79 : A5 75       ;
CODE_00CD7B:          BEQ CODE_00CD82                     ;; 00CD7B : F0 05       ;
CODE_00CD7D:          JSR.W CODE_00D988                   ;; 00CD7D : 20 88 D9    ;
CODE_00CD80:          BRA CODE_00CD8F                     ;; 00CD80 : 80 0D       ;
                                                          ;;                      ;
CODE_00CD82:          JSR.W CODE_00D5F2                   ;; 00CD82 : 20 F2 D5    ;
CODE_00CD85:          JSR.W CODE_00D062                   ;; 00CD85 : 20 62 D0    ;
CODE_00CD88:          JSR.W CODE_00D7E4                   ;; 00CD88 : 20 E4 D7    ;
CODE_00CD8B:          JSL.L CODE_00CEB1                   ;; 00CD8B : 22 B1 CE 00 ;
CODE_00CD8F:          LDY.W RAM_OnYoshi                   ;; 00CD8F : AC 7A 18    ;
CODE_00CD92:          BNE CODE_00CDAD                     ;; 00CD92 : D0 19       ;
Return00CD94:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CD95:          LDA.B #$42                          ;; 00CD95 : A9 42       ;
CODE_00CD97:          LDX RAM_MarioPowerUp                ;; 00CD97 : A6 19       ;
CODE_00CD99:          BEQ CODE_00CD9D                     ;; 00CD99 : F0 02       ;
CODE_00CD9B:          LDA.B #$43                          ;; 00CD9B : A9 43       ;
CODE_00CD9D:          DEY                                 ;; 00CD9D : 88          ;
CODE_00CD9E:          BEQ CODE_00CDA5                     ;; 00CD9E : F0 05       ;
CODE_00CDA0:          STY.W $13F3                         ;; 00CDA0 : 8C F3 13    ;
CODE_00CDA3:          LDA.B #$0F                          ;; 00CDA3 : A9 0F       ; \ Mario's image = Going down tube 
CODE_00CDA5:          STA.W MarioFrame                    ;; 00CDA5 : 8D E0 13    ; / 
CODE_00CDA8:          RTS                                 ;; 00CDA8 : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
OnYoshiAnimations:    .db $20,$21,$27,$28                 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00CDAD:          LDX.W $14A3                         ;; 00CDAD : AE A3 14    ;
CODE_00CDB0:          BEQ CODE_00CDBA                     ;; 00CDB0 : F0 08       ;
CODE_00CDB2:          LDY.B #$03                          ;; 00CDB2 : A0 03       ;
CODE_00CDB4:          CPX.B #$0C                          ;; 00CDB4 : E0 0C       ;
CODE_00CDB6:          BCS CODE_00CDBA                     ;; 00CDB6 : B0 02       ;
CODE_00CDB8:          LDY.B #$04                          ;; 00CDB8 : A0 04       ;
CODE_00CDBA:          LDA.W CODE_00CDA8,Y                 ;; 00CDBA : B9 A8 CD    ;
CODE_00CDBD:          DEY                                 ;; 00CDBD : 88          ;
CODE_00CDBE:          BNE CODE_00CDC6                     ;; 00CDBE : D0 06       ;
CODE_00CDC0:          LDY RAM_IsDucking                   ;; 00CDC0 : A4 73       ;
CODE_00CDC2:          BEQ CODE_00CDC6                     ;; 00CDC2 : F0 02       ;
CODE_00CDC4:          LDA.B #$1D                          ;; 00CDC4 : A9 1D       ; \ Mario's image = Picking up object 
CODE_00CDC6:          STA.W MarioFrame                    ;; 00CDC6 : 8D E0 13    ; / 
CODE_00CDC9:          LDA.W RAM_YoshiHasWings             ;; 00CDC9 : AD 1E 14    ; \ Check Yoshi wing ability address for #$01, 
CODE_00CDCC:          CMP.B #$01                          ;; 00CDCC : C9 01       ; / but this is an impossible value 
CODE_00CDCE:          BNE Return00CDDC                    ;; 00CDCE : D0 0C       ; \ Unreachable/unused code 
ADDR_00CDD0:          BIT $16                             ;; 00CDD0 : 24 16       ;  | Lets Mario (any power) shoot fireballs while on Yoshi 
ADDR_00CDD2:          BVC Return00CDDC                    ;; 00CDD2 : 50 08       ;  | 
ADDR_00CDD4:          LDA.B #$08                          ;; 00CDD4 : A9 08       ;  | 
ADDR_00CDD6:          STA.W $18DB                         ;; 00CDD6 : 8D DB 18    ;  | 
ADDR_00CDD9:          JSR.W ShootFireball                 ;; 00CDD9 : 20 A8 FE    ; / 
Return00CDDC:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00CDDD:          LDA.W $1411                         ;; 00CDDD : AD 11 14    ;
CODE_00CDE0:          BEQ Return00CDDC                    ;; 00CDE0 : F0 FA       ;
CODE_00CDE2:          LDY.W $13FE                         ;; 00CDE2 : AC FE 13    ;
CODE_00CDE5:          LDA.W $13FD                         ;; 00CDE5 : AD FD 13    ;
CODE_00CDE8:          STA RAM_SpritesLocked               ;; 00CDE8 : 85 9D       ;
CODE_00CDEA:          BNE CODE_00CE4C                     ;; 00CDEA : D0 60       ;
CODE_00CDEC:          LDA.W $1400                         ;; 00CDEC : AD 00 14    ;
CODE_00CDEF:          BEQ CODE_00CDF6                     ;; 00CDEF : F0 05       ;
CODE_00CDF1:          STZ.W $13FE                         ;; 00CDF1 : 9C FE 13    ;
CODE_00CDF4:          BRA CODE_00CE48                     ;; 00CDF4 : 80 52       ;
                                                          ;;                      ;
CODE_00CDF6:          LDA RAM_ControllerB                 ;; 00CDF6 : A5 17       ; \ Branch if anything besides L/R being held 
CODE_00CDF8:          AND.B #$CF                          ;; 00CDF8 : 29 CF       ;  | 
CODE_00CDFA:          ORA RAM_ControllerA                 ;; 00CDFA : 05 15       ;  | 
CODE_00CDFC:          BNE CODE_00CE49                     ;; 00CDFC : D0 4B       ; / 
CODE_00CDFE:          LDA RAM_ControllerB                 ;; 00CDFE : A5 17       ; \ Branch if L/R not being held 
CODE_00CE00:          AND.B #$30                          ;; 00CE00 : 29 30       ;  | 
CODE_00CE02:          BEQ CODE_00CE49                     ;; 00CE02 : F0 45       ;  | 
CODE_00CE04:          CMP.B #$30                          ;; 00CE04 : C9 30       ;  | 
CODE_00CE06:          BEQ CODE_00CE49                     ;; 00CE06 : F0 41       ; / 
ScrollScreen:         LSR                                 ;; ?QPWZ? : 4A          ;
CODE_00CE09:          LSR                                 ;; 00CE09 : 4A          ;
CODE_00CE0A:          LSR                                 ;; 00CE0A : 4A          ;
CODE_00CE0B:          INC.W $1401                         ;; 00CE0B : EE 01 14    ;
CODE_00CE0E:          LDX.W $1401                         ;; 00CE0E : AE 01 14    ;
CODE_00CE11:          CPX.B #$10                          ;; 00CE11 : E0 10       ;
CODE_00CE13:          BCC CODE_00CE4C                     ;; 00CE13 : 90 37       ;
CODE_00CE15:          TAX                                 ;; 00CE15 : AA          ;
CODE_00CE16:          REP #$20                            ;; 00CE16 : C2 20       ; Accum (16 bit) 
CODE_00CE18:          LDA.W $142A                         ;; 00CE18 : AD 2A 14    ;
CODE_00CE1B:          CMP.W DATA_00F6CB,X                 ;; 00CE1B : DD CB F6    ;
CODE_00CE1E:          SEP #$20                            ;; 00CE1E : E2 20       ; Accum (8 bit) 
CODE_00CE20:          BEQ CODE_00CE4C                     ;; 00CE20 : F0 2A       ;
CODE_00CE22:          LDA.B #$01                          ;; 00CE22 : A9 01       ;
CODE_00CE24:          TRB.W $142A                         ;; 00CE24 : 1C 2A 14    ;
CODE_00CE27:          INC.W $13FD                         ;; 00CE27 : EE FD 13    ;
CODE_00CE2A:          LDA.B #$00                          ;; 00CE2A : A9 00       ;
CODE_00CE2C:          CPX.B #$02                          ;; 00CE2C : E0 02       ;
CODE_00CE2E:          BNE CODE_00CE33                     ;; 00CE2E : D0 03       ;
CODE_00CE30:          LDA $5E                             ;; 00CE30 : A5 5E       ;
CODE_00CE32:          DEC A                               ;; 00CE32 : 3A          ;
CODE_00CE33:          REP #$20                            ;; 00CE33 : C2 20       ; Accum (16 bit) 
CODE_00CE35:          XBA                                 ;; 00CE35 : EB          ;
CODE_00CE36:          AND.W #$FF00                        ;; 00CE36 : 29 00 FF    ;
CODE_00CE39:          CMP RAM_ScreenBndryXLo              ;; 00CE39 : C5 1A       ;
CODE_00CE3B:          SEP #$20                            ;; 00CE3B : E2 20       ; Accum (8 bit) 
CODE_00CE3D:          BEQ CODE_00CE44                     ;; 00CE3D : F0 05       ;
CODE_00CE3F:          LDY.B #$0E                          ;; 00CE3F : A0 0E       ; \ Play sound effect 
CODE_00CE41:          STY.W $1DFC                         ;; 00CE41 : 8C FC 1D    ; / 
CODE_00CE44:          TXA                                 ;; 00CE44 : 8A          ;
CODE_00CE45:          STA.W $13FE                         ;; 00CE45 : 8D FE 13    ;
CODE_00CE48:          TAY                                 ;; 00CE48 : A8          ;
CODE_00CE49:          STZ.W $1401                         ;; 00CE49 : 9C 01 14    ;
CODE_00CE4C:          LDX.B #$00                          ;; 00CE4C : A2 00       ;
CODE_00CE4E:          LDA RAM_MarioDirection              ;; 00CE4E : A5 76       ;
CODE_00CE50:          ASL                                 ;; 00CE50 : 0A          ;
CODE_00CE51:          STA.W $13FF                         ;; 00CE51 : 8D FF 13    ;
CODE_00CE54:          REP #$20                            ;; 00CE54 : C2 20       ; Accum (16 bit) 
CODE_00CE56:          LDA.W $142A                         ;; 00CE56 : AD 2A 14    ;
CODE_00CE59:          CMP.W DATA_00F6CB,Y                 ;; 00CE59 : D9 CB F6    ;
CODE_00CE5C:          BEQ CODE_00CE6D                     ;; 00CE5C : F0 0F       ;
CODE_00CE5E:          CLC                                 ;; 00CE5E : 18          ;
CODE_00CE5F:          ADC.W DATA_00F6BF,Y                 ;; 00CE5F : 79 BF F6    ;
CODE_00CE62:          LDY.W $13FF                         ;; 00CE62 : AC FF 13    ;
CODE_00CE65:          CMP.W DATA_00F6B3,Y                 ;; 00CE65 : D9 B3 F6    ;
CODE_00CE68:          BNE CODE_00CE70                     ;; 00CE68 : D0 06       ;
CODE_00CE6A:          STX.W $13FE                         ;; 00CE6A : 8E FE 13    ;
CODE_00CE6D:          STX.W $13FD                         ;; 00CE6D : 8E FD 13    ;
CODE_00CE70:          STA.W $142A                         ;; 00CE70 : 8D 2A 14    ;
CODE_00CE73:          STX.W $1400                         ;; 00CE73 : 8E 00 14    ;
CODE_00CE76:          SEP #$20                            ;; 00CE76 : E2 20       ; Accum (8 bit) 
CODE_00CE78:          RTS                                 ;; 00CE78 : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00CE79:          .db $2A,$2B,$2C,$2D,$2E,$2F         ;; 00CE79               ;
                                                          ;;                      ;
DATA_00CE7F:          .db $2C,$2C,$2C,$2B,$2B,$2C,$2C,$2B ;; 00CE7F               ;
                      .db $2B,$2C,$2D,$2A,$2A,$2D,$2D,$2A ;; ?QPWZ?               ;
                      .db $2A,$2D,$2D,$2A,$2A,$2D,$2E,$2A ;; ?QPWZ?               ;
                      .db $2A,$2E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00CE99:          .db $00,$00,$25,$44,$00,$00,$0F,$45 ;; 00CE99               ;
DATA_00CEA1:          .db $00,$00,$00,$00,$01,$01,$01,$01 ;; 00CEA1               ;
DATA_00CEA9:          .db $02,$07,$06,$09,$02,$07,$06,$09 ;; 00CEA9               ;
                                                          ;;                      ;
CODE_00CEB1:          LDA.W $14A2                         ;; 00CEB1 : AD A2 14    ; Related to cape animation? 
CODE_00CEB4:          BNE lbl14A2Not0                     ;; 00CEB4 : D0 60       ;
CODE_00CEB6:          LDX.W $13DF                         ;; 00CEB6 : AE DF 13    ; Cape image 
CODE_00CEB9:          LDA RAM_IsFlying                    ;; 00CEB9 : A5 72       ; If Mario isn't in air, branch to $CEDE 
CODE_00CEBB:          BEQ MarioAnimAir                    ;; 00CEBB : F0 21       ; branch to $CEDE 
CODE_00CEBD:          LDY.B #$04                          ;; 00CEBD : A0 04       ;
CODE_00CEBF:          BIT RAM_MarioSpeedY                 ;; 00CEBF : 24 7D       ; \ If Mario is falling (and thus not on ground) 
CODE_00CEC1:          BPL CODE_00CECD                     ;; 00CEC1 : 10 0A       ; / branch down 
CODE_00CEC3:          CMP.B #$0C                          ;; 00CEC3 : C9 0C       ; \ If making a "run jump", 
CODE_00CEC5:          BEQ CODE_00CEFD                     ;; 00CEC5 : F0 36       ; / branch to $CEFD 
CODE_00CEC7:          LDA RAM_IsSwimming                  ;; 00CEC7 : A5 75       ; \ If Mario is in water, 
CODE_00CEC9:          BNE CODE_00CEFD                     ;; 00CEC9 : D0 32       ;  |branch to $CEFD 
CODE_00CECB:          BRA MrioNtInWtr                     ;; 00CECB : 80 17       ; / otherwise, branch to $CEE4 
                                                          ;;                      ;
CODE_00CECD:          INX                                 ;; 00CECD : E8          ; \  
CODE_00CECE:          CPX.B #$05                          ;; 00CECE : E0 05       ;  |if X >= #$04 and != #$FF then jump down <- counting the INX 
CODE_00CED0:          BCS CODE_00CED6                     ;; 00CED0 : B0 04       ; /  
CODE_00CED2:          LDX.B #$05                          ;; 00CED2 : A2 05       ; X = #$05 
CODE_00CED4:          BRA CODE_00CF0A                     ;; 00CED4 : 80 34       ; Branch to $CF04 
                                                          ;;                      ;
CODE_00CED6:          CPX.B #$0B                          ;; 00CED6 : E0 0B       ; \ If X is less than #$0B, 
CODE_00CED8:          BCC CODE_00CF0A                     ;; 00CED8 : 90 30       ; / branch to $CF0A 
CODE_00CEDA:          LDX.B #$07                          ;; 00CEDA : A2 07       ; X = #$07 
CODE_00CEDC:          BRA CODE_00CF0A                     ;; 00CEDC : 80 2C       ; Mario is not in the air, branch to $CF0A 
                                                          ;;                      ;
MarioAnimAir:         LDA RAM_MarioSpeedX                 ;; ?QPWZ? : A5 7B       ; \ If Mario X speed isn't 0, 
CODE_00CEE0:          BNE CODE_00CEF0                     ;; 00CEE0 : D0 0E       ; / branch to $CEF0 
CODE_00CEE2:          LDY.B #$08                          ;; 00CEE2 : A0 08       ; Otherwise Y = #$08 
MrioNtInWtr:          TXA                                 ;; ?QPWZ? : 8A          ; A = X = #13DF 
CODE_00CEE5:          BEQ CODE_00CF0A                     ;; 00CEE5 : F0 23       ; If $13DF (now A) = 0 branch to $CF04 
CODE_00CEE7:          DEX                                 ;; 00CEE7 : CA          ; \  
CODE_00CEE8:          CPX.B #$03                          ;; 00CEE8 : E0 03       ;  |If X - 1 < #$03 Then Branch $CF04 
CODE_00CEEA:          BCC CODE_00CF0A                     ;; 00CEEA : 90 1E       ; /  
CODE_00CEEC:          LDX.B #$02                          ;; 00CEEC : A2 02       ; X = #$02 
CODE_00CEEE:          BRA CODE_00CF0A                     ;; 00CEEE : 80 1A       ; Branch to $CF04 
                                                          ;;                      ;
CODE_00CEF0:          BPL CODE_00CEF5                     ;; 00CEF0 : 10 03       ; \  
CODE_00CEF2:          EOR.B #$FF                          ;; 00CEF2 : 49 FF       ;  |A = abs(A) 
CODE_00CEF4:          INC A                               ;; 00CEF4 : 1A          ;  | 
CODE_00CEF5:          LSR                                 ;; 00CEF5 : 4A          ; \  
CODE_00CEF6:          LSR                                 ;; 00CEF6 : 4A          ;  |Divide a by 8 
CODE_00CEF7:          LSR                                 ;; 00CEF7 : 4A          ; /  
CODE_00CEF8:          TAY                                 ;; 00CEF8 : A8          ; Y = A 
CODE_00CEF9:          LDA.W DATA_00DC7C,Y                 ;; 00CEF9 : B9 7C DC    ; A = Mario animation speed? (I didn't know it was a table...) 
CODE_00CEFC:          TAY                                 ;; 00CEFC : A8          ; Load Y with this table 
CODE_00CEFD:          INX                                 ;; 00CEFD : E8          ; \  
CODE_00CEFE:          CPX.B #$03                          ;; 00CEFE : E0 03       ;  | 
CODE_00CF00:          BCS CODE_00CF04                     ;; 00CF00 : B0 02       ;  |If X is < #$02 and != #$FF <- counting the INX 
CODE_00CF02:          LDX.B #$05                          ;; 00CF02 : A2 05       ;  |then X = #$05 
CODE_00CF04:          CPX.B #$07                          ;; 00CF04 : E0 07       ; \  
CODE_00CF06:          BCC CODE_00CF0A                     ;; 00CF06 : 90 02       ;  |If X is greater than or equal to #$07 then X = #$03 
CODE_00CF08:          LDX.B #$03                          ;; 00CF08 : A2 03       ;  | 
CODE_00CF0A:          STX.W $13DF                         ;; 00CF0A : 8E DF 13    ; And X goes right back into $13DF (cape image) after being modified 
CODE_00CF0D:          TYA                                 ;; 00CF0D : 98          ; Now Y goes back into A 
CODE_00CF0E:          LDY RAM_IsSwimming                  ;; 00CF0E : A4 75       ; \  
CODE_00CF10:          BEQ CODE_00CF13                     ;; 00CF10 : F0 01       ;  |If mario is in water then A = 2A 
CODE_00CF12:          ASL                                 ;; 00CF12 : 0A          ;  | 
CODE_00CF13:          STA.W $14A2                         ;; 00CF13 : 8D A2 14    ; A -> $14A2 (do we know this byte yet?) no. 
lbl14A2Not0:          LDA.W RAM_IsSpinJump                ;; ?QPWZ? : AD 0D 14    ; A = Spin Jump Flag 
CODE_00CF19:          ORA.W $14A6                         ;; 00CF19 : 0D A6 14    ;
CODE_00CF1C:          BEQ CODE_00CF4E                     ;; 00CF1C : F0 30       ; If $140D OR $14A6 = 0 then branch to $CF4E 
CODE_00CF1E:          STZ RAM_IsDucking                   ;; 00CF1E : 64 73       ; 0 -> Ducking while jumping flag 
CODE_00CF20:          LDA RAM_FrameCounterB               ;; 00CF20 : A5 14       ; \  
CODE_00CF22:          AND.B #$06                          ;; 00CF22 : 29 06       ;  |X = Y = Alternate frame counter AND #$06 
CODE_00CF24:          TAX                                 ;; 00CF24 : AA          ;  | 
CODE_00CF25:          TAY                                 ;; 00CF25 : A8          ; /  
CODE_00CF26:          LDA RAM_IsFlying                    ;; 00CF26 : A5 72       ; \ If on ground branch down 
CODE_00CF28:          BEQ CODE_00CF2F                     ;; 00CF28 : F0 05       ; /  
CODE_00CF2A:          LDA RAM_MarioSpeedY                 ;; 00CF2A : A5 7D       ; \ If Mario moving upwards branch down 
CODE_00CF2C:          BMI CODE_00CF2F                     ;; 00CF2C : 30 01       ; /  
CODE_00CF2E:          INY                                 ;; 00CF2E : C8          ; Y = Y + 1 
CODE_00CF2F:          LDA.W DATA_00CEA9,Y                 ;; 00CF2F : B9 A9 CE    ; \ After loading from this table, 
CODE_00CF32:          STA.W $13DF                         ;; 00CF32 : 8D DF 13    ; / Store A in cape image 
CODE_00CF35:          LDA RAM_MarioPowerUp                ;; 00CF35 : A5 19       ; A = Mario's powerup status 
CODE_00CF37:          BEQ CODE_00CF3A                     ;; 00CF37 : F0 01       ; \  
CODE_00CF39:          INX                                 ;; 00CF39 : E8          ;  |If not small, increase X 
CODE_00CF3A:          LDA.W DATA_00CEA1,X                 ;; 00CF3A : BD A1 CE    ; \ Load from another table 
CODE_00CF3D:          STA RAM_MarioDirection              ;; 00CF3D : 85 76       ; / store to Mario's Direction 
CODE_00CF3F:          LDY RAM_MarioPowerUp                ;; 00CF3F : A4 19       ; \  
CODE_00CF41:          CPY.B #$02                          ;; 00CF41 : C0 02       ;  | 
CODE_00CF43:          BNE CODE_00CF48                     ;; 00CF43 : D0 03       ;  |If Mario has cape, JSR 
CODE_00CF45:          JSR.W CODE_00D044                   ;; 00CF45 : 20 44 D0    ;  |to possibly the graphics handler 
CODE_00CF48:          LDA.W DATA_00CE99,X                 ;; 00CF48 : BD 99 CE    ; \ Load from a table again 
CODE_00CF4B:          JMP.W CODE_00D01A                   ;; 00CF4B : 4C 1A D0    ; / And jump 
                                                          ;;                      ;
CODE_00CF4E:          LDA.W $13ED                         ;; 00CF4E : AD ED 13    ; \ If $13ED is #$01 - #$7F then 
CODE_00CF51:          BEQ CODE_00CF62                     ;; 00CF51 : F0 0F       ;  |branch to $CF85 
CODE_00CF53:          BPL CODE_00CF85                     ;; 00CF53 : 10 30       ;  | 
CODE_00CF55:          LDA.W $13E1                         ;; 00CF55 : AD E1 13    ;
CODE_00CF58:          LSR                                 ;; 00CF58 : 4A          ;
CODE_00CF59:          LSR                                 ;; 00CF59 : 4A          ;
CODE_00CF5A:          ORA RAM_MarioDirection              ;; 00CF5A : 05 76       ;
CODE_00CF5C:          TAY                                 ;; 00CF5C : A8          ;
CODE_00CF5D:          LDA.W DATA_00CE7F,Y                 ;; 00CF5D : B9 7F CE    ;
CODE_00CF60:          BRA CODE_00CF85                     ;; 00CF60 : 80 23       ;
                                                          ;;                      ;
CODE_00CF62:          LDA.B #$3C                          ;; 00CF62 : A9 3C       ; \ Select Case $148F 
CODE_00CF64:          LDY.W $148F                         ;; 00CF64 : AC 8F 14    ;  |Case 0:A = #$3C 
CODE_00CF67:          BEQ CODE_00CF6B                     ;; 00CF67 : F0 02       ;  |Case Else: A = #$1D 
CODE_00CF69:          LDA.B #$1D                          ;; 00CF69 : A9 1D       ;  |End Select 
CODE_00CF6B:          LDY RAM_IsDucking                   ;; 00CF6B : A4 73       ; \ If Ducking while jumping 
CODE_00CF6D:          BNE CODE_00CF85                     ;; 00CF6D : D0 16       ; / Branch to $CF85 
CODE_00CF6F:          LDA.W RAM_FireballImgTimer          ;; 00CF6F : AD 9C 14    ; \ If (Unknown) = 0 
CODE_00CF72:          BEQ CODE_00CF7E                     ;; 00CF72 : F0 0A       ; / Branch to $CF7E 
CODE_00CF74:          LDA.B #$3F                          ;; 00CF74 : A9 3F       ; A = #$3F 
CODE_00CF76:          LDY RAM_IsFlying                    ;; 00CF76 : A4 72       ; \ If Mario isn't in air,  
CODE_00CF78:          BEQ CODE_00CF85                     ;; 00CF78 : F0 0B       ;  |branch to $CF85 
CODE_00CF7A:          LDA.B #$16                          ;; 00CF7A : A9 16       ;  |Otherwise, set A to #$16 and 
CODE_00CF7C:          BRA CODE_00CF85                     ;; 00CF7C : 80 07       ; / branch to $CF85 
                                                          ;;                      ;
CODE_00CF7E:          LDA.B #$0E                          ;; 00CF7E : A9 0E       ; A = #$0E 
CODE_00CF80:          LDY.W RAM_KickImgTimer              ;; 00CF80 : AC 9A 14    ; \ If Time to show Mario's current pose is 00, 
CODE_00CF83:          BEQ CODE_00CF88                     ;; 00CF83 : F0 03       ;  | Don't jump to $D01A 
CODE_00CF85:          JMP.W CODE_00D01A                   ;; 00CF85 : 4C 1A D0    ;  | 
                                                          ;;                      ;
CODE_00CF88:          LDA.B #$1D                          ;; 00CF88 : A9 1D       ; A = #$1D 
CODE_00CF8A:          LDY.W RAM_PickUpImgTimer            ;; 00CF8A : AC 98 14    ; \ If $1499 != 0 then Jump to $D01A 
CODE_00CF8D:          BNE CODE_00CF85                     ;; 00CF8D : D0 F6       ; /  
CODE_00CF8F:          LDA.B #$0F                          ;; 00CF8F : A9 0F       ; A = #$0F 
CODE_00CF91:          LDY.W RAM_FaceCamImgTimer           ;; 00CF91 : AC 99 14    ; \ If $1499 != 0 then Jump to $D01A 
CODE_00CF94:          BNE CODE_00CF85                     ;; 00CF94 : D0 EF       ; /  
CODE_00CF96:          LDA.B #$00                          ;; 00CF96 : A9 00       ; A = #$00 
CODE_00CF98:          LDX.W $18C2                         ;; 00CF98 : AE C2 18    ; X = $18C2 (Unknown) 
CODE_00CF9B:          BNE MarioAnimNoAbs1                 ;; 00CF9B : D0 26       ; If X != 0 then branch down 
CODE_00CF9D:          LDA RAM_IsFlying                    ;; 00CF9D : A5 72       ; \ If Mario is flying branch down 
CODE_00CF9F:          BEQ CODE_00CFB7                     ;; 00CF9F : F0 16       ; /  
CODE_00CFA1:          LDY.W $14A0                         ;; 00CFA1 : AC A0 14    ; \ If $14A0 != 0 then 
CODE_00CFA4:          BNE CODE_00CFBC                     ;; 00CFA4 : D0 16       ; / Skip down 
CODE_00CFA6:          LDY.W $1407                         ;; 00CFA6 : AC 07 14    ; Spaghetticode(tm) 
CODE_00CFA9:          BEQ CODE_00CFAE                     ;; 00CFA9 : F0 03       ;
CODE_00CFAB:          LDA.W CODE_00CE78,Y                 ;; 00CFAB : B9 78 CE    ;
CODE_00CFAE:          LDY.W $148F                         ;; 00CFAE : AC 8F 14    ; \ If Mario isn't holding something, 
CODE_00CFB1:          BEQ CODE_00D01A                     ;; 00CFB1 : F0 67       ;  |branch to $D01A 
CODE_00CFB3:          LDA.B #$09                          ;; 00CFB3 : A9 09       ;  |Otherwise, set A to #$09 and 
CODE_00CFB5:          BRA CODE_00D01A                     ;; 00CFB5 : 80 63       ; / branch to $D01A 
                                                          ;;                      ;
CODE_00CFB7:          LDA.W RAM_ChangingDir               ;; 00CFB7 : AD DD 13    ;
CODE_00CFBA:          BNE CODE_00D01A                     ;; 00CFBA : D0 5E       ;
CODE_00CFBC:          LDA RAM_MarioSpeedX                 ;; 00CFBC : A5 7B       ; \  
CODE_00CFBE:          BPL MarioAnimNoAbs1                 ;; 00CFBE : 10 03       ;  | 
CODE_00CFC0:          EOR.B #$FF                          ;; 00CFC0 : 49 FF       ;  |Set A to absolute value of Mario's X speed 
CODE_00CFC2:          INC A                               ;; 00CFC2 : 1A          ;  | 
MarioAnimNoAbs1:      TAX                                 ;; ?QPWZ? : AA          ; Copy A to X 
CODE_00CFC4:          BNE CODE_00CFD4                     ;; 00CFC4 : D0 0E       ; If Mario isn't standing still, branch to $CFD4 
CODE_00CFC6:          XBA                                 ;; 00CFC6 : EB          ; "Push" A 
CODE_00CFC7:          LDA RAM_ControllerA                 ;; 00CFC7 : A5 15       ; \  
CODE_00CFC9:          AND.B #$08                          ;; 00CFC9 : 29 08       ;  |If player isn't pressing up, 
CODE_00CFCB:          BEQ CODE_00D002                     ;; 00CFCB : F0 35       ;  |branch to $D002 
CODE_00CFCD:          LDA.B #$03                          ;; 00CFCD : A9 03       ;  |Otherwise, store x03 in $13DE and 
CODE_00CFCF:          STA.W $13DE                         ;; 00CFCF : 8D DE 13    ;  |branch to $D002 
CODE_00CFD2:          BRA CODE_00D002                     ;; 00CFD2 : 80 2E       ; /  
                                                          ;;                      ;
CODE_00CFD4:          LDA $86                             ;; 00CFD4 : A5 86       ; \ If level isn't slippery, 
CODE_00CFD6:          BEQ CODE_00CFE3                     ;; 00CFD6 : F0 0B       ; / branch to $CFE3 
CODE_00CFD8:          LDA RAM_ControllerA                 ;; 00CFD8 : A5 15       ;
CODE_00CFDA:          AND.B #$03                          ;; 00CFDA : 29 03       ;
CODE_00CFDC:          BEQ CODE_00D003                     ;; 00CFDC : F0 25       ;
CODE_00CFDE:          LDA.B #$68                          ;; 00CFDE : A9 68       ;
CODE_00CFE0:          STA.W $13E5                         ;; 00CFE0 : 8D E5 13    ;
CODE_00CFE3:          LDA.W $13DB                         ;; 00CFE3 : AD DB 13    ; A = $13DB 
CODE_00CFE6:          LDY.W $1496                         ;; 00CFE6 : AC 96 14    ; \ If Mario is hurt (flashing), 
CODE_00CFE9:          BNE CODE_00D003                     ;; 00CFE9 : D0 18       ; / branch to $D003 
CODE_00CFEB:          DEC A                               ;; 00CFEB : 3A          ; A = A - 1 
CODE_00CFEC:          BPL CODE_00CFF3                     ;; 00CFEC : 10 05       ; \If bit 7 is clear, 
CODE_00CFEE:          LDY RAM_MarioPowerUp                ;; 00CFEE : A4 19       ;  | Load amount of walking frames 
CODE_00CFF0:          LDA.W NumWalkingFrames,Y            ;; 00CFF0 : B9 78 DC    ;  | for current powerup 
CODE_00CFF3:          XBA                                 ;; 00CFF3 : EB          ; \ >>-This code puts together an index to a table further down-<< 
CODE_00CFF4:          TXA                                 ;; 00CFF4 : 8A          ;  |-\ Above Line: "Push" frame amount 
CODE_00CFF5:          LSR                                 ;; 00CFF5 : 4A          ;  |  |A = X / 8 
CODE_00CFF6:          LSR                                 ;; 00CFF6 : 4A          ;  |  | 
CODE_00CFF7:          LSR                                 ;; 00CFF7 : 4A          ;  |-/  
CODE_00CFF8:          ORA.W $13E5                         ;; 00CFF8 : 0D E5 13    ;  |ORA with $13E5 
CODE_00CFFB:          TAY                                 ;; 00CFFB : A8          ;  |And store A to Y 
CODE_00CFFC:          LDA.W DATA_00DC7C,Y                 ;; 00CFFC : B9 7C DC    ;  | 
CODE_00CFFF:          STA.W $1496                         ;; 00CFFF : 8D 96 14    ; /  
CODE_00D002:          XBA                                 ;; 00D002 : EB          ; \ Switch in frame amount and store it to $13DB 
CODE_00D003:          STA.W $13DB                         ;; 00D003 : 8D DB 13    ; /  
CODE_00D006:          CLC                                 ;; 00D006 : 18          ; \ Add walking animation type 
CODE_00D007:          ADC.W $13DE                         ;; 00D007 : 6D DE 13    ; / (Walking, running...) 
CODE_00D00A:          LDY.W $148F                         ;; 00D00A : AC 8F 14    ; \  
CODE_00D00D:          BEQ CODE_00D014                     ;; 00D00D : F0 05       ;  | 
CODE_00D00F:          CLC                                 ;; 00D00F : 18          ;  |If Mario is carrying something, add #$07 
CODE_00D010:          ADC.B #$07                          ;; 00D010 : 69 07       ;  | 
CODE_00D012:          BRA CODE_00D01A                     ;; 00D012 : 80 06       ;  | 
                                                          ;;                      ;
CODE_00D014:          CPX.B #$2F                          ;; 00D014 : E0 2F       ; \  
CODE_00D016:          BCC CODE_00D01A                     ;; 00D016 : 90 02       ;  |If X is greater than #$2F, add #$04 
CODE_00D018:          ADC.B #$03                          ;; 00D018 : 69 03       ; / <-Carry is always set here, adding #$01 to (#$03 + A) 
CODE_00D01A:          LDY.W RAM_WallWalkStatus            ;; 00D01A : AC E3 13    ; \ If Mario isn't rotated 45 degrees (triangle 
CODE_00D01D:          BEQ MarioAnimNo45                   ;; 00D01D : F0 11       ; / block), branch to $D030 
CODE_00D01F:          TYA                                 ;; 00D01F : 98          ; \ Y AND #$01 -> Mario's Direction RAM Byte 
CODE_00D020:          AND.B #$01                          ;; 00D020 : 29 01       ;  | 
CODE_00D022:          STA RAM_MarioDirection              ;; 00D022 : 85 76       ; /  
CODE_00D024:          LDA.B #$10                          ;; 00D024 : A9 10       ; \  
CODE_00D026:          CPY.B #$06                          ;; 00D026 : C0 06       ;  |If Y < 6 then 
CODE_00D028:          BCC MarioAnimNo45                   ;; 00D028 : 90 06       ;  |    A = #13DB + $11 
CODE_00D02A:          LDA.W $13DB                         ;; 00D02A : AD DB 13    ;  |Else 
CODE_00D02D:          CLC                                 ;; 00D02D : 18          ;  |    A = #$10 
CODE_00D02E:          ADC.B #$11                          ;; 00D02E : 69 11       ;  |End If 
MarioAnimNo45:        STA.W MarioFrame                    ;; ?QPWZ? : 8D E0 13    ; Store in Current animation frame 
Return00D033:         RTL                                 ;; ?QPWZ? : 6B          ; And Finish 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00D034:          .db $0C,$00,$F4,$FF,$08,$00,$F8,$FF ;; 00D034               ;
DATA_00D03C:          .db $10,$00,$10,$00,$02,$00,$02,$00 ;; 00D03C               ;
                                                          ;;                      ;
CODE_00D044:          LDY.B #$01                          ;; 00D044 : A0 01       ;
CODE_00D046:          STY.W $13E8                         ;; 00D046 : 8C E8 13    ;
CODE_00D049:          ASL                                 ;; 00D049 : 0A          ;
CODE_00D04A:          TAY                                 ;; 00D04A : A8          ;
CODE_00D04B:          REP #$20                            ;; 00D04B : C2 20       ; 16 bit A ; Accum (16 bit) 
CODE_00D04D:          LDA RAM_MarioXPos                   ;; 00D04D : A5 94       ; \  
CODE_00D04F:          CLC                                 ;; 00D04F : 18          ;  | 
CODE_00D050:          ADC.W DATA_00D034,Y                 ;; 00D050 : 79 34 D0    ;  | 
CODE_00D053:          STA.W $13E9                         ;; 00D053 : 8D E9 13    ;  |Set cape<->sprite collision coordinates 
CODE_00D056:          LDA RAM_MarioYPos                   ;; 00D056 : A5 96       ;  | 
CODE_00D058:          CLC                                 ;; 00D058 : 18          ;  | 
CODE_00D059:          ADC.W DATA_00D03C,Y                 ;; 00D059 : 79 3C D0    ;  | 
CODE_00D05C:          STA.W $13EB                         ;; 00D05C : 8D EB 13    ; /  
CODE_00D05F:          SEP #$20                            ;; 00D05F : E2 20       ; 8 bit A ; Accum (8 bit) 
Return00D061:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00D062:          LDA RAM_MarioPowerUp                ;; 00D062 : A5 19       ;
CODE_00D064:          CMP.B #$02                          ;; 00D064 : C9 02       ;
CODE_00D066:          BNE CODE_00D081                     ;; 00D066 : D0 19       ;
CODE_00D068:          BIT $16                             ;; 00D068 : 24 16       ;
CODE_00D06A:          BVC Return00D0AD                    ;; 00D06A : 50 41       ;
CODE_00D06C:          LDA RAM_IsDucking                   ;; 00D06C : A5 73       ;
CODE_00D06E:          ORA.W RAM_OnYoshi                   ;; 00D06E : 0D 7A 18    ;
CODE_00D071:          ORA.W RAM_IsSpinJump                ;; 00D071 : 0D 0D 14    ;
CODE_00D074:          BNE Return00D0AD                    ;; 00D074 : D0 37       ;
CODE_00D076:          LDA.B #$12                          ;; 00D076 : A9 12       ;
CODE_00D078:          STA.W $14A6                         ;; 00D078 : 8D A6 14    ;
CODE_00D07B:          LDA.B #$04                          ;; 00D07B : A9 04       ; \ Play sound effect 
CODE_00D07D:          STA.W $1DFC                         ;; 00D07D : 8D FC 1D    ; / 
Return00D080:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00D081:          CMP.B #$03                          ;; 00D081 : C9 03       ;
CODE_00D083:          BNE Return00D0AD                    ;; 00D083 : D0 28       ;
CODE_00D085:          LDA RAM_IsDucking                   ;; 00D085 : A5 73       ;
CODE_00D087:          ORA.W RAM_OnYoshi                   ;; 00D087 : 0D 7A 18    ;
CODE_00D08A:          BNE Return00D0AD                    ;; 00D08A : D0 21       ;
CODE_00D08C:          BIT $16                             ;; 00D08C : 24 16       ;
CODE_00D08E:          BVS CODE_00D0AA                     ;; 00D08E : 70 1A       ;
CODE_00D090:          LDA.W RAM_IsSpinJump                ;; 00D090 : AD 0D 14    ;
CODE_00D093:          BEQ Return00D0AD                    ;; 00D093 : F0 18       ;
CODE_00D095:          INC.W $13E2                         ;; 00D095 : EE E2 13    ;
CODE_00D098:          LDA.W $13E2                         ;; 00D098 : AD E2 13    ;
CODE_00D09B:          AND.B #$0F                          ;; 00D09B : 29 0F       ;
CODE_00D09D:          BNE Return00D0AD                    ;; 00D09D : D0 0E       ;
CODE_00D09F:          TAY                                 ;; 00D09F : A8          ;
CODE_00D0A0:          LDA.W $13E2                         ;; 00D0A0 : AD E2 13    ;
CODE_00D0A3:          AND.B #$10                          ;; 00D0A3 : 29 10       ;
CODE_00D0A5:          BEQ CODE_00D0A8                     ;; 00D0A5 : F0 01       ;
CODE_00D0A7:          INY                                 ;; 00D0A7 : C8          ;
CODE_00D0A8:          STY RAM_MarioDirection              ;; 00D0A8 : 84 76       ;
CODE_00D0AA:          JSR.W ShootFireball                 ;; 00D0AA : 20 A8 FE    ; haha, I read this as "FEAR" at first 
Return00D0AD:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00D0AE:          .db $7C,$00,$80,$00,$00,$06,$00,$01 ;; 00D0AE               ;
                                                          ;;                      ;
MarioDeathAni:        STZ RAM_MarioPowerUp                ;; ?QPWZ? : 64 19       ; Set powerup to 0 
CODE_00D0B8:          LDA.B #$3E                          ;; 00D0B8 : A9 3E       ; \  
CODE_00D0BA:          STA.W MarioFrame                    ;; 00D0BA : 8D E0 13    ; / Set Mario image to death image 
CODE_00D0BD:          LDA RAM_FrameCounter                ;; 00D0BD : A5 13       ; \  
CODE_00D0BF:          AND.B #$03                          ;; 00D0BF : 29 03       ;  |Decrease "Death fall timer" every four frames 
CODE_00D0C1:          BNE CODE_00D0C6                     ;; 00D0C1 : D0 03       ;  | 
CODE_00D0C3:          DEC.W $1496                         ;; 00D0C3 : CE 96 14    ;  | 
CODE_00D0C6:          LDA.W $1496                         ;; 00D0C6 : AD 96 14    ; \ If Death fall timer isn't #$00, 
CODE_00D0C9:          BNE DeathNotDone                    ;; 00D0C9 : D0 3D       ; / branch to $D108 
CODE_00D0CB:          LDA.B #$80                          ;; 00D0CB : A9 80       ;
CODE_00D0CD:          STA.W $0DD5                         ;; 00D0CD : 8D D5 0D    ;
CODE_00D0D0:          LDA.W $1B9B                         ;; 00D0D0 : AD 9B 1B    ;
CODE_00D0D3:          BNE CODE_00D0D8                     ;; 00D0D3 : D0 03       ;
CODE_00D0D5:          STZ.W RAM_OWHasYoshi                ;; 00D0D5 : 9C C1 0D    ; Set reserve item to 0 
CODE_00D0D8:          DEC.W RAM_StatusLives               ;; 00D0D8 : CE BE 0D    ; Decrease amount of lifes 
CODE_00D0DB:          BPL DeathNotGameOver                ;; 00D0DB : 10 09       ; If not Game Over, branch to $D0E6 
CODE_00D0DD:          LDA.B #$0A                          ;; 00D0DD : A9 0A       ;
CODE_00D0DF:          STA.W $1DFB                         ;; 00D0DF : 8D FB 1D    ; / Change music 
CODE_00D0E2:          LDX.B #$14                          ;; 00D0E2 : A2 14       ; Set X (Death message) to x14 (Game Over) 
CODE_00D0E4:          BRA DeathShowMessage                ;; 00D0E4 : 80 0F       ;
                                                          ;;                      ;
DeathNotGameOver:     LDY.B #$0B                          ;; ?QPWZ? : A0 0B       ; Set Y (game mode) to x0B (Fade to overworld) 
CODE_00D0E8:          LDA.W $0F31                         ;; 00D0E8 : AD 31 0F    ; \  
CODE_00D0EB:          ORA.W $0F32                         ;; 00D0EB : 0D 32 0F    ;  |If time isn't zero, 
CODE_00D0EE:          ORA.W $0F33                         ;; 00D0EE : 0D 33 0F    ;  |branch to $D104 
CODE_00D0F1:          BNE DeathNotTimeUp                  ;; 00D0F1 : D0 11       ; /  
CODE_00D0F3:          LDX.B #$1D                          ;; 00D0F3 : A2 1D       ; Set X (Death message) to x1D (Time Up) 
DeathShowMessage:     STX.W $143B                         ;; ?QPWZ? : 8E 3B 14    ; Store X in Death message 
CODE_00D0F8:          LDA.B #$C0                          ;; 00D0F8 : A9 C0       ; \ Set Death message animation to xC0 
CODE_00D0FA:          STA.W $143C                         ;; 00D0FA : 8D 3C 14    ; /(Must be divisable by 4) 
CODE_00D0FD:          LDA.B #$FF                          ;; 00D0FD : A9 FF       ; \ Set Death message timer to xFF 
CODE_00D0FF:          STA.W $143D                         ;; 00D0FF : 8D 3D 14    ; / 
CODE_00D102:          LDY.B #$15                          ;; 00D102 : A0 15       ; Set Y (game mode) to x15 (Fade to Game Over) 
DeathNotTimeUp:       STY.W RAM_GameMode                  ;; ?QPWZ? : 8C 00 01    ; Store Y in Game Mode 
Return00D107:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
DeathNotDone:         CMP.B #$26                          ;; ?QPWZ? : C9 26       ; \ If Death fall timer >= x26, 
CODE_00D10A:          BCS DeathNotDoneEnd                 ;; 00D10A : B0 10       ; / return 
CODE_00D10C:          STZ RAM_MarioSpeedX                 ;; 00D10C : 64 7B       ; Set Mario X speed to 0 
CODE_00D10E:          JSR.W CODE_00DC2D                   ;; 00D10E : 20 2D DC    ;
CODE_00D111:          JSR.W CODE_00D92E                   ;; 00D111 : 20 2E D9    ;
CODE_00D114:          LDA RAM_FrameCounter                ;; 00D114 : A5 13       ; \  
CODE_00D116:          LSR                                 ;; 00D116 : 4A          ;  | 
CODE_00D117:          LSR                                 ;; 00D117 : 4A          ;  |Flip death image every four frames 
CODE_00D118:          AND.B #$01                          ;; 00D118 : 29 01       ;  | 
CODE_00D11A:          STA RAM_MarioDirection              ;; 00D11A : 85 76       ; /  
DeathNotDoneEnd:      RTS                                 ;; ?QPWZ? : 60          ;
                                                          ;;                      ;
                                                          ;;                      ;
GrowingAniImgs:       .db $00,$3D,$00,$3D,$00,$3D,$46,$3D ;; ?QPWZ?               ;
                      .db $46,$3D,$46,$3D                 ;; ?QPWZ?               ;
                                                          ;;                      ;
PowerDownAni:         LDA.W $1496                         ;; ?QPWZ? : AD 96 14    ;
CODE_00D12C:          BEQ CODE_00D140                     ;; 00D12C : F0 12       ;
CODE_00D12E:          LSR                                 ;; 00D12E : 4A          ;
CODE_00D12F:          LSR                                 ;; 00D12F : 4A          ;
CODE_00D130:          TAY                                 ;; 00D130 : A8          ;
CODE_00D131:          LDA.W GrowingAniImgs,Y              ;; 00D131 : B9 1D D1    ; \ Set Mario's image 
CODE_00D134:          STA.W MarioFrame                    ;; 00D134 : 8D E0 13    ; / 
CODE_00D137:          LDA.W $1496                         ;; 00D137 : AD 96 14    ;
CODE_00D13A:          BEQ Return00D13F                    ;; 00D13A : F0 03       ;
CODE_00D13C:          DEC.W $1496                         ;; 00D13C : CE 96 14    ;
Return00D13F:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00D140:          LDA.B #$7F                          ;; 00D140 : A9 7F       ;
CODE_00D142:          STA.W $1497                         ;; 00D142 : 8D 97 14    ;
CODE_00D145:          BRA CODE_00D158                     ;; 00D145 : 80 11       ;
                                                          ;;                      ;
MushroomAni:          LDA.W $1496                         ;; ?QPWZ? : AD 96 14    ;
CODE_00D14A:          BEQ CODE_00D156                     ;; 00D14A : F0 0A       ;
CODE_00D14C:          LSR                                 ;; 00D14C : 4A          ;
CODE_00D14D:          LSR                                 ;; 00D14D : 4A          ;
CODE_00D14E:          EOR.B #$FF                          ;; 00D14E : 49 FF       ;
CODE_00D150:          INC A                               ;; 00D150 : 1A          ;
CODE_00D151:          CLC                                 ;; 00D151 : 18          ;
CODE_00D152:          ADC.B #$0B                          ;; 00D152 : 69 0B       ;
CODE_00D154:          BRA CODE_00D130                     ;; 00D154 : 80 DA       ;
                                                          ;;                      ;
CODE_00D156:          INC RAM_MarioPowerUp                ;; 00D156 : E6 19       ;
CODE_00D158:          LDA.B #$00                          ;; 00D158 : A9 00       ;
CODE_00D15A:          STA RAM_MarioAnimation              ;; 00D15A : 85 71       ;
CODE_00D15C:          STZ RAM_SpritesLocked               ;; 00D15C : 64 9D       ;
Return00D15E:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CapeAni:              LDA.B #$7F                          ;; ?QPWZ? : A9 7F       ;
CODE_00D161:          STA $78                             ;; 00D161 : 85 78       ;
CODE_00D163:          DEC.W $1496                         ;; 00D163 : CE 96 14    ;
CODE_00D166:          BNE Return00D15E                    ;; 00D166 : D0 F6       ;
CODE_00D168:          LDA RAM_MarioPowerUp                ;; 00D168 : A5 19       ;
CODE_00D16A:          LSR                                 ;; 00D16A : 4A          ;
CODE_00D16B:          BEQ CODE_00D140                     ;; 00D16B : F0 D3       ;
CODE_00D16D:          BNE CODE_00D158                     ;; 00D16D : D0 E9       ;
FlowerAni:            LDA.W $13ED                         ;; ?QPWZ? : AD ED 13    ;
CODE_00D172:          AND.B #$80                          ;; 00D172 : 29 80       ;
CODE_00D174:          ORA.W $1407                         ;; 00D174 : 0D 07 14    ;
CODE_00D177:          BEQ CODE_00D187                     ;; 00D177 : F0 0E       ;
ADDR_00D179:          STZ.W $1407                         ;; 00D179 : 9C 07 14    ;
ADDR_00D17C:          LDA.W $13ED                         ;; 00D17C : AD ED 13    ;
ADDR_00D17F:          AND.B #$7F                          ;; 00D17F : 29 7F       ;
ADDR_00D181:          STA.W $13ED                         ;; 00D181 : 8D ED 13    ;
ADDR_00D184:          STZ.W MarioFrame                    ;; 00D184 : 9C E0 13    ;
CODE_00D187:          DEC.W RAM_FlashingPalTimer          ;; 00D187 : CE 9B 14    ;
CODE_00D18A:          BEQ CODE_00D158                     ;; 00D18A : F0 CC       ;
Return00D18C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
PipeSpeedX:           .db $F8,$08                         ;; ?QPWZ?               ;
                                                          ;;                      ;
PipeSpeedY:           .db $00,$00,$F0                     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D192:          .db $10                             ;; 00D192               ;
                                                          ;;                      ;
DATA_00D193:          .db $00,$63,$1C,$00                 ;; 00D193               ;
                                                          ;;                      ;
DoorPipeAni:          JSR.W NoButtons                     ;; ?QPWZ? : 20 2D F6    ;
CODE_00D19A:          STZ.W $13DE                         ;; 00D19A : 9C DE 13    ;
CODE_00D19D:          JSL.L CODE_00CEB1                   ;; 00D19D : 22 B1 CE 00 ;
CODE_00D1A1:          JSL.L CODE_00CFBC                   ;; 00D1A1 : 22 BC CF 00 ;
CODE_00D1A5:          JSR.W CODE_00D1F4                   ;; 00D1A5 : 20 F4 D1    ;
CODE_00D1A8:          LDA.W RAM_OnYoshi                   ;; 00D1A8 : AD 7A 18    ;
CODE_00D1AB:          BEQ CODE_00D1B2                     ;; 00D1AB : F0 05       ;
CODE_00D1AD:          LDA.B #$29                          ;; 00D1AD : A9 29       ; \ Mario's image = Entering horizontal pipe on Yoshi 
CODE_00D1AF:          STA.W MarioFrame                    ;; 00D1AF : 8D E0 13    ; / 
CODE_00D1B2:          REP #$20                            ;; 00D1B2 : C2 20       ; Accum (16 bit) 
CODE_00D1B4:          LDA RAM_MarioYPos                   ;; 00D1B4 : A5 96       ;
CODE_00D1B6:          SEC                                 ;; 00D1B6 : 38          ;
CODE_00D1B7:          SBC.W #$0008                        ;; 00D1B7 : E9 08 00    ;
CODE_00D1BA:          AND.W #$FFF0                        ;; 00D1BA : 29 F0 FF    ;
CODE_00D1BD:          ORA.W #$000E                        ;; 00D1BD : 09 0E 00    ;
CODE_00D1C0:          STA RAM_MarioYPos                   ;; 00D1C0 : 85 96       ;
CODE_00D1C2:          SEP #$20                            ;; 00D1C2 : E2 20       ; Accum (8 bit) 
CODE_00D1C4:          LDA $89                             ;; 00D1C4 : A5 89       ;
CODE_00D1C6:          LSR                                 ;; 00D1C6 : 4A          ;
CODE_00D1C7:          TAY                                 ;; 00D1C7 : A8          ;
CODE_00D1C8:          INY                                 ;; 00D1C8 : C8          ;
CODE_00D1C9:          LDA.W DATA_00D192,Y                 ;; 00D1C9 : B9 92 D1    ;
CODE_00D1CC:          LDX.W $148F                         ;; 00D1CC : AE 8F 14    ;
CODE_00D1CF:          BEQ CODE_00D1DB                     ;; 00D1CF : F0 0A       ;
CODE_00D1D1:          EOR.B #$1C                          ;; 00D1D1 : 49 1C       ;
CODE_00D1D3:          DEC.W RAM_FaceCamImgTimer           ;; 00D1D3 : CE 99 14    ;
CODE_00D1D6:          BPL CODE_00D1DB                     ;; 00D1D6 : 10 03       ;
CODE_00D1D8:          INC.W RAM_FaceCamImgTimer           ;; 00D1D8 : EE 99 14    ;
CODE_00D1DB:          LDX $88                             ;; 00D1DB : A6 88       ;
CODE_00D1DD:          CPX.B #$1D                          ;; 00D1DD : E0 1D       ;
CODE_00D1DF:          BCS CODE_00D1F0                     ;; 00D1DF : B0 0F       ;
CODE_00D1E1:          CPY.B #$03                          ;; 00D1E1 : C0 03       ;
CODE_00D1E3:          BCC CODE_00D1ED                     ;; 00D1E3 : 90 08       ;
CODE_00D1E5:          REP #$20                            ;; 00D1E5 : C2 20       ; Accum (16 bit) 
CODE_00D1E7:          INC RAM_MarioYPos                   ;; 00D1E7 : E6 96       ;
CODE_00D1E9:          INC RAM_MarioYPos                   ;; 00D1E9 : E6 96       ;
CODE_00D1EB:          SEP #$20                            ;; 00D1EB : E2 20       ; Accum (8 bit) 
CODE_00D1ED:          LDA.W DATA_00D193,Y                 ;; 00D1ED : B9 93 D1    ;
CODE_00D1F0:          STA $78                             ;; 00D1F0 : 85 78       ;
CODE_00D1F2:          BRA CODE_00D22D                     ;; 00D1F2 : 80 39       ;
                                                          ;;                      ;
CODE_00D1F4:          LDA.W $14A2                         ;; 00D1F4 : AD A2 14    ;
CODE_00D1F7:          BEQ CODE_00D1FC                     ;; 00D1F7 : F0 03       ;
CODE_00D1F9:          DEC.W $14A2                         ;; 00D1F9 : CE A2 14    ;
CODE_00D1FC:          JMP.W CODE_00D137                   ;; 00D1FC : 4C 37 D1    ;
                                                          ;;                      ;
                                                          ;;                      ;
PipeCntrBoundryX:     .db $0A,$06                         ;; ?QPWZ?               ;
                                                          ;;                      ;
PipeCntringSpeed:     .db $FF,$01                         ;; ?QPWZ?               ;
                                                          ;;                      ;
VertPipeAni:          JSR.W NoButtons                     ;; ?QPWZ? : 20 2D F6    ;
CODE_00D206:          STZ.W $13DF                         ;; 00D206 : 9C DF 13    ;
CODE_00D209:          LDA.B #$0F                          ;; 00D209 : A9 0F       ;
CODE_00D20B:          LDY.W RAM_OnYoshi                   ;; 00D20B : AC 7A 18    ;
CODE_00D20E:          BEQ CODE_00D22A                     ;; 00D20E : F0 1A       ;
CODE_00D210:          LDX.B #$00                          ;; 00D210 : A2 00       ;
CODE_00D212:          LDY RAM_MarioDirection              ;; 00D212 : A4 76       ; \ 
CODE_00D214:          LDA RAM_MarioXPos                   ;; 00D214 : A5 94       ;  | If not relativly centered on the pipe... 
CODE_00D216:          AND.B #$0F                          ;; 00D216 : 29 0F       ;  | 
CODE_00D218:          CMP.W PipeCntrBoundryX,Y            ;; 00D218 : D9 FF D1    ;  | 
CODE_00D21B:          BEQ CODE_00D228                     ;; 00D21B : F0 0B       ;  | 
CODE_00D21D:          BPL CODE_00D220                     ;; 00D21D : 10 01       ;  | 
CODE_00D21F:          INX                                 ;; 00D21F : E8          ;  | 
CODE_00D220:          LDA RAM_MarioXPos                   ;; 00D220 : A5 94       ;  | ...adjust Mario's X postion 
CODE_00D222:          CLC                                 ;; 00D222 : 18          ;  | 
CODE_00D223:          ADC.W PipeCntringSpeed,X            ;; 00D223 : 7D 01 D2    ;  | 
CODE_00D226:          STA RAM_MarioXPos                   ;; 00D226 : 85 94       ; / 
CODE_00D228:          LDA.B #$21                          ;; 00D228 : A9 21       ; \ Mario's image = going down pipe 
CODE_00D22A:          STA.W MarioFrame                    ;; 00D22A : 8D E0 13    ; / 
CODE_00D22D:          LDA.B #$40                          ;; 00D22D : A9 40       ; \ Set holding X/Y on controller 
CODE_00D22F:          STA RAM_ControllerA                 ;; 00D22F : 85 15       ; / 
CODE_00D231:          LDA.B #$02                          ;; 00D231 : A9 02       ; \ Set behind scenery flag 
CODE_00D233:          STA.W RAM_IsBehindScenery           ;; 00D233 : 8D F9 13    ; / 
CODE_00D236:          LDA $89                             ;; 00D236 : A5 89       ;
CODE_00D238:          CMP.B #$04                          ;; 00D238 : C9 04       ;
CODE_00D23A:          LDY $88                             ;; 00D23A : A4 88       ;
CODE_00D23C:          BEQ CODE_00D268                     ;; 00D23C : F0 2A       ;
CODE_00D23E:          AND.B #$03                          ;; 00D23E : 29 03       ;
CODE_00D240:          TAY                                 ;; 00D240 : A8          ;
CODE_00D241:          DEC $88                             ;; 00D241 : C6 88       ;
CODE_00D243:          BNE CODE_00D24E                     ;; 00D243 : D0 09       ;
CODE_00D245:          BCS CODE_00D24E                     ;; 00D245 : B0 07       ;
CODE_00D247:          LDA.B #$7F                          ;; 00D247 : A9 7F       ;
CODE_00D249:          STA $78                             ;; 00D249 : 85 78       ;
CODE_00D24B:          INC.W $1405                         ;; 00D24B : EE 05 14    ;
CODE_00D24E:          LDA RAM_MarioSpeedX                 ;; 00D24E : A5 7B       ; \ If Mario has no speed... 
CODE_00D250:          ORA RAM_MarioSpeedY                 ;; 00D250 : 05 7D       ;  | 
CODE_00D252:          BNE CODE_00D259                     ;; 00D252 : D0 05       ;  | 
CODE_00D254:          LDA.B #$04                          ;; 00D254 : A9 04       ;  | ...play sound effect 
CODE_00D256:          STA.W $1DF9                         ;; 00D256 : 8D F9 1D    ; / 
CODE_00D259:          LDA.W PipeSpeedX,Y                  ;; 00D259 : B9 8D D1    ; \ Set X speed 
CODE_00D25C:          STA RAM_MarioSpeedX                 ;; 00D25C : 85 7B       ; / 
CODE_00D25E:          LDA.W PipeSpeedY,Y                  ;; 00D25E : B9 8F D1    ; \ Set Y speed 
CODE_00D261:          STA RAM_MarioSpeedY                 ;; 00D261 : 85 7D       ; / 
CODE_00D263:          STZ RAM_IsFlying                    ;; 00D263 : 64 72       ; Mario flying = false 
CODE_00D265:          JMP.W CODE_00DC2D                   ;; 00D265 : 4C 2D DC    ;
                                                          ;;                      ;
CODE_00D268:          BCC CODE_00D273                     ;; 00D268 : 90 09       ;
CODE_00D26A:          STZ.W RAM_IsBehindScenery           ;; 00D26A : 9C F9 13    ; \ In new level, reset values 
CODE_00D26D:          STZ.W RAM_YoshiInPipe               ;; 00D26D : 9C 19 14    ; / 
CODE_00D270:          JMP.W CODE_00D158                   ;; 00D270 : 4C 58 D1    ;
                                                          ;;                      ;
CODE_00D273:          INC.W $141A                         ;; 00D273 : EE 1A 14    ;
CODE_00D276:          LDA.B #$0F                          ;; 00D276 : A9 0F       ;
CODE_00D278:          STA.W RAM_GameMode                  ;; 00D278 : 8D 00 01    ;
Return00D27B:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
ADDR_00D27C:          LDA RAM_MarioYPos                   ;; 00D27C : A5 96       ; \ Unreachable 
ADDR_00D27E:          SEC                                 ;; 00D27E : 38          ;  | 
ADDR_00D27F:          SBC $D3                             ;; 00D27F : E5 D3       ;  | 
ADDR_00D281:          CLC                                 ;; 00D281 : 18          ;  | 
ADDR_00D282:          ADC $88                             ;; 00D282 : 65 88       ;  | 
ADDR_00D284:          STA $88                             ;; 00D284 : 85 88       ;  | 
Return00D286:         RTS                                 ;; ?QPWZ? : 60          ; / Return 
                                                          ;;                      ;
PipeCannonAni:        JSR.W NoButtons                     ;; ?QPWZ? : 20 2D F6    ;
CODE_00D28A:          LDA.B #$02                          ;; 00D28A : A9 02       ;
CODE_00D28C:          STA.W RAM_IsBehindScenery           ;; 00D28C : 8D F9 13    ;
CODE_00D28F:          LDA.B #$0C                          ;; 00D28F : A9 0C       ;
CODE_00D291:          STA RAM_IsFlying                    ;; 00D291 : 85 72       ;
CODE_00D293:          JSR.W CODE_00CD8B                   ;; 00D293 : 20 8B CD    ;
CODE_00D296:          DEC $88                             ;; 00D296 : C6 88       ;
CODE_00D298:          BNE CODE_00D29D                     ;; 00D298 : D0 03       ;
CODE_00D29A:          JMP.W CODE_00D26A                   ;; 00D29A : 4C 6A D2    ;
                                                          ;;                      ;
CODE_00D29D:          LDA $88                             ;; 00D29D : A5 88       ;
CODE_00D29F:          CMP.B #$18                          ;; 00D29F : C9 18       ;
CODE_00D2A1:          BCC CODE_00D2AA                     ;; 00D2A1 : 90 07       ;
CODE_00D2A3:          BNE CODE_00D2B2                     ;; 00D2A3 : D0 0D       ;
CODE_00D2A5:          LDA.B #$09                          ;; 00D2A5 : A9 09       ; \ Play sound effect 
CODE_00D2A7:          STA.W $1DFC                         ;; 00D2A7 : 8D FC 1D    ; / 
CODE_00D2AA:          STZ.W RAM_IsBehindScenery           ;; 00D2AA : 9C F9 13    ;
CODE_00D2AD:          STZ.W RAM_YoshiInPipe               ;; 00D2AD : 9C 19 14    ;
CODE_00D2B0:          STZ RAM_SpritesLocked               ;; 00D2B0 : 64 9D       ; Set sprites not locked 
CODE_00D2B2:          LDA.B #$40                          ;; 00D2B2 : A9 40       ; \ X speed = #$40 
CODE_00D2B4:          STA RAM_MarioSpeedX                 ;; 00D2B4 : 85 7B       ; / 
CODE_00D2B6:          LDA.B #$C0                          ;; 00D2B6 : A9 C0       ; \ Y speed = #$C0 
CODE_00D2B8:          STA RAM_MarioSpeedY                 ;; 00D2B8 : 85 7D       ; / 
CODE_00D2BA:          JMP.W CODE_00DC2D                   ;; 00D2BA : 4C 2D DC    ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00D2BD:          .db $B0,$B6,$AE,$B4,$AB,$B2,$A9,$B0 ;; 00D2BD               ;
                      .db $A6,$AE,$A4,$AB,$A1,$A9,$9F,$A6 ;; ?QPWZ?               ;
DATA_00D2CD:          .db $00,$FF,$00,$01,$00,$FF,$00,$01 ;; 00D2CD               ;
                      .db $00,$FF,$00,$01,$80,$FE,$C0,$00 ;; ?QPWZ?               ;
                      .db $40,$FF,$80,$01,$00,$FE,$40,$00 ;; ?QPWZ?               ;
                      .db $C0,$FF,$00,$02,$00,$FE,$40,$00 ;; ?QPWZ?               ;
                      .db $00,$FE,$40,$00,$C0,$FF,$00,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$00,$02,$00,$FC,$00,$FF ;; ?QPWZ?               ;
                      .db $00,$01,$00,$04,$00,$FF,$00,$01 ;; ?QPWZ?               ;
                      .db $00,$FF,$00,$01                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D309:          .db $E0,$FF,$20,$00,$E0,$FF,$20,$00 ;; 00D309               ;
                      .db $E0,$FF,$20,$00,$C0,$FF,$20,$00 ;; ?QPWZ?               ;
                      .db $E0,$FF,$40,$00,$80,$FF,$20,$00 ;; ?QPWZ?               ;
                      .db $E0,$FF,$80,$00,$80,$FF,$20,$00 ;; ?QPWZ?               ;
                      .db $80,$FF,$20,$00,$E0,$FF,$80,$00 ;; ?QPWZ?               ;
                      .db $E0,$FF,$80,$00,$00,$FE,$80,$FF ;; ?QPWZ?               ;
                      .db $80,$00,$00,$02,$00,$FF,$00,$01 ;; ?QPWZ?               ;
                      .db $00,$FF,$00,$01                 ;; ?QPWZ?               ;
                                                          ;;                      ;
MarioAccel?:          .db $80                             ;; ?QPWZ?               ;
                                                          ;;                      ;
MarioAccel2?:         .db $FE,$80,$FE,$80,$01,$80,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$80,$01,$80,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$80,$01,$80,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$40,$01,$40,$01,$C0 ;; ?QPWZ?               ;
                      .db $FE,$C0,$FE,$80,$01,$80,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$00,$01,$00,$01,$00 ;; ?QPWZ?               ;
                      .db $FF,$00,$FF,$80,$01,$80,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$00,$01,$00,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$FE,$00,$01,$00,$01,$00 ;; ?QPWZ?               ;
                      .db $FF,$00,$FF,$80,$01,$80,$01,$00 ;; ?QPWZ?               ;
                      .db $FF,$00,$FF,$80,$01,$80,$01,$00 ;; ?QPWZ?               ;
                      .db $FC,$00,$FC,$00,$FD,$00,$FD,$00 ;; ?QPWZ?               ;
                      .db $03,$00,$03,$00,$04,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $FC,$00,$FC,$00,$06,$00,$06,$00 ;; ?QPWZ?               ;
                      .db $FA,$00,$FA,$00,$04,$00,$04,$80 ;; ?QPWZ?               ;
                      .db $FF,$80,$00,$00,$FF,$00,$01,$80 ;; ?QPWZ?               ;
                      .db $FE,$80,$01,$80,$FE,$80,$FE,$80 ;; ?QPWZ?               ;
                      .db $01,$80,$01,$80,$FE,$80,$02,$80 ;; ?QPWZ?               ;
                      .db $FD,$00,$FB,$80,$02,$00,$05,$80 ;; ?QPWZ?               ;
                      .db $FD,$00,$FB,$80,$02,$00,$05,$80 ;; ?QPWZ?               ;
                      .db $FD,$00,$FB,$80,$02,$00,$05,$40 ;; ?QPWZ?               ;
                      .db $FD,$80,$FA,$40,$02,$80,$04,$C0 ;; ?QPWZ?               ;
                      .db $FD,$80,$FB,$C0,$02,$80,$05,$00 ;; ?QPWZ?               ;
                      .db $FD,$00,$FA,$00,$02,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $FE,$00,$FC,$00,$03,$00,$06,$00 ;; ?QPWZ?               ;
                      .db $FD,$00,$FA,$00,$02,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $FD,$00,$FA,$00,$02,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $FE,$00,$FC,$00,$03,$00,$06,$00 ;; ?QPWZ?               ;
                      .db $FE,$00,$FC,$00,$03,$00,$06,$00 ;; ?QPWZ?               ;
                      .db $FD,$00,$FA,$00,$FD,$00,$FA,$00 ;; ?QPWZ?               ;
                      .db $03,$00,$06,$00,$03,$00,$06     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D43D:          .db $80,$FF,$80,$FE,$80,$00,$80,$01 ;; 00D43D               ;
                      .db $80,$FF,$80,$FE,$80,$00,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$FF,$80,$FE,$80,$00,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$FE,$80,$FE,$80,$00,$40,$01 ;; ?QPWZ?               ;
                      .db $80,$FF,$C0,$FE,$80,$01,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$FE,$80,$FE,$80,$00,$00,$01 ;; ?QPWZ?               ;
                      .db $80,$FF,$00,$FF,$80,$01,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$FE,$80,$FE,$80,$00,$00,$01 ;; ?QPWZ?               ;
                      .db $80,$FE,$80,$FE,$80,$00,$00,$01 ;; ?QPWZ?               ;
                      .db $80,$FF,$00,$FF,$80,$01,$80,$01 ;; ?QPWZ?               ;
                      .db $80,$FF,$00,$FF,$80,$01,$80,$01 ;; ?QPWZ?               ;
                      .db $00,$FC,$00,$FC,$00,$FE,$00,$FD ;; ?QPWZ?               ;
                      .db $00,$03,$00,$03,$00,$04,$00,$04 ;; ?QPWZ?               ;
                      .db $00,$FC,$00,$FC,$80,$00,$80,$00 ;; ?QPWZ?               ;
                      .db $80,$FF,$80,$FF,$00,$04,$00,$04 ;; ?QPWZ?               ;
                      .db $80,$FF,$80,$00,$00,$FF,$00,$01 ;; ?QPWZ?               ;
                      .db $80,$FE,$80,$01,$80,$FE,$80,$FE ;; ?QPWZ?               ;
                      .db $80,$01,$80,$01,$80,$FE,$80,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$80,$FD,$40,$00,$80,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$80,$FD,$40,$00,$80,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$80,$FD,$40,$00,$80,$02 ;; ?QPWZ?               ;
                      .db $80,$FF,$40,$FD,$40,$00,$40,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$C0,$FD,$80,$00,$C0,$02 ;; ?QPWZ?               ;
                      .db $00,$FD,$00,$FD,$40,$00,$00,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$00,$FE,$00,$03,$00,$03 ;; ?QPWZ?               ;
                      .db $00,$FD,$00,$FD,$40,$00,$00,$02 ;; ?QPWZ?               ;
                      .db $00,$FD,$00,$FD,$40,$00,$00,$02 ;; ?QPWZ?               ;
                      .db $C0,$FF,$00,$FE,$00,$03,$00,$03 ;; ?QPWZ?               ;
                      .db $C0,$FF,$00,$FE,$00,$03,$00,$03 ;; ?QPWZ?               ;
                      .db $00,$FD,$00,$FD,$00,$FD,$00,$FD ;; ?QPWZ?               ;
                      .db $00,$03,$00,$03,$00,$03,$00,$03 ;; ?QPWZ?               ;
DATA_00D535:          .db $EC,$14,$DC,$24,$DC,$24,$D0,$30 ;; 00D535               ;
                      .db $EC,$14,$DC,$24,$DC,$24,$D0,$30 ;; ?QPWZ?               ;
                      .db $EC,$14,$DC,$24,$DC,$24,$D0,$30 ;; ?QPWZ?               ;
                      .db $E8,$12,$DC,$20,$DC,$20,$D0,$2C ;; ?QPWZ?               ;
                      .db $EE,$18,$E0,$24,$E0,$24,$D4,$30 ;; ?QPWZ?               ;
                      .db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28 ;; ?QPWZ?               ;
                      .db $F0,$24,$E4,$24,$E4,$24,$D8,$30 ;; ?QPWZ?               ;
                      .db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28 ;; ?QPWZ?               ;
                      .db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28 ;; ?QPWZ?               ;
                      .db $F0,$24,$E4,$24,$E4,$24,$D8,$30 ;; ?QPWZ?               ;
                      .db $F0,$24,$E4,$24,$E4,$24,$D8,$30 ;; ?QPWZ?               ;
                      .db $DC,$F0,$DC,$F8,$DC,$F8,$D0,$FC ;; ?QPWZ?               ;
                      .db $10,$24,$08,$24,$08,$24,$04,$30 ;; ?QPWZ?               ;
                      .db $D0,$08,$D0,$08,$D0,$08,$D0,$08 ;; ?QPWZ?               ;
                      .db $F8,$30,$F8,$30,$F8,$30,$F8,$30 ;; ?QPWZ?               ;
                      .db $F8,$08,$F0,$10,$F4,$04,$E8,$08 ;; ?QPWZ?               ;
                      .db $F0,$10,$E0,$20,$EC,$0C,$D8,$18 ;; ?QPWZ?               ;
                      .db $D8,$28,$D4,$2C,$D0,$30,$D0,$D0 ;; ?QPWZ?               ;
                      .db $30,$30,$E0,$20                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D5C9:          .db $00                             ;; 00D5C9               ;
                                                          ;;                      ;
DATA_00D5CA:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00D5CA               ;
                      .db $00,$00,$F0,$00,$10,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$E0,$00 ;; ?QPWZ?               ;
                      .db $20,$00,$00,$00,$00,$00,$F0,$00 ;; ?QPWZ?               ;
                      .db $F8                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D5EB:          .db $FF,$FF,$02                     ;; 00D5EB               ;
                                                          ;;                      ;
DATA_00D5EE:          .db $68,$70                         ;; 00D5EE               ;
                                                          ;;                      ;
DATA_00D5F0:          .db $1C,$0C                         ;; 00D5F0               ;
                                                          ;;                      ;
CODE_00D5F2:          LDA RAM_IsFlying                    ;; 00D5F2 : A5 72       ;
CODE_00D5F4:          BEQ CODE_00D5F9                     ;; 00D5F4 : F0 03       ;
CODE_00D5F6:          JMP.W CODE_00D682                   ;; 00D5F6 : 4C 82 D6    ;
                                                          ;;                      ;
CODE_00D5F9:          STZ RAM_IsDucking                   ;; 00D5F9 : 64 73       ;
CODE_00D5FB:          LDA.W $13ED                         ;; 00D5FB : AD ED 13    ;
CODE_00D5FE:          BNE CODE_00D60B                     ;; 00D5FE : D0 0B       ;
CODE_00D600:          LDA RAM_ControllerA                 ;; 00D600 : A5 15       ;
CODE_00D602:          AND.B #$04                          ;; 00D602 : 29 04       ;
CODE_00D604:          BEQ CODE_00D60B                     ;; 00D604 : F0 05       ;
CODE_00D606:          STA RAM_IsDucking                   ;; 00D606 : 85 73       ;
CODE_00D608:          STZ.W $13E8                         ;; 00D608 : 9C E8 13    ;
CODE_00D60B:          LDA.W $1471                         ;; 00D60B : AD 71 14    ;
CODE_00D60E:          CMP.B #$02                          ;; 00D60E : C9 02       ;
CODE_00D610:          BEQ CODE_00D61E                     ;; 00D610 : F0 0C       ;
CODE_00D612:          LDA RAM_MarioObjStatus              ;; 00D612 : A5 77       ;
CODE_00D614:          AND.B #$08                          ;; 00D614 : 29 08       ;
CODE_00D616:          BNE CODE_00D61E                     ;; 00D616 : D0 06       ;
CODE_00D618:          LDA $16                             ;; 00D618 : A5 16       ;
CODE_00D61A:          ORA $18                             ;; 00D61A : 05 18       ;
CODE_00D61C:          BMI CODE_00D630                     ;; 00D61C : 30 12       ;
CODE_00D61E:          LDA RAM_IsDucking                   ;; 00D61E : A5 73       ;
CODE_00D620:          BEQ CODE_00D682                     ;; 00D620 : F0 60       ;
CODE_00D622:          LDA RAM_MarioSpeedX                 ;; 00D622 : A5 7B       ;
CODE_00D624:          BEQ CODE_00D62D                     ;; 00D624 : F0 07       ;
CODE_00D626:          LDA $86                             ;; 00D626 : A5 86       ;
CODE_00D628:          BNE CODE_00D62D                     ;; 00D628 : D0 03       ;
CODE_00D62A:          JSR.W CODE_00FE4A                   ;; 00D62A : 20 4A FE    ;
CODE_00D62D:          JMP.W CODE_00D764                   ;; 00D62D : 4C 64 D7    ;
                                                          ;;                      ;
CODE_00D630:          LDA RAM_MarioSpeedX                 ;; 00D630 : A5 7B       ;
CODE_00D632:          BPL CODE_00D637                     ;; 00D632 : 10 03       ;
CODE_00D634:          EOR.B #$FF                          ;; 00D634 : 49 FF       ;
CODE_00D636:          INC A                               ;; 00D636 : 1A          ;
CODE_00D637:          LSR                                 ;; 00D637 : 4A          ;
CODE_00D638:          LSR                                 ;; 00D638 : 4A          ;
CODE_00D639:          AND.B #$FE                          ;; 00D639 : 29 FE       ;
CODE_00D63B:          TAX                                 ;; 00D63B : AA          ;
CODE_00D63C:          LDA $18                             ;; 00D63C : A5 18       ;
CODE_00D63E:          BPL CODE_00D65E                     ;; 00D63E : 10 1E       ;
CODE_00D640:          LDA.W $148F                         ;; 00D640 : AD 8F 14    ;
CODE_00D643:          BNE CODE_00D65E                     ;; 00D643 : D0 19       ;
CODE_00D645:          INC A                               ;; 00D645 : 1A          ;
CODE_00D646:          STA.W RAM_IsSpinJump                ;; 00D646 : 8D 0D 14    ;
CODE_00D649:          LDA.B #$04                          ;; 00D649 : A9 04       ; \ Play sound effect 
CODE_00D64B:          STA.W $1DFC                         ;; 00D64B : 8D FC 1D    ; / 
CODE_00D64E:          LDY RAM_MarioDirection              ;; 00D64E : A4 76       ;
CODE_00D650:          LDA.W DATA_00D5F0,Y                 ;; 00D650 : B9 F0 D5    ;
CODE_00D653:          STA.W $13E2                         ;; 00D653 : 8D E2 13    ;
CODE_00D656:          LDA.W RAM_OnYoshi                   ;; 00D656 : AD 7A 18    ;
CODE_00D659:          BNE CODE_00D682                     ;; 00D659 : D0 27       ;
CODE_00D65B:          INX                                 ;; 00D65B : E8          ;
CODE_00D65C:          BRA CODE_00D663                     ;; 00D65C : 80 05       ;
                                                          ;;                      ;
CODE_00D65E:          LDA.B #$01                          ;; 00D65E : A9 01       ; \ Play sound effect 
CODE_00D660:          STA.W $1DFA                         ;; 00D660 : 8D FA 1D    ; / 
CODE_00D663:          LDA.W DATA_00D2BD,X                 ;; 00D663 : BD BD D2    ;
CODE_00D666:          STA RAM_MarioSpeedY                 ;; 00D666 : 85 7D       ;
CODE_00D668:          LDA.B #$0B                          ;; 00D668 : A9 0B       ;
CODE_00D66A:          LDY.W $13E4                         ;; 00D66A : AC E4 13    ;
CODE_00D66D:          CPY.B #$70                          ;; 00D66D : C0 70       ;
CODE_00D66F:          BCC CODE_00D67D                     ;; 00D66F : 90 0C       ;
CODE_00D671:          LDA.W $149F                         ;; 00D671 : AD 9F 14    ;
CODE_00D674:          BNE CODE_00D67B                     ;; 00D674 : D0 05       ;
CODE_00D676:          LDA.B #$50                          ;; 00D676 : A9 50       ;
CODE_00D678:          STA.W $149F                         ;; 00D678 : 8D 9F 14    ;
CODE_00D67B:          LDA.B #$0C                          ;; 00D67B : A9 0C       ;
CODE_00D67D:          STA RAM_IsFlying                    ;; 00D67D : 85 72       ;
CODE_00D67F:          STZ.W $13ED                         ;; 00D67F : 9C ED 13    ;
CODE_00D682:          LDA.W $13ED                         ;; 00D682 : AD ED 13    ;
CODE_00D685:          BMI CODE_00D692                     ;; 00D685 : 30 0B       ;
CODE_00D687:          LDA RAM_ControllerA                 ;; 00D687 : A5 15       ;
CODE_00D689:          AND.B #$03                          ;; 00D689 : 29 03       ;
CODE_00D68B:          BNE CODE_00D6B1                     ;; 00D68B : D0 24       ;
CODE_00D68D:          LDA.W $13ED                         ;; 00D68D : AD ED 13    ;
CODE_00D690:          BEQ CODE_00D6AE                     ;; 00D690 : F0 1C       ;
CODE_00D692:          JSR.W CODE_00FE4A                   ;; 00D692 : 20 4A FE    ;
CODE_00D695:          LDA.W $13EE                         ;; 00D695 : AD EE 13    ;
CODE_00D698:          BEQ CODE_00D6AE                     ;; 00D698 : F0 14       ;
CODE_00D69A:          JSR.W CODE_00D968                   ;; 00D69A : 20 68 D9    ;
CODE_00D69D:          LDA.W $13E1                         ;; 00D69D : AD E1 13    ;
CODE_00D6A0:          LSR                                 ;; 00D6A0 : 4A          ;
CODE_00D6A1:          LSR                                 ;; 00D6A1 : 4A          ;
CODE_00D6A2:          TAY                                 ;; 00D6A2 : A8          ;
CODE_00D6A3:          ADC.B #$76                          ;; 00D6A3 : 69 76       ;
CODE_00D6A5:          TAX                                 ;; 00D6A5 : AA          ;
CODE_00D6A6:          TYA                                 ;; 00D6A6 : 98          ;
CODE_00D6A7:          LSR                                 ;; 00D6A7 : 4A          ;
CODE_00D6A8:          ADC.B #$87                          ;; 00D6A8 : 69 87       ;
CODE_00D6AA:          TAY                                 ;; 00D6AA : A8          ;
CODE_00D6AB:          JMP.W CODE_00D742                   ;; 00D6AB : 4C 42 D7    ;
                                                          ;;                      ;
CODE_00D6AE:          JMP.W CODE_00D764                   ;; 00D6AE : 4C 64 D7    ;
                                                          ;;                      ;
CODE_00D6B1:          STZ.W $13ED                         ;; 00D6B1 : 9C ED 13    ;
CODE_00D6B4:          AND.B #$01                          ;; 00D6B4 : 29 01       ;
CODE_00D6B6:          LDY.W $1407                         ;; 00D6B6 : AC 07 14    ;
CODE_00D6B9:          BEQ CODE_00D6D5                     ;; 00D6B9 : F0 1A       ;
CODE_00D6BB:          CMP RAM_MarioDirection              ;; 00D6BB : C5 76       ;
CODE_00D6BD:          BEQ CODE_00D6C3                     ;; 00D6BD : F0 04       ;
CODE_00D6BF:          LDY $16                             ;; 00D6BF : A4 16       ;
CODE_00D6C1:          BPL CODE_00D68D                     ;; 00D6C1 : 10 CA       ;
CODE_00D6C3:          LDX RAM_MarioDirection              ;; 00D6C3 : A6 76       ;
CODE_00D6C5:          LDY.W DATA_00D5EE,X                 ;; 00D6C5 : BC EE D5    ;
CODE_00D6C8:          STY.W $13E1                         ;; 00D6C8 : 8C E1 13    ;
CODE_00D6CB:          STA $01                             ;; 00D6CB : 85 01       ;
CODE_00D6CD:          ASL                                 ;; 00D6CD : 0A          ;
CODE_00D6CE:          ASL                                 ;; 00D6CE : 0A          ;
CODE_00D6CF:          ORA.W $13E1                         ;; 00D6CF : 0D E1 13    ;
CODE_00D6D2:          TAX                                 ;; 00D6D2 : AA          ;
CODE_00D6D3:          BRA CODE_00D713                     ;; 00D6D3 : 80 3E       ;
                                                          ;;                      ;
CODE_00D6D5:          LDY RAM_MarioDirection              ;; 00D6D5 : A4 76       ;
CODE_00D6D7:          CMP RAM_MarioDirection              ;; 00D6D7 : C5 76       ;
CODE_00D6D9:          BEQ CODE_00D6EC                     ;; 00D6D9 : F0 11       ;
CODE_00D6DB:          LDY.W $148F                         ;; 00D6DB : AC 8F 14    ;
CODE_00D6DE:          BEQ CODE_00D6EA                     ;; 00D6DE : F0 0A       ;
CODE_00D6E0:          LDY.W RAM_FaceCamImgTimer           ;; 00D6E0 : AC 99 14    ;
CODE_00D6E3:          BNE CODE_00D6EC                     ;; 00D6E3 : D0 07       ;
CODE_00D6E5:          LDY.B #$08                          ;; 00D6E5 : A0 08       ;
CODE_00D6E7:          STY.W RAM_FaceCamImgTimer           ;; 00D6E7 : 8C 99 14    ;
CODE_00D6EA:          STA RAM_MarioDirection              ;; 00D6EA : 85 76       ;
CODE_00D6EC:          STA $01                             ;; 00D6EC : 85 01       ;
CODE_00D6EE:          ASL                                 ;; 00D6EE : 0A          ;
CODE_00D6EF:          ASL                                 ;; 00D6EF : 0A          ;
CODE_00D6F0:          ORA.W $13E1                         ;; 00D6F0 : 0D E1 13    ;
CODE_00D6F3:          TAX                                 ;; 00D6F3 : AA          ;
CODE_00D6F4:          LDA RAM_MarioSpeedX                 ;; 00D6F4 : A5 7B       ;
CODE_00D6F6:          BEQ CODE_00D713                     ;; 00D6F6 : F0 1B       ;
CODE_00D6F8:          EOR.W MarioAccel2?,X                ;; 00D6F8 : 5D 46 D3    ;
CODE_00D6FB:          BPL CODE_00D713                     ;; 00D6FB : 10 16       ;
CODE_00D6FD:          LDA.W $14A1                         ;; 00D6FD : AD A1 14    ;
CODE_00D700:          BNE CODE_00D713                     ;; 00D700 : D0 11       ;
CODE_00D702:          LDA $86                             ;; 00D702 : A5 86       ;
CODE_00D704:          BNE CODE_00D70E                     ;; 00D704 : D0 08       ;
CODE_00D706:          LDA.B #$0D                          ;; 00D706 : A9 0D       ;
CODE_00D708:          STA.W RAM_ChangingDir               ;; 00D708 : 8D DD 13    ;
CODE_00D70B:          JSR.W CODE_00FE4A                   ;; 00D70B : 20 4A FE    ;
CODE_00D70E:          TXA                                 ;; 00D70E : 8A          ;
CODE_00D70F:          CLC                                 ;; 00D70F : 18          ;
CODE_00D710:          ADC.B #$90                          ;; 00D710 : 69 90       ;
CODE_00D712:          TAX                                 ;; 00D712 : AA          ;
CODE_00D713:          LDY.B #$00                          ;; 00D713 : A0 00       ;
CODE_00D715:          BIT RAM_ControllerA                 ;; 00D715 : 24 15       ;
CODE_00D717:          BVC CODE_00D737                     ;; 00D717 : 50 1E       ;
CODE_00D719:          INX                                 ;; 00D719 : E8          ;
CODE_00D71A:          INX                                 ;; 00D71A : E8          ;
CODE_00D71B:          INY                                 ;; 00D71B : C8          ;
CODE_00D71C:          LDA RAM_MarioSpeedX                 ;; 00D71C : A5 7B       ;
CODE_00D71E:          BPL CODE_00D723                     ;; 00D71E : 10 03       ;
CODE_00D720:          EOR.B #$FF                          ;; 00D720 : 49 FF       ;
CODE_00D722:          INC A                               ;; 00D722 : 1A          ;
CODE_00D723:          CMP.B #$23                          ;; 00D723 : C9 23       ;
CODE_00D725:          BMI CODE_00D737                     ;; 00D725 : 30 10       ;
CODE_00D727:          LDA RAM_IsFlying                    ;; 00D727 : A5 72       ;
CODE_00D729:          BNE CODE_00D732                     ;; 00D729 : D0 07       ;
CODE_00D72B:          LDA.B #$10                          ;; 00D72B : A9 10       ;
CODE_00D72D:          STA.W $14A0                         ;; 00D72D : 8D A0 14    ;
CODE_00D730:          BRA CODE_00D736                     ;; 00D730 : 80 04       ;
                                                          ;;                      ;
CODE_00D732:          CMP.B #$0C                          ;; 00D732 : C9 0C       ;
CODE_00D734:          BNE CODE_00D737                     ;; 00D734 : D0 01       ;
CODE_00D736:          INY                                 ;; 00D736 : C8          ;
CODE_00D737:          JSR.W CODE_00D96A                   ;; 00D737 : 20 6A D9    ;
CODE_00D73A:          TYA                                 ;; 00D73A : 98          ;
CODE_00D73B:          ASL                                 ;; 00D73B : 0A          ;
CODE_00D73C:          ORA.W $13E1                         ;; 00D73C : 0D E1 13    ;
CODE_00D73F:          ORA $01                             ;; 00D73F : 05 01       ;
CODE_00D741:          TAY                                 ;; 00D741 : A8          ;
CODE_00D742:          LDA RAM_MarioSpeedX                 ;; 00D742 : A5 7B       ;
CODE_00D744:          SEC                                 ;; 00D744 : 38          ;
CODE_00D745:          SBC.W DATA_00D535,Y                 ;; 00D745 : F9 35 D5    ;
CODE_00D748:          BEQ CODE_00D76B                     ;; 00D748 : F0 21       ;
CODE_00D74A:          EOR.W DATA_00D535,Y                 ;; 00D74A : 59 35 D5    ;
CODE_00D74D:          BPL CODE_00D76B                     ;; 00D74D : 10 1C       ;
CODE_00D74F:          REP #$20                            ;; 00D74F : C2 20       ; Accum (16 bit) 
CODE_00D751:          LDA.W MarioAccel?,X                 ;; 00D751 : BD 45 D3    ;
CODE_00D754:          LDY $86                             ;; 00D754 : A4 86       ;
CODE_00D756:          BEQ CODE_00D75F                     ;; 00D756 : F0 07       ;
CODE_00D758:          LDY RAM_IsFlying                    ;; 00D758 : A4 72       ;
CODE_00D75A:          BNE CODE_00D75F                     ;; 00D75A : D0 03       ;
CODE_00D75C:          LDA.W DATA_00D43D,X                 ;; 00D75C : BD 3D D4    ;
CODE_00D75F:          CLC                                 ;; 00D75F : 18          ;
CODE_00D760:          ADC $7A                             ;; 00D760 : 65 7A       ;
CODE_00D762:          BRA CODE_00D7A0                     ;; 00D762 : 80 3C       ;
                                                          ;;                      ;
CODE_00D764:          JSR.W CODE_00D968                   ;; 00D764 : 20 68 D9    ;
CODE_00D767:          LDA RAM_IsFlying                    ;; 00D767 : A5 72       ;
CODE_00D769:          BNE Return00D7A4                    ;; 00D769 : D0 39       ;
CODE_00D76B:          LDA.W $13E1                         ;; 00D76B : AD E1 13    ;
CODE_00D76E:          LSR                                 ;; 00D76E : 4A          ;
CODE_00D76F:          TAY                                 ;; 00D76F : A8          ;
CODE_00D770:          LSR                                 ;; 00D770 : 4A          ;
CODE_00D771:          TAX                                 ;; 00D771 : AA          ;
CODE_00D772:          LDA RAM_MarioSpeedX                 ;; 00D772 : A5 7B       ;
CODE_00D774:          SEC                                 ;; 00D774 : 38          ;
CODE_00D775:          SBC.W DATA_00D5CA,X                 ;; 00D775 : FD CA D5    ;
CODE_00D778:          BPL CODE_00D77C                     ;; 00D778 : 10 02       ;
CODE_00D77A:          INY                                 ;; 00D77A : C8          ;
CODE_00D77B:          INY                                 ;; 00D77B : C8          ;
CODE_00D77C:          LDA.W $1493                         ;; 00D77C : AD 93 14    ;
CODE_00D77F:          ORA RAM_IsFlying                    ;; 00D77F : 05 72       ;
CODE_00D781:          REP #$20                            ;; 00D781 : C2 20       ; Accum (16 bit) 
CODE_00D783:          BNE CODE_00D78C                     ;; 00D783 : D0 07       ;
CODE_00D785:          LDA.W DATA_00D309,Y                 ;; 00D785 : B9 09 D3    ;
CODE_00D788:          BIT RAM_IsWaterLevel                ;; 00D788 : 24 85       ;
CODE_00D78A:          BMI CODE_00D78F                     ;; 00D78A : 30 03       ;
CODE_00D78C:          LDA.W DATA_00D2CD,Y                 ;; 00D78C : B9 CD D2    ;
CODE_00D78F:          CLC                                 ;; 00D78F : 18          ;
CODE_00D790:          ADC $7A                             ;; 00D790 : 65 7A       ;
CODE_00D792:          STA $7A                             ;; 00D792 : 85 7A       ;
CODE_00D794:          SEC                                 ;; 00D794 : 38          ;
CODE_00D795:          SBC.W DATA_00D5C9,X                 ;; 00D795 : FD C9 D5    ;
CODE_00D798:          EOR.W DATA_00D2CD,Y                 ;; 00D798 : 59 CD D2    ;
CODE_00D79B:          BMI CODE_00D7A2                     ;; 00D79B : 30 05       ;
CODE_00D79D:          LDA.W DATA_00D5C9,X                 ;; 00D79D : BD C9 D5    ;
CODE_00D7A0:          STA $7A                             ;; 00D7A0 : 85 7A       ;
CODE_00D7A2:          SEP #$20                            ;; 00D7A2 : E2 20       ; Accum (8 bit) 
Return00D7A4:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00D7A5:          .db $06,$03,$04,$10,$F4,$01,$03,$04 ;; 00D7A5               ;
                      .db $05,$06                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D7AF:          .db $40,$40,$20,$40,$40,$40,$40,$40 ;; 00D7AF               ;
                      .db $40,$40                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D7B9:          .db $10,$C8,$E0,$02,$03,$03,$04,$03 ;; 00D7B9               ;
                      .db $02,$00,$01,$00,$00,$00,$00     ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D7C8:          .db $01,$10,$30,$30,$38,$38,$40     ;; 00D7C8               ;
                                                          ;;                      ;
CapeSpeed:            .db $FF,$01,$01,$FF,$FF             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00D7D4:          .db $01,$06,$03,$01,$00             ;; 00D7D4               ;
                                                          ;;                      ;
DATA_00D7D9:          .db $00,$00,$00,$F8,$F8,$F8,$F4,$F0 ;; 00D7D9               ;
                      .db $C8,$02,$01                     ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00D7E4:          LDY.W $1407                         ;; 00D7E4 : AC 07 14    ;
CODE_00D7E7:          BNE CODE_00D824                     ;; 00D7E7 : D0 3B       ;
CODE_00D7E9:          LDA RAM_IsFlying                    ;; 00D7E9 : A5 72       ;
CODE_00D7EB:          BEQ CODE_00D811                     ;; 00D7EB : F0 24       ;
CODE_00D7ED:          LDA.W $148F                         ;; 00D7ED : AD 8F 14    ;
CODE_00D7F0:          ORA.W RAM_OnYoshi                   ;; 00D7F0 : 0D 7A 18    ;
CODE_00D7F3:          ORA.W RAM_IsSpinJump                ;; 00D7F3 : 0D 0D 14    ;
CODE_00D7F6:          BNE CODE_00D811                     ;; 00D7F6 : D0 19       ;
CODE_00D7F8:          LDA.W $13ED                         ;; 00D7F8 : AD ED 13    ;
CODE_00D7FB:          BMI CODE_00D7FF                     ;; 00D7FB : 30 02       ;
CODE_00D7FD:          BNE CODE_00D811                     ;; 00D7FD : D0 12       ;
CODE_00D7FF:          STZ.W $13ED                         ;; 00D7FF : 9C ED 13    ;
CODE_00D802:          LDX RAM_MarioPowerUp                ;; 00D802 : A6 19       ;
CODE_00D804:          CPX.B #$02                          ;; 00D804 : E0 02       ;
CODE_00D806:          BNE CODE_00D811                     ;; 00D806 : D0 09       ;
CODE_00D808:          LDA RAM_MarioSpeedY                 ;; 00D808 : A5 7D       ;
CODE_00D80A:          BMI CODE_00D811                     ;; 00D80A : 30 05       ;
CODE_00D80C:          LDA.W $149F                         ;; 00D80C : AD 9F 14    ;
CODE_00D80F:          BNE CODE_00D814                     ;; 00D80F : D0 03       ;
CODE_00D811:          JMP.W CODE_00D8CD                   ;; 00D811 : 4C CD D8    ;
                                                          ;;                      ;
CODE_00D814:          STZ RAM_IsDucking                   ;; 00D814 : 64 73       ;
CODE_00D816:          LDA.B #$0B                          ;; 00D816 : A9 0B       ;
CODE_00D818:          STA RAM_IsFlying                    ;; 00D818 : 85 72       ;
CODE_00D81A:          STZ.W $1409                         ;; 00D81A : 9C 09 14    ;
CODE_00D81D:          JSR.W CODE_00D94F                   ;; 00D81D : 20 4F D9    ;
CODE_00D820:          LDX.B #$02                          ;; 00D820 : A2 02       ;
CODE_00D822:          BRA CODE_00D85B                     ;; 00D822 : 80 37       ;
                                                          ;;                      ;
CODE_00D824:          CPY.B #$02                          ;; 00D824 : C0 02       ;
CODE_00D826:          BCC CODE_00D82B                     ;; 00D826 : 90 03       ;
CODE_00D828:          JSR.W CODE_00D94F                   ;; 00D828 : 20 4F D9    ;
CODE_00D82B:          LDX.W $1408                         ;; 00D82B : AE 08 14    ;
CODE_00D82E:          CPX.B #$04                          ;; 00D82E : E0 04       ;
CODE_00D830:          BEQ CODE_00D856                     ;; 00D830 : F0 24       ;
CODE_00D832:          LDX.B #$03                          ;; 00D832 : A2 03       ;
CODE_00D834:          LDY RAM_MarioSpeedY                 ;; 00D834 : A4 7D       ;
CODE_00D836:          BMI CODE_00D856                     ;; 00D836 : 30 1E       ;
CODE_00D838:          LDA RAM_ControllerA                 ;; 00D838 : A5 15       ;
CODE_00D83A:          AND.B #$03                          ;; 00D83A : 29 03       ;
CODE_00D83C:          TAY                                 ;; 00D83C : A8          ;
CODE_00D83D:          BNE CODE_00D849                     ;; 00D83D : D0 0A       ;
CODE_00D83F:          LDA.W $1407                         ;; 00D83F : AD 07 14    ;
CODE_00D842:          CMP.B #$04                          ;; 00D842 : C9 04       ;
CODE_00D844:          BCS CODE_00D856                     ;; 00D844 : B0 10       ;
CODE_00D846:          DEX                                 ;; 00D846 : CA          ;
CODE_00D847:          BRA CODE_00D856                     ;; 00D847 : 80 0D       ;
                                                          ;;                      ;
CODE_00D849:          LSR                                 ;; 00D849 : 4A          ;
CODE_00D84A:          LDY RAM_MarioDirection              ;; 00D84A : A4 76       ;
CODE_00D84C:          BEQ CODE_00D850                     ;; 00D84C : F0 02       ;
CODE_00D84E:          EOR.B #$01                          ;; 00D84E : 49 01       ;
CODE_00D850:          TAX                                 ;; 00D850 : AA          ;
CODE_00D851:          CPX.W $1408                         ;; 00D851 : EC 08 14    ;
CODE_00D854:          BNE CODE_00D85B                     ;; 00D854 : D0 05       ;
CODE_00D856:          LDA.W $14A4                         ;; 00D856 : AD A4 14    ;
CODE_00D859:          BNE CODE_00D87E                     ;; 00D859 : D0 23       ;
CODE_00D85B:          BIT RAM_ControllerA                 ;; 00D85B : 24 15       ;
CODE_00D85D:          BVS CODE_00D861                     ;; 00D85D : 70 02       ;
CODE_00D85F:          LDX.B #$04                          ;; 00D85F : A2 04       ;
CODE_00D861:          LDA.W $1407                         ;; 00D861 : AD 07 14    ;
CODE_00D864:          CMP.W DATA_00D7D4,X                 ;; 00D864 : DD D4 D7    ;
CODE_00D867:          BEQ CODE_00D87E                     ;; 00D867 : F0 15       ;
CODE_00D869:          CLC                                 ;; 00D869 : 18          ;
CODE_00D86A:          ADC.W CapeSpeed,X                   ;; 00D86A : 7D CF D7    ;
CODE_00D86D:          STA.W $1407                         ;; 00D86D : 8D 07 14    ;
CODE_00D870:          LDA.B #$08                          ;; 00D870 : A9 08       ;
CODE_00D872:          LDY.W $1409                         ;; 00D872 : AC 09 14    ;
CODE_00D875:          CPY.B #$C8                          ;; 00D875 : C0 C8       ;
CODE_00D877:          BNE CODE_00D87B                     ;; 00D877 : D0 02       ;
CODE_00D879:          LDA.B #$02                          ;; 00D879 : A9 02       ;
CODE_00D87B:          STA.W $14A4                         ;; 00D87B : 8D A4 14    ;
CODE_00D87E:          STX.W $1408                         ;; 00D87E : 8E 08 14    ;
CODE_00D881:          LDY.W $1407                         ;; 00D881 : AC 07 14    ;
CODE_00D884:          BEQ CODE_00D8CD                     ;; 00D884 : F0 47       ;
CODE_00D886:          LDA RAM_MarioSpeedY                 ;; 00D886 : A5 7D       ;
CODE_00D888:          BPL CODE_00D892                     ;; 00D888 : 10 08       ;
CODE_00D88A:          CMP.B #$C8                          ;; 00D88A : C9 C8       ;
CODE_00D88C:          BCS CODE_00D89A                     ;; 00D88C : B0 0C       ;
CODE_00D88E:          LDA.B #$C8                          ;; 00D88E : A9 C8       ;
CODE_00D890:          BRA CODE_00D89A                     ;; 00D890 : 80 08       ;
                                                          ;;                      ;
CODE_00D892:          CMP.W DATA_00D7C8,Y                 ;; 00D892 : D9 C8 D7    ;
CODE_00D895:          BCC CODE_00D89A                     ;; 00D895 : 90 03       ;
CODE_00D897:          LDA.W DATA_00D7C8,Y                 ;; 00D897 : B9 C8 D7    ;
CODE_00D89A:          PHA                                 ;; 00D89A : 48          ;
CODE_00D89B:          CPY.B #$01                          ;; 00D89B : C0 01       ;
CODE_00D89D:          BNE CODE_00D8C6                     ;; 00D89D : D0 27       ;
CODE_00D89F:          LDX.W $1409                         ;; 00D89F : AE 09 14    ;
CODE_00D8A2:          BEQ CODE_00D8C4                     ;; 00D8A2 : F0 20       ;
CODE_00D8A4:          LDA RAM_MarioSpeedY                 ;; 00D8A4 : A5 7D       ;
CODE_00D8A6:          BMI CODE_00D8AF                     ;; 00D8A6 : 30 07       ;
CODE_00D8A8:          LDA.B #$09                          ;; 00D8A8 : A9 09       ; \ Play sound effect 
CODE_00D8AA:          STA.W $1DF9                         ;; 00D8AA : 8D F9 1D    ; / 
CODE_00D8AD:          BRA CODE_00D8B9                     ;; 00D8AD : 80 0A       ;
                                                          ;;                      ;
CODE_00D8AF:          CMP.W $1409                         ;; 00D8AF : CD 09 14    ;
CODE_00D8B2:          BCS CODE_00D8B9                     ;; 00D8B2 : B0 05       ;
CODE_00D8B4:          STX RAM_MarioSpeedY                 ;; 00D8B4 : 86 7D       ;
CODE_00D8B6:          STZ.W $1409                         ;; 00D8B6 : 9C 09 14    ;
CODE_00D8B9:          LDX RAM_MarioDirection              ;; 00D8B9 : A6 76       ;
CODE_00D8BB:          LDA RAM_MarioSpeedX                 ;; 00D8BB : A5 7B       ;
CODE_00D8BD:          BEQ CODE_00D8C4                     ;; 00D8BD : F0 05       ;
CODE_00D8BF:          EOR.W DATA_00D535,X                 ;; 00D8BF : 5D 35 D5    ;
CODE_00D8C2:          BPL CODE_00D8C6                     ;; 00D8C2 : 10 02       ;
CODE_00D8C4:          LDY.B #$02                          ;; 00D8C4 : A0 02       ;
CODE_00D8C6:          PLA                                 ;; 00D8C6 : 68          ;
CODE_00D8C7:          INY                                 ;; 00D8C7 : C8          ;
CODE_00D8C8:          INY                                 ;; 00D8C8 : C8          ;
CODE_00D8C9:          INY                                 ;; 00D8C9 : C8          ;
CODE_00D8CA:          JMP.W CODE_00D948                   ;; 00D8CA : 4C 48 D9    ;
                                                          ;;                      ;
CODE_00D8CD:          LDA RAM_IsFlying                    ;; 00D8CD : A5 72       ; \ Branch if not flying 
CODE_00D8CF:          BEQ CODE_00D928                     ;; 00D8CF : F0 57       ; / 
CODE_00D8D1:          LDX.B #$00                          ;; 00D8D1 : A2 00       ; X = #$00 
CODE_00D8D3:          LDA.W RAM_OnYoshi                   ;; 00D8D3 : AD 7A 18    ; \ Branch if not on Yoshi 
CODE_00D8D6:          BEQ CODE_00D8E7                     ;; 00D8D6 : F0 0F       ; / 
CODE_00D8D8:          LDA.W RAM_YoshiHasWings             ;; 00D8D8 : AD 1E 14    ; \ Branch if not winged Yoshi 
CODE_00D8DB:          LSR                                 ;; 00D8DB : 4A          ;  | 
CODE_00D8DC:          BEQ CODE_00D8E7                     ;; 00D8DC : F0 09       ; / 
CODE_00D8DE:          LDY.B #$02                          ;; 00D8DE : A0 02       ; \ Branch if not Caped Mario 
CODE_00D8E0:          CPY RAM_MarioPowerUp                ;; 00D8E0 : C4 19       ;  | 
CODE_00D8E2:          BEQ CODE_00D8E5                     ;; 00D8E2 : F0 01       ; / 
CODE_00D8E4:          INX                                 ;; 00D8E4 : E8          ; X= #$01 
CODE_00D8E5:          BRA CODE_00D8FF                     ;; 00D8E5 : 80 18       ;
                                                          ;;                      ;
CODE_00D8E7:          LDA RAM_MarioPowerUp                ;; 00D8E7 : A5 19       ; \ Branch if not Caped Mario 
CODE_00D8E9:          CMP.B #$02                          ;; 00D8E9 : C9 02       ;  | 
CODE_00D8EB:          BNE CODE_00D928                     ;; 00D8EB : D0 3B       ; / 
CODE_00D8ED:          LDA RAM_IsFlying                    ;; 00D8ED : A5 72       ; \ Branch if $72 != 0C 
CODE_00D8EF:          CMP.B #$0C                          ;; 00D8EF : C9 0C       ;  | 
CODE_00D8F1:          BNE CODE_00D8FD                     ;; 00D8F1 : D0 0A       ; / 
CODE_00D8F3:          LDY.B #$01                          ;; 00D8F3 : A0 01       ;
CODE_00D8F5:          CPY.W $149F                         ;; 00D8F5 : CC 9F 14    ;
CODE_00D8F8:          BCC CODE_00D8FF                     ;; 00D8F8 : 90 05       ;
CODE_00D8FA:          INC.W $149F                         ;; 00D8FA : EE 9F 14    ;
CODE_00D8FD:          LDY.B #$00                          ;; 00D8FD : A0 00       ;
CODE_00D8FF:          LDA.W $14A5                         ;; 00D8FF : AD A5 14    ;
CODE_00D902:          BNE CODE_00D90D                     ;; 00D902 : D0 09       ;
CODE_00D904:          LDA RAM_ControllerA,X               ;; 00D904 : B5 15       ;
CODE_00D906:          BPL CODE_00D924                     ;; 00D906 : 10 1C       ;
CODE_00D908:          LDA.B #$10                          ;; 00D908 : A9 10       ;
CODE_00D90A:          STA.W $14A5                         ;; 00D90A : 8D A5 14    ;
CODE_00D90D:          LDA RAM_MarioSpeedY                 ;; 00D90D : A5 7D       ;
CODE_00D90F:          BPL CODE_00D91B                     ;; 00D90F : 10 0A       ;
CODE_00D911:          LDX.W DATA_00D7B9,Y                 ;; 00D911 : BE B9 D7    ;
CODE_00D914:          BPL CODE_00D924                     ;; 00D914 : 10 0E       ;
CODE_00D916:          CMP.W DATA_00D7B9,Y                 ;; 00D916 : D9 B9 D7    ;
CODE_00D919:          BCC CODE_00D924                     ;; 00D919 : 90 09       ;
CODE_00D91B:          LDA.W DATA_00D7B9,Y                 ;; 00D91B : B9 B9 D7    ;
CODE_00D91E:          CMP RAM_MarioSpeedY                 ;; 00D91E : C5 7D       ;
CODE_00D920:          BEQ CODE_00D94C                     ;; 00D920 : F0 2A       ;
CODE_00D922:          BMI CODE_00D94C                     ;; 00D922 : 30 28       ;
CODE_00D924:          CPY.B #$02                          ;; 00D924 : C0 02       ;
CODE_00D926:          BEQ CODE_00D930                     ;; 00D926 : F0 08       ;
CODE_00D928:          LDY.B #$01                          ;; 00D928 : A0 01       ;
CODE_00D92A:          LDA RAM_ControllerA                 ;; 00D92A : A5 15       ;
CODE_00D92C:          BMI CODE_00D930                     ;; 00D92C : 30 02       ;
CODE_00D92E:          LDY.B #$00                          ;; 00D92E : A0 00       ;
CODE_00D930:          LDA RAM_MarioSpeedY                 ;; 00D930 : A5 7D       ; \ If Mario's Y speed is negative (up), 
CODE_00D932:          BMI CODE_00D948                     ;; 00D932 : 30 14       ; / branch to $D948 
CODE_00D934:          CMP.W DATA_00D7AF,Y                 ;; 00D934 : D9 AF D7    ;
CODE_00D937:          BCC CODE_00D93C                     ;; 00D937 : 90 03       ;
CODE_00D939:          LDA.W DATA_00D7AF,Y                 ;; 00D939 : B9 AF D7    ;
CODE_00D93C:          LDX RAM_IsFlying                    ;; 00D93C : A6 72       ;
CODE_00D93E:          BEQ CODE_00D948                     ;; 00D93E : F0 08       ;
CODE_00D940:          CPX.B #$0B                          ;; 00D940 : E0 0B       ;
CODE_00D942:          BNE CODE_00D948                     ;; 00D942 : D0 04       ;
CODE_00D944:          LDX.B #$24                          ;; 00D944 : A2 24       ;
CODE_00D946:          STX RAM_IsFlying                    ;; 00D946 : 86 72       ;
CODE_00D948:          CLC                                 ;; 00D948 : 18          ;
CODE_00D949:          ADC.W DATA_00D7A5,Y                 ;; 00D949 : 79 A5 D7    ;
CODE_00D94C:          STA RAM_MarioSpeedY                 ;; 00D94C : 85 7D       ;
Return00D94E:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00D94F:          STZ.W $140A                         ;; 00D94F : 9C 0A 14    ;
CODE_00D952:          LDA RAM_MarioSpeedY                 ;; 00D952 : A5 7D       ;
CODE_00D954:          BPL CODE_00D958                     ;; 00D954 : 10 02       ;
CODE_00D956:          LDA.B #$00                          ;; 00D956 : A9 00       ;
CODE_00D958:          LSR                                 ;; 00D958 : 4A          ;
CODE_00D959:          LSR                                 ;; 00D959 : 4A          ;
CODE_00D95A:          LSR                                 ;; 00D95A : 4A          ;
CODE_00D95B:          TAY                                 ;; 00D95B : A8          ;
CODE_00D95C:          LDA.W DATA_00D7D9,Y                 ;; 00D95C : B9 D9 D7    ;
CODE_00D95F:          CMP.W $1409                         ;; 00D95F : CD 09 14    ;
CODE_00D962:          BPL Return00D967                    ;; 00D962 : 10 03       ;
CODE_00D964:          STA.W $1409                         ;; 00D964 : 8D 09 14    ;
Return00D967:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00D968:          LDY.B #$00                          ;; 00D968 : A0 00       ;
CODE_00D96A:          LDA.W $13E4                         ;; 00D96A : AD E4 13    ;
CODE_00D96D:          CLC                                 ;; 00D96D : 18          ;
CODE_00D96E:          ADC.W DATA_00D5EB,Y                 ;; 00D96E : 79 EB D5    ;
CODE_00D971:          BPL CODE_00D975                     ;; 00D971 : 10 02       ;
CODE_00D973:          LDA.B #$00                          ;; 00D973 : A9 00       ;
CODE_00D975:          CMP.B #$70                          ;; 00D975 : C9 70       ;
CODE_00D977:          BCC CODE_00D97C                     ;; 00D977 : 90 03       ;
CODE_00D979:          INY                                 ;; 00D979 : C8          ;
CODE_00D97A:          LDA.B #$70                          ;; 00D97A : A9 70       ;
CODE_00D97C:          STA.W $13E4                         ;; 00D97C : 8D E4 13    ;
Return00D97F:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00D980:          .db $16,$1A,$1A,$18                 ;; 00D980               ;
                                                          ;;                      ;
DATA_00D984:          .db $E8,$F8,$D0,$D0                 ;; 00D984               ;
                                                          ;;                      ;
CODE_00D988:          STZ.W $13ED                         ;; 00D988 : 9C ED 13    ;
CODE_00D98B:          STZ RAM_IsDucking                   ;; 00D98B : 64 73       ;
CODE_00D98D:          STZ.W $1407                         ;; 00D98D : 9C 07 14    ;
CODE_00D990:          STZ.W RAM_IsSpinJump                ;; 00D990 : 9C 0D 14    ;
CODE_00D993:          LDY RAM_MarioSpeedY                 ;; 00D993 : A4 7D       ;
CODE_00D995:          LDA.W $148F                         ;; 00D995 : AD 8F 14    ;
CODE_00D998:          BEQ CODE_00D9EB                     ;; 00D998 : F0 51       ;
CODE_00D99A:          LDA RAM_IsFlying                    ;; 00D99A : A5 72       ;
CODE_00D99C:          BNE CODE_00D9AF                     ;; 00D99C : D0 11       ;
CODE_00D99E:          LDA $16                             ;; 00D99E : A5 16       ;
CODE_00D9A0:          ORA $18                             ;; 00D9A0 : 05 18       ;
CODE_00D9A2:          BPL CODE_00D9AF                     ;; 00D9A2 : 10 0B       ;
CODE_00D9A4:          LDA.B #$0B                          ;; 00D9A4 : A9 0B       ;
CODE_00D9A6:          STA RAM_IsFlying                    ;; 00D9A6 : 85 72       ;
CODE_00D9A8:          STZ.W $13ED                         ;; 00D9A8 : 9C ED 13    ;
CODE_00D9AB:          LDY.B #$F0                          ;; 00D9AB : A0 F0       ;
CODE_00D9AD:          BRA CODE_00D9B5                     ;; 00D9AD : 80 06       ;
                                                          ;;                      ;
CODE_00D9AF:          LDA RAM_ControllerA                 ;; 00D9AF : A5 15       ;
CODE_00D9B1:          AND.B #$04                          ;; 00D9B1 : 29 04       ;
CODE_00D9B3:          BEQ CODE_00D9BD                     ;; 00D9B3 : F0 08       ;
CODE_00D9B5:          JSR.W CODE_00DAA9                   ;; 00D9B5 : 20 A9 DA    ;
CODE_00D9B8:          TYA                                 ;; 00D9B8 : 98          ;
CODE_00D9B9:          CLC                                 ;; 00D9B9 : 18          ;
CODE_00D9BA:          ADC.B #$08                          ;; 00D9BA : 69 08       ;
CODE_00D9BC:          TAY                                 ;; 00D9BC : A8          ;
CODE_00D9BD:          INY                                 ;; 00D9BD : C8          ;
CODE_00D9BE:          LDA.W $13FA                         ;; 00D9BE : AD FA 13    ;
CODE_00D9C1:          BNE CODE_00D9CC                     ;; 00D9C1 : D0 09       ;
CODE_00D9C3:          DEY                                 ;; 00D9C3 : 88          ;
CODE_00D9C4:          LDA RAM_FrameCounterB               ;; 00D9C4 : A5 14       ;
CODE_00D9C6:          AND.B #$03                          ;; 00D9C6 : 29 03       ;
CODE_00D9C8:          BNE CODE_00D9CC                     ;; 00D9C8 : D0 02       ;
CODE_00D9CA:          DEY                                 ;; 00D9CA : 88          ;
CODE_00D9CB:          DEY                                 ;; 00D9CB : 88          ;
CODE_00D9CC:          TYA                                 ;; 00D9CC : 98          ;
CODE_00D9CD:          BMI CODE_00D9D7                     ;; 00D9CD : 30 08       ;
CODE_00D9CF:          CMP.B #$10                          ;; 00D9CF : C9 10       ;
CODE_00D9D1:          BCC CODE_00D9DD                     ;; 00D9D1 : 90 0A       ;
CODE_00D9D3:          LDA.B #$10                          ;; 00D9D3 : A9 10       ;
CODE_00D9D5:          BRA CODE_00D9DD                     ;; 00D9D5 : 80 06       ;
                                                          ;;                      ;
CODE_00D9D7:          CMP.B #$F0                          ;; 00D9D7 : C9 F0       ;
CODE_00D9D9:          BCS CODE_00D9DD                     ;; 00D9D9 : B0 02       ;
CODE_00D9DB:          LDA.B #$F0                          ;; 00D9DB : A9 F0       ;
CODE_00D9DD:          STA RAM_MarioSpeedY                 ;; 00D9DD : 85 7D       ;
CODE_00D9DF:          LDY.B #$80                          ;; 00D9DF : A0 80       ;
CODE_00D9E1:          LDA RAM_ControllerA                 ;; 00D9E1 : A5 15       ;
CODE_00D9E3:          AND.B #$03                          ;; 00D9E3 : 29 03       ;
CODE_00D9E5:          BNE CODE_00DA48                     ;; 00D9E5 : D0 61       ;
CODE_00D9E7:          LDA RAM_MarioDirection              ;; 00D9E7 : A5 76       ;
CODE_00D9E9:          BRA CODE_00DA46                     ;; 00D9E9 : 80 5B       ;
                                                          ;;                      ;
CODE_00D9EB:          LDA $16                             ;; 00D9EB : A5 16       ;
CODE_00D9ED:          ORA $18                             ;; 00D9ED : 05 18       ;
CODE_00D9EF:          BPL CODE_00DA0B                     ;; 00D9EF : 10 1A       ;
CODE_00D9F1:          LDA.W $13FA                         ;; 00D9F1 : AD FA 13    ;
CODE_00D9F4:          BNE CODE_00DA0B                     ;; 00D9F4 : D0 15       ;
CODE_00D9F6:          JSR.W CODE_00DAA9                   ;; 00D9F6 : 20 A9 DA    ;
CODE_00D9F9:          LDA RAM_IsFlying                    ;; 00D9F9 : A5 72       ;
CODE_00D9FB:          BNE CODE_00DA06                     ;; 00D9FB : D0 09       ;
CODE_00D9FD:          LDA.B #$0B                          ;; 00D9FD : A9 0B       ;
CODE_00D9FF:          STA RAM_IsFlying                    ;; 00D9FF : 85 72       ;
CODE_00DA01:          STZ.W $13ED                         ;; 00DA01 : 9C ED 13    ;
CODE_00DA04:          LDY.B #$F0                          ;; 00DA04 : A0 F0       ;
CODE_00DA06:          TYA                                 ;; 00DA06 : 98          ;
CODE_00DA07:          SEC                                 ;; 00DA07 : 38          ;
CODE_00DA08:          SBC.B #$20                          ;; 00DA08 : E9 20       ;
CODE_00DA0A:          TAY                                 ;; 00DA0A : A8          ;
CODE_00DA0B:          LDA RAM_FrameCounterB               ;; 00DA0B : A5 14       ;
CODE_00DA0D:          AND.B #$03                          ;; 00DA0D : 29 03       ;
CODE_00DA0F:          BNE CODE_00DA13                     ;; 00DA0F : D0 02       ;
CODE_00DA11:          INY                                 ;; 00DA11 : C8          ;
CODE_00DA12:          INY                                 ;; 00DA12 : C8          ;
CODE_00DA13:          LDA RAM_ControllerA                 ;; 00DA13 : A5 15       ;
CODE_00DA15:          AND.B #$0C                          ;; 00DA15 : 29 0C       ;
CODE_00DA17:          LSR                                 ;; 00DA17 : 4A          ;
CODE_00DA18:          LSR                                 ;; 00DA18 : 4A          ;
CODE_00DA19:          TAX                                 ;; 00DA19 : AA          ;
CODE_00DA1A:          TYA                                 ;; 00DA1A : 98          ;
CODE_00DA1B:          BMI CODE_00DA25                     ;; 00DA1B : 30 08       ;
CODE_00DA1D:          CMP.B #$40                          ;; 00DA1D : C9 40       ;
CODE_00DA1F:          BCC CODE_00DA2D                     ;; 00DA1F : 90 0C       ;
CODE_00DA21:          LDA.B #$40                          ;; 00DA21 : A9 40       ;
CODE_00DA23:          BRA CODE_00DA2D                     ;; 00DA23 : 80 08       ;
                                                          ;;                      ;
CODE_00DA25:          CMP.W DATA_00D984,X                 ;; 00DA25 : DD 84 D9    ;
CODE_00DA28:          BCS CODE_00DA2D                     ;; 00DA28 : B0 03       ;
CODE_00DA2A:          LDA.W DATA_00D984,X                 ;; 00DA2A : BD 84 D9    ;
CODE_00DA2D:          STA RAM_MarioSpeedY                 ;; 00DA2D : 85 7D       ;
CODE_00DA2F:          LDA RAM_IsFlying                    ;; 00DA2F : A5 72       ;
CODE_00DA31:          BNE CODE_00DA40                     ;; 00DA31 : D0 0D       ;
CODE_00DA33:          LDA RAM_ControllerA                 ;; 00DA33 : A5 15       ;
CODE_00DA35:          AND.B #$04                          ;; 00DA35 : 29 04       ;
CODE_00DA37:          BEQ CODE_00DA40                     ;; 00DA37 : F0 07       ;
CODE_00DA39:          STZ.W $13E8                         ;; 00DA39 : 9C E8 13    ;
CODE_00DA3C:          INC RAM_IsDucking                   ;; 00DA3C : E6 73       ;
CODE_00DA3E:          BRA CODE_00DA69                     ;; 00DA3E : 80 29       ;
                                                          ;;                      ;
CODE_00DA40:          LDA RAM_ControllerA                 ;; 00DA40 : A5 15       ;
CODE_00DA42:          AND.B #$03                          ;; 00DA42 : 29 03       ;
CODE_00DA44:          BEQ CODE_00DA69                     ;; 00DA44 : F0 23       ;
CODE_00DA46:          LDY.B #$78                          ;; 00DA46 : A0 78       ;
CODE_00DA48:          STY $00                             ;; 00DA48 : 84 00       ;
CODE_00DA4A:          AND.B #$01                          ;; 00DA4A : 29 01       ;
CODE_00DA4C:          STA RAM_MarioDirection              ;; 00DA4C : 85 76       ;
CODE_00DA4E:          PHA                                 ;; 00DA4E : 48          ;
CODE_00DA4F:          ASL                                 ;; 00DA4F : 0A          ;
CODE_00DA50:          ASL                                 ;; 00DA50 : 0A          ;
CODE_00DA51:          TAX                                 ;; 00DA51 : AA          ;
CODE_00DA52:          PLA                                 ;; 00DA52 : 68          ;
CODE_00DA53:          ORA $00                             ;; 00DA53 : 05 00       ;
CODE_00DA55:          LDY.W $1403                         ;; 00DA55 : AC 03 14    ;
CODE_00DA58:          BEQ CODE_00DA5D                     ;; 00DA58 : F0 03       ;
CODE_00DA5A:          CLC                                 ;; 00DA5A : 18          ;
CODE_00DA5B:          ADC.B #$04                          ;; 00DA5B : 69 04       ;
CODE_00DA5D:          TAY                                 ;; 00DA5D : A8          ;
CODE_00DA5E:          LDA RAM_IsFlying                    ;; 00DA5E : A5 72       ;
CODE_00DA60:          BEQ CODE_00DA64                     ;; 00DA60 : F0 02       ;
CODE_00DA62:          INY                                 ;; 00DA62 : C8          ;
CODE_00DA63:          INY                                 ;; 00DA63 : C8          ;
CODE_00DA64:          JSR.W CODE_00D742                   ;; 00DA64 : 20 42 D7    ;
CODE_00DA67:          BRA CODE_00DA7C                     ;; 00DA67 : 80 13       ;
                                                          ;;                      ;
CODE_00DA69:          LDY.B #$00                          ;; 00DA69 : A0 00       ;
CODE_00DA6B:          TYX                                 ;; 00DA6B : BB          ;
CODE_00DA6C:          LDA.W $1403                         ;; 00DA6C : AD 03 14    ;
CODE_00DA6F:          BEQ CODE_00DA79                     ;; 00DA6F : F0 08       ;
CODE_00DA71:          LDX.B #$1E                          ;; 00DA71 : A2 1E       ;
CODE_00DA73:          LDA RAM_IsFlying                    ;; 00DA73 : A5 72       ;
CODE_00DA75:          BNE CODE_00DA79                     ;; 00DA75 : D0 02       ;
CODE_00DA77:          INX                                 ;; 00DA77 : E8          ;
CODE_00DA78:          INX                                 ;; 00DA78 : E8          ;
CODE_00DA79:          JSR.W CODE_00D772                   ;; 00DA79 : 20 72 D7    ;
CODE_00DA7C:          JSR.W CODE_00D062                   ;; 00DA7C : 20 62 D0    ;
CODE_00DA7F:          JSL.L CODE_00CEB1                   ;; 00DA7F : 22 B1 CE 00 ;
CODE_00DA83:          LDA.W $14A6                         ;; 00DA83 : AD A6 14    ;
CODE_00DA86:          BNE Return00DA8C                    ;; 00DA86 : D0 04       ;
CODE_00DA88:          LDA RAM_IsFlying                    ;; 00DA88 : A5 72       ;
CODE_00DA8A:          BNE CODE_00DA8D                     ;; 00DA8A : D0 01       ;
Return00DA8C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DA8D:          LDA.B #$18                          ;; 00DA8D : A9 18       ;
CODE_00DA8F:          LDY.W RAM_FireballImgTimer          ;; 00DA8F : AC 9C 14    ;
CODE_00DA92:          BNE CODE_00DA9F                     ;; 00DA92 : D0 0B       ;
CODE_00DA94:          LDA.W $1496                         ;; 00DA94 : AD 96 14    ;
CODE_00DA97:          LSR                                 ;; 00DA97 : 4A          ;
CODE_00DA98:          LSR                                 ;; 00DA98 : 4A          ;
CODE_00DA99:          AND.B #$03                          ;; 00DA99 : 29 03       ;
CODE_00DA9B:          TAY                                 ;; 00DA9B : A8          ;
CODE_00DA9C:          LDA.W DATA_00D980,Y                 ;; 00DA9C : B9 80 D9    ;
CODE_00DA9F:          LDY.W $148F                         ;; 00DA9F : AC 8F 14    ;
CODE_00DAA2:          BEQ CODE_00DAA5                     ;; 00DAA2 : F0 01       ;
CODE_00DAA4:          INC A                               ;; 00DAA4 : 1A          ;
CODE_00DAA5:          STA.W MarioFrame                    ;; 00DAA5 : 8D E0 13    ;
Return00DAA8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DAA9:          LDA.B #$0E                          ;; 00DAA9 : A9 0E       ; \ Play sound effect 
CODE_00DAAB:          STA.W $1DF9                         ;; 00DAAB : 8D F9 1D    ; / 
CODE_00DAAE:          LDA.W $1496                         ;; 00DAAE : AD 96 14    ;
CODE_00DAB1:          ORA.B #$10                          ;; 00DAB1 : 09 10       ;
CODE_00DAB3:          STA.W $1496                         ;; 00DAB3 : 8D 96 14    ;
Return00DAB6:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00DAB7:          .db $10,$08,$F0,$F8                 ;; 00DAB7               ;
                                                          ;;                      ;
DATA_00DABB:          .db $B0,$F0                         ;; 00DABB               ;
                                                          ;;                      ;
DATA_00DABD:          .db $00,$01,$00,$01,$01,$01,$01,$01 ;; 00DABD               ;
                      .db $01,$01,$01,$01,$01,$01,$01,$01 ;; ?QPWZ?               ;
DATA_00DACD:          .db $22,$15,$22,$15,$21,$1F,$20,$20 ;; 00DACD               ;
                      .db $20,$20,$1F,$21,$1F,$21         ;; ?QPWZ?               ;
                                                          ;;                      ;
ClimbingImgs:         .db $15,$22                         ;; ?QPWZ?               ;
                                                          ;;                      ;
ClimbPunchingImgs:    .db $1E,$23                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DADF:          .db $10,$0F,$0E,$0D,$0C,$0B,$0A,$09 ;; 00DADF               ;
                      .db $08,$07,$06,$05,$05,$05,$05,$05 ;; ?QPWZ?               ;
                      .db $05,$05                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DAF1:          .db $20,$01,$40,$01,$2A,$01,$2A,$01 ;; 00DAF1               ;
                      .db $30,$01,$33,$01,$32,$01,$34,$01 ;; ?QPWZ?               ;
                      .db $36,$01,$38,$01,$3A,$01,$3B,$01 ;; ?QPWZ?               ;
                      .db $45,$01,$45,$01,$45,$01,$45,$01 ;; ?QPWZ?               ;
                      .db $45,$01,$45,$01,$08,$F8         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00DB17:          STZ RAM_IsFlying                    ;; 00DB17 : 64 72       ;
CODE_00DB19:          STZ RAM_MarioSpeedY                 ;; 00DB19 : 64 7D       ;
CODE_00DB1B:          STZ.W $13DF                         ;; 00DB1B : 9C DF 13    ;
CODE_00DB1E:          STZ.W RAM_IsSpinJump                ;; 00DB1E : 9C 0D 14    ;
CODE_00DB21:          LDY.W $149D                         ;; 00DB21 : AC 9D 14    ;
CODE_00DB24:          BEQ CODE_00DB7D                     ;; 00DB24 : F0 57       ;
CODE_00DB26:          LDA.W $1878                         ;; 00DB26 : AD 78 18    ;
CODE_00DB29:          BPL CODE_00DB2E                     ;; 00DB29 : 10 03       ;
CODE_00DB2B:          EOR.B #$FF                          ;; 00DB2B : 49 FF       ;
CODE_00DB2D:          INC A                               ;; 00DB2D : 1A          ;
CODE_00DB2E:          TAX                                 ;; 00DB2E : AA          ;
CODE_00DB2F:          CPY.B #$1E                          ;; 00DB2F : C0 1E       ;
CODE_00DB31:          BCC CODE_00DB45                     ;; 00DB31 : 90 12       ;
CODE_00DB33:          LDA.W DATA_00DADF,X                 ;; 00DB33 : BD DF DA    ;
CODE_00DB36:          BIT.W $1878                         ;; 00DB36 : 2C 78 18    ;
CODE_00DB39:          BPL CODE_00DB3E                     ;; 00DB39 : 10 03       ;
CODE_00DB3B:          EOR.B #$FF                          ;; 00DB3B : 49 FF       ;
CODE_00DB3D:          INC A                               ;; 00DB3D : 1A          ;
CODE_00DB3E:          STA RAM_MarioSpeedX                 ;; 00DB3E : 85 7B       ;
CODE_00DB40:          STZ $7A                             ;; 00DB40 : 64 7A       ;
CODE_00DB42:          STZ.W $13DA                         ;; 00DB42 : 9C DA 13    ;
CODE_00DB45:          TXA                                 ;; 00DB45 : 8A          ;
CODE_00DB46:          ASL                                 ;; 00DB46 : 0A          ;
CODE_00DB47:          TAX                                 ;; 00DB47 : AA          ;
CODE_00DB48:          LDA.W $1878                         ;; 00DB48 : AD 78 18    ;
CODE_00DB4B:          CPY.B #$08                          ;; 00DB4B : C0 08       ;
CODE_00DB4D:          BCS CODE_00DB51                     ;; 00DB4D : B0 02       ;
CODE_00DB4F:          EOR.B #$80                          ;; 00DB4F : 49 80       ;
CODE_00DB51:          ASL                                 ;; 00DB51 : 0A          ;
CODE_00DB52:          REP #$20                            ;; 00DB52 : C2 20       ; Accum (16 bit) 
CODE_00DB54:          LDA.W DATA_00DAF1,X                 ;; 00DB54 : BD F1 DA    ;
CODE_00DB57:          BCS CODE_00DB5D                     ;; 00DB57 : B0 04       ;
CODE_00DB59:          EOR.W #$FFFF                        ;; 00DB59 : 49 FF FF    ;
CODE_00DB5C:          INC A                               ;; 00DB5C : 1A          ;
CODE_00DB5D:          CLC                                 ;; 00DB5D : 18          ;
CODE_00DB5E:          ADC $7A                             ;; 00DB5E : 65 7A       ;
CODE_00DB60:          STA $7A                             ;; 00DB60 : 85 7A       ;
CODE_00DB62:          SEP #$20                            ;; 00DB62 : E2 20       ; Accum (8 bit) 
CODE_00DB64:          TYA                                 ;; 00DB64 : 98          ;
CODE_00DB65:          LSR                                 ;; 00DB65 : 4A          ;
CODE_00DB66:          AND.B #$0E                          ;; 00DB66 : 29 0E       ;
CODE_00DB68:          ORA.W $13F0                         ;; 00DB68 : 0D F0 13    ;
CODE_00DB6B:          TAY                                 ;; 00DB6B : A8          ;
CODE_00DB6C:          LDA.W DATA_00DABD,Y                 ;; 00DB6C : B9 BD DA    ;
CODE_00DB6F:          BIT.W $1878                         ;; 00DB6F : 2C 78 18    ;
CODE_00DB72:          BMI CODE_00DB76                     ;; 00DB72 : 30 02       ;
CODE_00DB74:          EOR.B #$01                          ;; 00DB74 : 49 01       ;
CODE_00DB76:          STA RAM_MarioDirection              ;; 00DB76 : 85 76       ;
CODE_00DB78:          LDA.W DATA_00DACD,Y                 ;; 00DB78 : B9 CD DA    ;
CODE_00DB7B:          BRA CODE_00DB92                     ;; 00DB7B : 80 15       ;
                                                          ;;                      ;
CODE_00DB7D:          STZ RAM_MarioSpeedX                 ;; 00DB7D : 64 7B       ;
CODE_00DB7F:          STZ $7A                             ;; 00DB7F : 64 7A       ;
CODE_00DB81:          LDX.W RAM_IsBehindScenery           ;; 00DB81 : AE F9 13    ;
CODE_00DB84:          LDA.W $149E                         ;; 00DB84 : AD 9E 14    ;
CODE_00DB87:          BEQ CODE_00DB96                     ;; 00DB87 : F0 0D       ;
CODE_00DB89:          TXA                                 ;; 00DB89 : 8A          ;
CODE_00DB8A:          INC A                               ;; 00DB8A : 1A          ;
CODE_00DB8B:          INC A                               ;; 00DB8B : 1A          ;
CODE_00DB8C:          JSR.W CODE_00D044                   ;; 00DB8C : 20 44 D0    ;
CODE_00DB8F:          LDA.W ClimbPunchingImgs,X           ;; 00DB8F : BD DD DA    ;
CODE_00DB92:          STA.W MarioFrame                    ;; 00DB92 : 8D E0 13    ;
Return00DB95:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DB96:          LDY RAM_IsSwimming                  ;; 00DB96 : A4 75       ; Mario is in Water flag 
CODE_00DB98:          BIT $16                             ;; 00DB98 : 24 16       ;
CODE_00DB9A:          BPL CODE_00DBAC                     ;; 00DB9A : 10 10       ;
CODE_00DB9C:          LDA.B #$0B                          ;; 00DB9C : A9 0B       ;
CODE_00DB9E:          STA RAM_IsFlying                    ;; 00DB9E : 85 72       ;
CODE_00DBA0:          LDA.W DATA_00DABB,Y                 ;; 00DBA0 : B9 BB DA    ;
CODE_00DBA3:          STA RAM_MarioSpeedY                 ;; 00DBA3 : 85 7D       ;
CODE_00DBA5:          LDA.B #$01                          ;; 00DBA5 : A9 01       ; \ Play sound effect 
CODE_00DBA7:          STA.W $1DFA                         ;; 00DBA7 : 8D FA 1D    ; / 
CODE_00DBAA:          BRA CODE_00DC00                     ;; 00DBAA : 80 54       ;
                                                          ;;                      ;
CODE_00DBAC:          BVC CODE_00DBCA                     ;; 00DBAC : 50 1C       ;
CODE_00DBAE:          LDA RAM_IsClimbing                  ;; 00DBAE : A5 74       ;
CODE_00DBB0:          BPL CODE_00DBCA                     ;; 00DBB0 : 10 18       ;
CODE_00DBB2:          LDA.B #$01                          ;; 00DBB2 : A9 01       ; \ Play sound effect 
CODE_00DBB4:          STA.W $1DF9                         ;; 00DBB4 : 8D F9 1D    ; / 
CODE_00DBB7:          STX.W $13F0                         ;; 00DBB7 : 8E F0 13    ;
CODE_00DBBA:          LDA RAM_MarioXPos                   ;; 00DBBA : A5 94       ; Mario X 
CODE_00DBBC:          AND.B #$08                          ;; 00DBBC : 29 08       ;
CODE_00DBBE:          LSR                                 ;; 00DBBE : 4A          ;
CODE_00DBBF:          LSR                                 ;; 00DBBF : 4A          ;
CODE_00DBC0:          LSR                                 ;; 00DBC0 : 4A          ;
CODE_00DBC1:          EOR.B #$01                          ;; 00DBC1 : 49 01       ;
CODE_00DBC3:          STA RAM_MarioDirection              ;; 00DBC3 : 85 76       ; Mario's Direction 
CODE_00DBC5:          LDA.B #$08                          ;; 00DBC5 : A9 08       ;
CODE_00DBC7:          STA.W $149E                         ;; 00DBC7 : 8D 9E 14    ;
CODE_00DBCA:          LDA.W ClimbingImgs,X                ;; 00DBCA : BD DB DA    ;
CODE_00DBCD:          STA.W MarioFrame                    ;; 00DBCD : 8D E0 13    ; Store A in Mario image 
CODE_00DBD0:          LDA RAM_ControllerA                 ;; 00DBD0 : A5 15       ;
CODE_00DBD2:          AND.B #$03                          ;; 00DBD2 : 29 03       ;
CODE_00DBD4:          BEQ CODE_00DBF2                     ;; 00DBD4 : F0 1C       ;
CODE_00DBD6:          LSR                                 ;; 00DBD6 : 4A          ;
CODE_00DBD7:          TAX                                 ;; 00DBD7 : AA          ;
CODE_00DBD8:          LDA $8B                             ;; 00DBD8 : A5 8B       ;
CODE_00DBDA:          AND.B #$18                          ;; 00DBDA : 29 18       ;
CODE_00DBDC:          CMP.B #$18                          ;; 00DBDC : C9 18       ;
CODE_00DBDE:          BEQ CODE_00DBE8                     ;; 00DBDE : F0 08       ;
CODE_00DBE0:          LDA RAM_IsClimbing                  ;; 00DBE0 : A5 74       ;
CODE_00DBE2:          BPL CODE_00DC00                     ;; 00DBE2 : 10 1C       ;
CODE_00DBE4:          CPX $8C                             ;; 00DBE4 : E4 8C       ;
CODE_00DBE6:          BEQ CODE_00DBF2                     ;; 00DBE6 : F0 0A       ;
CODE_00DBE8:          TXA                                 ;; 00DBE8 : 8A          ;
CODE_00DBE9:          ASL                                 ;; 00DBE9 : 0A          ;
CODE_00DBEA:          ORA RAM_IsSwimming                  ;; 00DBEA : 05 75       ;
CODE_00DBEC:          TAX                                 ;; 00DBEC : AA          ;
CODE_00DBED:          LDA.W DATA_00DAB7,X                 ;; 00DBED : BD B7 DA    ;
CODE_00DBF0:          STA RAM_MarioSpeedX                 ;; 00DBF0 : 85 7B       ;
CODE_00DBF2:          LDA RAM_ControllerA                 ;; 00DBF2 : A5 15       ; \ 
CODE_00DBF4:          AND.B #$0C                          ;; 00DBF4 : 29 0C       ;  |If up or down isn't pressed, branch to $DC16 
CODE_00DBF6:          BEQ CODE_00DC16                     ;; 00DBF6 : F0 1E       ; / 
CODE_00DBF8:          AND.B #$08                          ;; 00DBF8 : 29 08       ; \ If up is pressed, branch to $DC03 
CODE_00DBFA:          BNE CODE_00DC03                     ;; 00DBFA : D0 07       ; / 
CODE_00DBFC:          LSR $8B                             ;; 00DBFC : 46 8B       ;
CODE_00DBFE:          BCS CODE_00DC0B                     ;; 00DBFE : B0 0B       ;
CODE_00DC00:          STZ RAM_IsClimbing                  ;; 00DC00 : 64 74       ; Mario isn't climbing 
Return00DC02:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DC03:          INY                                 ;; 00DC03 : C8          ;
CODE_00DC04:          INY                                 ;; 00DC04 : C8          ;
CODE_00DC05:          LDA $8B                             ;; 00DC05 : A5 8B       ;
CODE_00DC07:          AND.B #$02                          ;; 00DC07 : 29 02       ;
CODE_00DC09:          BEQ CODE_00DC16                     ;; 00DC09 : F0 0B       ;
CODE_00DC0B:          LDA RAM_IsClimbing                  ;; 00DC0B : A5 74       ;
CODE_00DC0D:          BMI CODE_00DC11                     ;; 00DC0D : 30 02       ;
CODE_00DC0F:          STZ RAM_MarioSpeedX                 ;; 00DC0F : 64 7B       ;
CODE_00DC11:          LDA.W DATA_00DAB7,Y                 ;; 00DC11 : B9 B7 DA    ;
CODE_00DC14:          STA RAM_MarioSpeedY                 ;; 00DC14 : 85 7D       ;
CODE_00DC16:          ORA RAM_MarioSpeedX                 ;; 00DC16 : 05 7B       ;
CODE_00DC18:          BEQ Return00DC2C                    ;; 00DC18 : F0 12       ;
CODE_00DC1A:          LDA.W $1496                         ;; 00DC1A : AD 96 14    ;
CODE_00DC1D:          ORA.B #$08                          ;; 00DC1D : 09 08       ;
CODE_00DC1F:          STA.W $1496                         ;; 00DC1F : 8D 96 14    ;
CODE_00DC22:          AND.B #$07                          ;; 00DC22 : 29 07       ;
CODE_00DC24:          BNE Return00DC2C                    ;; 00DC24 : D0 06       ;
CODE_00DC26:          LDA RAM_MarioDirection              ;; 00DC26 : A5 76       ;
CODE_00DC28:          EOR.B #$01                          ;; 00DC28 : 49 01       ;
CODE_00DC2A:          STA RAM_MarioDirection              ;; 00DC2A : 85 76       ;
Return00DC2C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DC2D:          LDA RAM_MarioSpeedY                 ;; 00DC2D : A5 7D       ; \ Store Mario's Y speed in $8A 
CODE_00DC2F:          STA $8A                             ;; 00DC2F : 85 8A       ; /  
CODE_00DC31:          LDA.W RAM_WallWalkStatus            ;; 00DC31 : AD E3 13    ;
CODE_00DC34:          BEQ CODE_00DC40                     ;; 00DC34 : F0 0A       ;
CODE_00DC36:          LSR                                 ;; 00DC36 : 4A          ;
CODE_00DC37:          LDA RAM_MarioSpeedX                 ;; 00DC37 : A5 7B       ;
CODE_00DC39:          BCC CODE_00DC3E                     ;; 00DC39 : 90 03       ;
CODE_00DC3B:          EOR.B #$FF                          ;; 00DC3B : 49 FF       ;
CODE_00DC3D:          INC A                               ;; 00DC3D : 1A          ;
CODE_00DC3E:          STA RAM_MarioSpeedY                 ;; 00DC3E : 85 7D       ;
CODE_00DC40:          LDX.B #$00                          ;; 00DC40 : A2 00       ;
CODE_00DC42:          JSR.W CODE_00DC4F                   ;; 00DC42 : 20 4F DC    ;
CODE_00DC45:          LDX.B #$02                          ;; 00DC45 : A2 02       ;
CODE_00DC47:          JSR.W CODE_00DC4F                   ;; 00DC47 : 20 4F DC    ;
CODE_00DC4A:          LDA $8A                             ;; 00DC4A : A5 8A       ;
CODE_00DC4C:          STA RAM_MarioSpeedY                 ;; 00DC4C : 85 7D       ;
Return00DC4E:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00DC4F:          LDA RAM_MarioSpeedX,X               ;; 00DC4F : B5 7B       ;
CODE_00DC51:          ASL                                 ;; 00DC51 : 0A          ;
CODE_00DC52:          ASL                                 ;; 00DC52 : 0A          ;
CODE_00DC53:          ASL                                 ;; 00DC53 : 0A          ;
CODE_00DC54:          ASL                                 ;; 00DC54 : 0A          ;
CODE_00DC55:          CLC                                 ;; 00DC55 : 18          ;
CODE_00DC56:          ADC.W $13DA,X                       ;; 00DC56 : 7D DA 13    ;
CODE_00DC59:          STA.W $13DA,X                       ;; 00DC59 : 9D DA 13    ;
CODE_00DC5C:          REP #$20                            ;; 00DC5C : C2 20       ; Accum (16 bit) 
CODE_00DC5E:          PHP                                 ;; 00DC5E : 08          ;
CODE_00DC5F:          LDA RAM_MarioSpeedX,X               ;; 00DC5F : B5 7B       ;
CODE_00DC61:          LSR                                 ;; 00DC61 : 4A          ;
CODE_00DC62:          LSR                                 ;; 00DC62 : 4A          ;
CODE_00DC63:          LSR                                 ;; 00DC63 : 4A          ;
CODE_00DC64:          LSR                                 ;; 00DC64 : 4A          ;
CODE_00DC65:          AND.W #$000F                        ;; 00DC65 : 29 0F 00    ;
CODE_00DC68:          CMP.W #$0008                        ;; 00DC68 : C9 08 00    ;
CODE_00DC6B:          BCC CODE_00DC70                     ;; 00DC6B : 90 03       ;
CODE_00DC6D:          ORA.W #$FFF0                        ;; 00DC6D : 09 F0 FF    ;
CODE_00DC70:          PLP                                 ;; 00DC70 : 28          ;
CODE_00DC71:          ADC RAM_MarioXPos,X                 ;; 00DC71 : 75 94       ;
CODE_00DC73:          STA RAM_MarioXPos,X                 ;; 00DC73 : 95 94       ;
CODE_00DC75:          SEP #$20                            ;; 00DC75 : E2 20       ; Accum (8 bit) 
Return00DC77:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
NumWalkingFrames:     .db $01,$02,$02,$02                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DC7C:          .db $0A,$08,$06,$04,$03,$02,$01,$01 ;; 00DC7C               ;
                      .db $0A,$08,$06,$04,$03,$02,$01,$01 ;; ?QPWZ?               ;
                      .db $0A,$08,$06,$04,$03,$02,$01,$01 ;; ?QPWZ?               ;
                      .db $08,$06,$04,$03,$02,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $08,$06,$04,$03,$02,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $05,$04,$03,$02,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $04,$03,$02,$01,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $04,$03,$02,$01,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $02,$02,$02,$02,$02,$02,$02,$02 ;; ?QPWZ?               ;
DATA_00DCEC:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00DCEC               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $02,$04,$04,$04,$0E,$08,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$08,$08 ;; ?QPWZ?               ;
                      .db $08,$08,$08,$08,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $0C,$10,$12,$14,$16,$18,$1A,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$06,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$0A,$00,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DD32:          .db $00,$08,$10,$14,$18,$1E,$24,$24 ;; 00DD32               ;
                      .db $28,$30,$38,$3E,$44,$4A,$50,$54 ;; ?QPWZ?               ;
                      .db $58,$58,$5C,$60,$64,$68,$6C,$70 ;; ?QPWZ?               ;
                      .db $74,$78,$7C,$80                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DD4E:          .db $00,$00,$00,$00,$10,$00,$10,$00 ;; 00DD4E               ;
                      .db $00,$00,$00,$00,$F8,$FF,$F8,$FF ;; ?QPWZ?               ;
                      .db $0E,$00,$06,$00,$F2,$FF,$FA,$FF ;; ?QPWZ?               ;
                      .db $17,$00,$07,$00,$0F,$00,$EA,$FF ;; ?QPWZ?               ;
                      .db $FA,$FF,$FA,$FF,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$10,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$F8,$FF,$F8,$FF ;; ?QPWZ?               ;
                      .db $00,$00,$F8,$FF,$08,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$F8,$FF,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $F8,$FF,$00,$00,$00,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$00,$00,$FE,$FF,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$FC,$FF,$05,$00 ;; ?QPWZ?               ;
                      .db $04,$00,$FB,$FF,$FB,$FF,$06,$00 ;; ?QPWZ?               ;
                      .db $05,$00,$FA,$FF,$F9,$FF,$09,$00 ;; ?QPWZ?               ;
                      .db $07,$00,$F7,$FF,$FD,$FF,$FD,$FF ;; ?QPWZ?               ;
                      .db $03,$00,$03,$00,$FF,$FF,$07,$00 ;; ?QPWZ?               ;
                      .db $01,$00,$F9,$FF,$0A,$00,$F6,$FF ;; ?QPWZ?               ;
                      .db $08,$00,$F8,$FF,$08,$00,$F8,$FF ;; ?QPWZ?               ;
                      .db $00,$00,$04,$00,$FC,$FF,$FE,$FF ;; ?QPWZ?               ;
                      .db $02,$00,$0B,$00,$F5,$FF,$14,$00 ;; ?QPWZ?               ;
                      .db $EC,$FF,$0E,$00,$F3,$FF,$08,$00 ;; ?QPWZ?               ;
                      .db $F8,$FF,$0C,$00,$14,$00,$FD,$FF ;; ?QPWZ?               ;
                      .db $F4,$FF,$F4,$FF,$0B,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $03,$00,$13,$00,$F5,$FF,$05,$00 ;; ?QPWZ?               ;
                      .db $F5,$FF,$09,$00,$01,$00,$01,$00 ;; ?QPWZ?               ;
                      .db $F7,$FF,$07,$00,$07,$00,$05,$00 ;; ?QPWZ?               ;
                      .db $0D,$00,$0D,$00,$FB,$FF,$FB,$FF ;; ?QPWZ?               ;
                      .db $FB,$FF,$FF,$FF,$0F,$00,$01,$00 ;; ?QPWZ?               ;
                      .db $F9,$FF,$00,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00DE32:          .db $01,$00,$11,$00,$11,$00,$19,$00 ;; 00DE32               ;
                      .db $01,$00,$11,$00,$11,$00,$19,$00 ;; ?QPWZ?               ;
                      .db $0C,$00,$14,$00,$0C,$00,$14,$00 ;; ?QPWZ?               ;
                      .db $18,$00,$18,$00,$28,$00,$18,$00 ;; ?QPWZ?               ;
                      .db $18,$00,$28,$00,$06,$00,$16,$00 ;; ?QPWZ?               ;
                      .db $01,$00,$11,$00,$09,$00,$11,$00 ;; ?QPWZ?               ;
                      .db $01,$00,$11,$00,$09,$00,$11,$00 ;; ?QPWZ?               ;
                      .db $01,$00,$11,$00,$11,$00,$01,$00 ;; ?QPWZ?               ;
                      .db $11,$00,$11,$00,$01,$00,$11,$00 ;; ?QPWZ?               ;
                      .db $11,$00,$01,$00,$11,$00,$11,$00 ;; ?QPWZ?               ;
                      .db $01,$00,$11,$00,$01,$00,$11,$00 ;; ?QPWZ?               ;
                      .db $11,$00,$05,$00,$04,$00,$14,$00 ;; ?QPWZ?               ;
                      .db $04,$00,$14,$00,$0C,$00,$14,$00 ;; ?QPWZ?               ;
                      .db $0C,$00,$14,$00,$10,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$10,$00,$10,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$00,$00,$10,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$00,$00,$0B,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $11,$00,$11,$00,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $10,$00,$10,$00,$10,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$10,$00,$10,$00,$15,$00 ;; ?QPWZ?               ;
                      .db $15,$00,$25,$00,$25,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $04,$00,$04,$00,$14,$00,$14,$00 ;; ?QPWZ?               ;
                      .db $04,$00,$14,$00,$14,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $04,$00,$14,$00,$04,$00,$04,$00 ;; ?QPWZ?               ;
                      .db $14,$00,$00,$00,$08,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$08,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$18,$00,$00,$00,$10,$00 ;; ?QPWZ?               ;
                      .db $18,$00,$00,$00,$10,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$F8,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
TilesetIndex:         .db $00,$46,$83,$46                 ;; ?QPWZ?               ;
                                                          ;;                      ;
TileExpansion?:       .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$28,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$04,$04,$04,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$08,$00,$00,$00,$00,$0C ;; ?QPWZ?               ;
                      .db $0C,$0C,$00,$00,$10,$10,$14,$14 ;; ?QPWZ?               ;
                      .db $18,$18,$00,$00,$1C,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$20,$00,$00,$00,$00,$24,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$04 ;; ?QPWZ?               ;
                      .db $04,$04,$00,$00,$00,$00,$00,$08 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$0C,$0C,$0C,$00 ;; ?QPWZ?               ;
                      .db $00,$10,$10,$14,$14,$18,$18,$00 ;; ?QPWZ?               ;
                      .db $00,$1C,$00,$00,$00,$00,$20,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$24,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
Mario8x8Tiles:        .db $00,$02,$80,$80,$00,$02,$0C,$80 ;; ?QPWZ?               ;
                      .db $00,$02,$1A,$1B,$00,$02,$0D,$80 ;; ?QPWZ?               ;
                      .db $00,$02,$22,$23,$00,$02,$32,$33 ;; ?QPWZ?               ;
                      .db $00,$02,$0A,$0B,$00,$02,$30,$31 ;; ?QPWZ?               ;
                      .db $00,$02,$20,$21,$00,$02,$7E,$80 ;; ?QPWZ?               ;
                      .db $00,$02,$02,$80,$04,$7F,$4A,$5B ;; ?QPWZ?               ;
                      .db $4B,$5A                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E00C:          .db $50,$50,$50,$09,$50,$50,$50,$50 ;; 00E00C               ;
                      .db $50,$50,$09,$2B,$50,$2D,$50,$D5 ;; ?QPWZ?               ;
                      .db $2E,$C4,$C4,$C4,$D6,$B6,$50,$50 ;; ?QPWZ?               ;
                      .db $50,$50,$50,$50,$50,$C5,$D7,$2A ;; ?QPWZ?               ;
                      .db $E0,$50,$D5,$29,$2C,$B6,$D6,$28 ;; ?QPWZ?               ;
                      .db $E0,$E0,$C5,$C5,$C5,$C5,$C5,$C5 ;; ?QPWZ?               ;
                      .db $5C,$5C,$50,$5A,$B6,$50,$28,$28 ;; ?QPWZ?               ;
                      .db $C5,$D7,$28,$70,$C5,$70,$1C,$93 ;; ?QPWZ?               ;
                      .db $C5,$C5,$0B,$85,$90,$84,$70,$70 ;; ?QPWZ?               ;
                      .db $70,$A0,$70,$70,$70,$70,$70,$70 ;; ?QPWZ?               ;
                      .db $A0,$74,$70,$80,$70,$84,$17,$A4 ;; ?QPWZ?               ;
                      .db $A4,$A4,$B3,$B0,$70,$70,$70,$70 ;; ?QPWZ?               ;
                      .db $70,$70,$70,$E2,$72,$0F,$61,$70 ;; ?QPWZ?               ;
                      .db $63,$82,$C7,$90,$B3,$D4,$A5,$C0 ;; ?QPWZ?               ;
                      .db $08,$54,$0C,$0E,$1B,$51,$49,$4A ;; ?QPWZ?               ;
                      .db $48,$4B,$4C,$5D,$5E,$5F,$E3,$90 ;; ?QPWZ?               ;
                      .db $5F,$5F,$C5,$70,$70,$70,$A0,$70 ;; ?QPWZ?               ;
                      .db $70,$70,$70,$70,$70,$A0,$74,$70 ;; ?QPWZ?               ;
                      .db $80,$70,$84,$17,$A4,$A4,$A4,$B3 ;; ?QPWZ?               ;
                      .db $B0,$70,$70,$70,$70,$70,$70,$70 ;; ?QPWZ?               ;
                      .db $E2,$72,$0F,$61,$70,$63,$82,$C7 ;; ?QPWZ?               ;
                      .db $90,$B3,$D4,$A5,$C0,$08,$64,$0C ;; ?QPWZ?               ;
                      .db $0E,$1B,$51,$49,$4A,$48,$4B,$4C ;; ?QPWZ?               ;
                      .db $5D,$5E,$5F,$E3,$90,$5F,$5F,$C5 ;; ?QPWZ?               ;
DATA_00E0CC:          .db $71,$60,$60,$19,$94,$96,$96,$A2 ;; 00E0CC               ;
                      .db $97,$97,$18,$3B,$B4,$3D,$A7,$E5 ;; ?QPWZ?               ;
                      .db $2F,$D3,$C3,$C3,$F6,$D0,$B1,$81 ;; ?QPWZ?               ;
                      .db $B2,$86,$B4,$87,$A6,$D1,$F7,$3A ;; ?QPWZ?               ;
                      .db $F0,$F4,$F5,$39,$3C,$C6,$E6,$38 ;; ?QPWZ?               ;
                      .db $F1,$F0,$C5,$C5,$C5,$C5,$C5,$C5 ;; ?QPWZ?               ;
                      .db $6C,$4D,$71,$6A,$6B,$60,$38,$F1 ;; ?QPWZ?               ;
                      .db $5B,$69,$F1,$F1,$4E,$E1,$1D,$A3 ;; ?QPWZ?               ;
                      .db $C5,$C5,$1A,$95,$10,$07,$02,$01 ;; ?QPWZ?               ;
                      .db $00,$02,$14,$13,$12,$30,$27,$26 ;; ?QPWZ?               ;
                      .db $30,$03,$15,$04,$31,$07,$E7,$25 ;; ?QPWZ?               ;
                      .db $24,$23,$62,$36,$33,$91,$34,$92 ;; ?QPWZ?               ;
                      .db $35,$A1,$32,$F2,$73,$1F,$C0,$C1 ;; ?QPWZ?               ;
                      .db $C2,$83,$D2,$10,$B7,$E4,$B5,$61 ;; ?QPWZ?               ;
                      .db $0A,$55,$0D,$75,$77,$1E,$59,$59 ;; ?QPWZ?               ;
                      .db $58,$02,$02,$6D,$6E,$6F,$F3,$68 ;; ?QPWZ?               ;
                      .db $6F,$6F,$06,$02,$01,$00,$02,$14 ;; ?QPWZ?               ;
                      .db $13,$12,$30,$27,$26,$30,$03,$15 ;; ?QPWZ?               ;
                      .db $04,$31,$07,$E7,$25,$24,$23,$62 ;; ?QPWZ?               ;
                      .db $36,$33,$91,$34,$92,$35,$A1,$32 ;; ?QPWZ?               ;
                      .db $F2,$73,$1F,$C0,$C1,$C2,$83,$D2 ;; ?QPWZ?               ;
                      .db $10,$B7,$E4,$B5,$61,$0A,$55,$0D ;; ?QPWZ?               ;
                      .db $75,$77,$1E,$59,$59,$58,$02,$02 ;; ?QPWZ?               ;
                      .db $6D,$6E,$6F,$F3,$68,$6F,$6F,$06 ;; ?QPWZ?               ;
MarioPalIndex:        .db $00,$40                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E18E:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00E18E               ;
                      .db $00,$00,$00,$00,$00,$0D,$00,$10 ;; ?QPWZ?               ;
                      .db $13,$22,$25,$28,$00,$16,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$08,$19,$1C ;; ?QPWZ?               ;
                      .db $04,$1F,$10,$10,$00,$16,$10,$06 ;; ?QPWZ?               ;
                      .db $04,$08,$2B,$30,$35,$3A,$3F,$43 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $16,$16,$00,$00,$08,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$10,$04,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E1D4:          .db $06                             ;; 00E1D4               ;
                                                          ;;                      ;
DATA_00E1D5:          .db $00                             ;; 00E1D5               ;
                                                          ;;                      ;
DATA_00E1D6:          .db $06                             ;; 00E1D6               ;
                                                          ;;                      ;
DATA_00E1D7:          .db $00                             ;; 00E1D7               ;
                                                          ;;                      ;
DATA_00E1D8:          .db $86,$02,$06,$03,$06,$01,$06,$CE ;; 00E1D8               ;
                      .db $06,$06,$40,$00,$06,$2C,$06,$06 ;; ?QPWZ?               ;
                      .db $44,$0E,$86,$2C,$06,$86,$2C,$0A ;; ?QPWZ?               ;
                      .db $86,$84,$08,$06,$0A,$02,$06,$AC ;; ?QPWZ?               ;
                      .db $10,$06,$CC,$10,$06,$AE,$10,$00 ;; ?QPWZ?               ;
                      .db $8C,$14,$80,$2E,$00,$CA,$16,$91 ;; ?QPWZ?               ;
                      .db $2F,$00,$8E,$18,$81,$30,$00,$EB ;; ?QPWZ?               ;
                      .db $1A,$90,$31,$04,$ED,$1C,$82,$06 ;; ?QPWZ?               ;
                      .db $92,$1E                         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E21A:          .db $84,$86,$88,$8A,$8C,$8E,$90,$90 ;; 00E21A               ;
                      .db $92,$94,$96,$98,$9A,$9C,$9E,$A0 ;; ?QPWZ?               ;
                      .db $A2,$A4,$A6,$A8,$AA,$B0,$B6,$BC ;; ?QPWZ?               ;
                      .db $C2,$C8,$CE,$D4,$DA,$DE,$E2,$E2 ;; ?QPWZ?               ;
DATA_00E23A:          .db $0A,$0A,$84,$0A,$88,$88,$88,$88 ;; 00E23A               ;
                      .db $8A,$8A,$8A,$8A,$44,$44,$44,$44 ;; ?QPWZ?               ;
                      .db $42,$42,$42,$42,$40,$40,$40,$40 ;; ?QPWZ?               ;
                      .db $22,$22,$22,$22,$A4,$A4,$A4,$A4 ;; ?QPWZ?               ;
                      .db $A6,$A6,$A6,$A6,$86,$86,$86,$86 ;; ?QPWZ?               ;
                      .db $6E,$6E,$6E,$6E                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E266:          .db $02,$02,$02,$0C,$00,$00,$00,$00 ;; 00E266               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$04,$12,$04,$04 ;; ?QPWZ?               ;
                      .db $04,$12,$04,$04,$04,$12,$04,$04 ;; ?QPWZ?               ;
                      .db $04,$12,$04,$04                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E292:          .db $01,$01,$01,$01,$02,$02,$02,$02 ;; 00E292               ;
                      .db $04,$04,$04,$04,$08,$08,$08,$08 ;; ?QPWZ?               ;
DATA_00E2A2:          .db $C8,$B2,$DC,$B2,$C8,$B2,$DC,$B2 ;; 00E2A2               ;
                      .db $C8,$B2,$DC,$B2,$F0,$B2,$04,$B3 ;; ?QPWZ?               ;
DATA_00E2B2:          .db $10,$D4,$10,$E8                 ;; 00E2B2               ;
                                                          ;;                      ;
DATA_00E2B6:          .db $08,$CC,$08                     ;; 00E2B6               ;
                                                          ;;                      ;
DATA_00E2B9:          .db $E0,$10,$10,$30                 ;; 00E2B9               ;
                                                          ;;                      ;
CODE_00E2BD:          PHB                                 ;; 00E2BD : 8B          ;
CODE_00E2BE:          PHK                                 ;; 00E2BE : 4B          ;
CODE_00E2BF:          PLB                                 ;; 00E2BF : AB          ;
CODE_00E2C0:          LDA $78                             ;; 00E2C0 : A5 78       ;
CODE_00E2C2:          CMP.B #$FF                          ;; 00E2C2 : C9 FF       ;
CODE_00E2C4:          BEQ CODE_00E2CA                     ;; 00E2C4 : F0 04       ;
CODE_00E2C6:          JSL.L CODE_01EA70                   ;; 00E2C6 : 22 70 EA 01 ;
CODE_00E2CA:          LDY.W RAM_FlashingPalTimer          ;; 00E2CA : AC 9B 14    ;
CODE_00E2CD:          BNE CODE_00E308                     ;; 00E2CD : D0 39       ;
CODE_00E2CF:          LDY.W $1490                         ;; 00E2CF : AC 90 14    ; \ Branch if Mario doesn't have star 
CODE_00E2D2:          BEQ CODE_00E314                     ;; 00E2D2 : F0 40       ; / 
CODE_00E2D4:          LDA $78                             ;; 00E2D4 : A5 78       ;
CODE_00E2D6:          CMP.B #$FF                          ;; 00E2D6 : C9 FF       ;
CODE_00E2D8:          BEQ CODE_00E2E3                     ;; 00E2D8 : F0 09       ;
CODE_00E2DA:          LDA RAM_FrameCounterB               ;; 00E2DA : A5 14       ;
CODE_00E2DC:          AND.B #$03                          ;; 00E2DC : 29 03       ;
CODE_00E2DE:          BNE CODE_00E2E3                     ;; 00E2DE : D0 03       ;
CODE_00E2E0:          DEC.W $1490                         ;; 00E2E0 : CE 90 14    ; Decrease star timer 
CODE_00E2E3:          LDA RAM_FrameCounter                ;; 00E2E3 : A5 13       ;
CODE_00E2E5:          CPY.B #$1E                          ;; 00E2E5 : C0 1E       ;
CODE_00E2E7:          BCC CODE_00E30A                     ;; 00E2E7 : 90 21       ;
CODE_00E2E9:          BNE CODE_00E30C                     ;; 00E2E9 : D0 21       ;
CODE_00E2EB:          LDA.W $0DDA                         ;; 00E2EB : AD DA 0D    ;
CODE_00E2EE:          CMP.B #$FF                          ;; 00E2EE : C9 FF       ;
CODE_00E2F0:          BEQ CODE_00E308                     ;; 00E2F0 : F0 16       ;
CODE_00E2F2:          AND.B #$7F                          ;; 00E2F2 : 29 7F       ;
CODE_00E2F4:          STA.W $0DDA                         ;; 00E2F4 : 8D DA 0D    ;
CODE_00E2F7:          TAX                                 ;; 00E2F7 : AA          ;
CODE_00E2F8:          LDA.W RAM_BluePowTimer              ;; 00E2F8 : AD AD 14    ;
CODE_00E2FB:          ORA.W RAM_SilverPowTimer            ;; 00E2FB : 0D AE 14    ;
CODE_00E2FE:          ORA.W $190C                         ;; 00E2FE : 0D 0C 19    ;
CODE_00E301:          BEQ CODE_00E305                     ;; 00E301 : F0 02       ;
ADDR_00E303:          LDX.B #$0E                          ;; 00E303 : A2 0E       ;
CODE_00E305:          STX.W $1DFB                         ;; 00E305 : 8E FB 1D    ; / Change music 
CODE_00E308:          LDA RAM_FrameCounter                ;; 00E308 : A5 13       ;
CODE_00E30A:          LSR                                 ;; 00E30A : 4A          ;
CODE_00E30B:          LSR                                 ;; 00E30B : 4A          ;
CODE_00E30C:          AND.B #$03                          ;; 00E30C : 29 03       ;
CODE_00E30E:          INC A                               ;; 00E30E : 1A          ;
CODE_00E30F:          INC A                               ;; 00E30F : 1A          ;
CODE_00E310:          INC A                               ;; 00E310 : 1A          ;
CODE_00E311:          INC A                               ;; 00E311 : 1A          ;
CODE_00E312:          BRA CODE_00E31A                     ;; 00E312 : 80 06       ;
                                                          ;;                      ;
CODE_00E314:          LDA RAM_MarioPowerUp                ;; 00E314 : A5 19       ;
CODE_00E316:          ASL                                 ;; 00E316 : 0A          ;
CODE_00E317:          ORA.W $0DB3                         ;; 00E317 : 0D B3 0D    ;
CODE_00E31A:          ASL                                 ;; 00E31A : 0A          ;
CODE_00E31B:          TAY                                 ;; 00E31B : A8          ;
CODE_00E31C:          REP #$20                            ;; 00E31C : C2 20       ; Accum (16 bit) 
CODE_00E31E:          LDA.W DATA_00E2A2,Y                 ;; 00E31E : B9 A2 E2    ;
CODE_00E321:          STA.W $0D82                         ;; 00E321 : 8D 82 0D    ;
CODE_00E324:          SEP #$20                            ;; 00E324 : E2 20       ; Accum (8 bit) 
CODE_00E326:          LDX.W MarioFrame                    ;; 00E326 : AE E0 13    ;
CODE_00E329:          LDA.B #$05                          ;; 00E329 : A9 05       ;
CODE_00E32B:          CMP.W RAM_WallWalkStatus            ;; 00E32B : CD E3 13    ;
CODE_00E32E:          BCS CODE_00E33E                     ;; 00E32E : B0 0E       ;
CODE_00E330:          LDA.W RAM_WallWalkStatus            ;; 00E330 : AD E3 13    ;
CODE_00E333:          LDY RAM_MarioPowerUp                ;; 00E333 : A4 19       ;
CODE_00E335:          BEQ CODE_00E33B                     ;; 00E335 : F0 04       ;
CODE_00E337:          CPX.B #$13                          ;; 00E337 : E0 13       ;
CODE_00E339:          BNE CODE_00E33D                     ;; 00E339 : D0 02       ;
CODE_00E33B:          EOR.B #$01                          ;; 00E33B : 49 01       ;
CODE_00E33D:          LSR                                 ;; 00E33D : 4A          ;
CODE_00E33E:          REP #$20                            ;; 00E33E : C2 20       ; Accum (16 bit) 
CODE_00E340:          LDA RAM_MarioXPos                   ;; 00E340 : A5 94       ;
CODE_00E342:          SBC RAM_ScreenBndryXLo              ;; 00E342 : E5 1A       ;
CODE_00E344:          STA $7E                             ;; 00E344 : 85 7E       ;
CODE_00E346:          LDA.W $188B                         ;; 00E346 : AD 8B 18    ;
CODE_00E349:          AND.W #$00FF                        ;; 00E349 : 29 FF 00    ;
CODE_00E34C:          CLC                                 ;; 00E34C : 18          ;
CODE_00E34D:          ADC RAM_MarioYPos                   ;; 00E34D : 65 96       ;
CODE_00E34F:          LDY RAM_MarioPowerUp                ;; 00E34F : A4 19       ;
CODE_00E351:          CPY.B #$01                          ;; 00E351 : C0 01       ;
CODE_00E353:          LDY.B #$01                          ;; 00E353 : A0 01       ;
CODE_00E355:          BCS CODE_00E359                     ;; 00E355 : B0 02       ;
CODE_00E357:          DEC A                               ;; 00E357 : 3A          ;
CODE_00E358:          DEY                                 ;; 00E358 : 88          ;
CODE_00E359:          CPX.B #$0A                          ;; 00E359 : E0 0A       ;
CODE_00E35B:          BCS CODE_00E360                     ;; 00E35B : B0 03       ;
CODE_00E35D:          CPY.W $13DB                         ;; 00E35D : CC DB 13    ;
CODE_00E360:          SBC RAM_ScreenBndryYLo              ;; 00E360 : E5 1C       ;
CODE_00E362:          CPX.B #$1C                          ;; 00E362 : E0 1C       ;
CODE_00E364:          BNE CODE_00E369                     ;; 00E364 : D0 03       ;
CODE_00E366:          ADC.W #$0001                        ;; 00E366 : 69 01 00    ;
CODE_00E369:          STA $80                             ;; 00E369 : 85 80       ;
CODE_00E36B:          SEP #$20                            ;; 00E36B : E2 20       ; Accum (8 bit) 
CODE_00E36D:          LDA.W $1497                         ;; 00E36D : AD 97 14    ;
CODE_00E370:          BEQ CODE_00E385                     ;; 00E370 : F0 13       ;
CODE_00E372:          LSR                                 ;; 00E372 : 4A          ;
CODE_00E373:          LSR                                 ;; 00E373 : 4A          ;
CODE_00E374:          LSR                                 ;; 00E374 : 4A          ;
CODE_00E375:          TAY                                 ;; 00E375 : A8          ;
CODE_00E376:          LDA.W DATA_00E292,Y                 ;; 00E376 : B9 92 E2    ;
CODE_00E379:          AND.W $1497                         ;; 00E379 : 2D 97 14    ;
CODE_00E37C:          ORA RAM_SpritesLocked               ;; 00E37C : 05 9D       ;
CODE_00E37E:          ORA.W $13FB                         ;; 00E37E : 0D FB 13    ;
CODE_00E381:          BNE CODE_00E385                     ;; 00E381 : D0 02       ;
CODE_00E383:          PLB                                 ;; 00E383 : AB          ;
Return00E384:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00E385:          LDA.B #$C8                          ;; 00E385 : A9 C8       ;
CODE_00E387:          CPX.B #$43                          ;; 00E387 : E0 43       ;
CODE_00E389:          BNE CODE_00E38D                     ;; 00E389 : D0 02       ;
CODE_00E38B:          LDA.B #$E8                          ;; 00E38B : A9 E8       ;
CODE_00E38D:          STA $04                             ;; 00E38D : 85 04       ;
CODE_00E38F:          CPX.B #$29                          ;; 00E38F : E0 29       ;
CODE_00E391:          BNE CODE_00E399                     ;; 00E391 : D0 06       ;
CODE_00E393:          LDA RAM_MarioPowerUp                ;; 00E393 : A5 19       ;
CODE_00E395:          BNE CODE_00E399                     ;; 00E395 : D0 02       ;
CODE_00E397:          LDX.B #$20                          ;; 00E397 : A2 20       ;
CODE_00E399:          LDA.W DATA_00DCEC,X                 ;; 00E399 : BD EC DC    ;
CODE_00E39C:          ORA RAM_MarioDirection              ;; 00E39C : 05 76       ;
CODE_00E39E:          TAY                                 ;; 00E39E : A8          ;
CODE_00E39F:          LDA.W DATA_00DD32,Y                 ;; 00E39F : B9 32 DD    ;
CODE_00E3A2:          STA $05                             ;; 00E3A2 : 85 05       ;
CODE_00E3A4:          LDY RAM_MarioPowerUp                ;; 00E3A4 : A4 19       ;
CODE_00E3A6:          LDA.W MarioFrame                    ;; 00E3A6 : AD E0 13    ;
CODE_00E3A9:          CMP.B #$3D                          ;; 00E3A9 : C9 3D       ;
CODE_00E3AB:          BCS CODE_00E3B0                     ;; 00E3AB : B0 03       ;
CODE_00E3AD:          ADC.W TilesetIndex,Y                ;; 00E3AD : 79 16 DF    ;
CODE_00E3B0:          TAY                                 ;; 00E3B0 : A8          ;
CODE_00E3B1:          LDA.W TileExpansion?,Y              ;; 00E3B1 : B9 1A DF    ;
CODE_00E3B4:          STA $06                             ;; 00E3B4 : 85 06       ;
CODE_00E3B6:          LDA.W DATA_00E00C,Y                 ;; 00E3B6 : B9 0C E0    ;
CODE_00E3B9:          STA $0A                             ;; 00E3B9 : 85 0A       ;
CODE_00E3BB:          LDA.W DATA_00E0CC,Y                 ;; 00E3BB : B9 CC E0    ;
CODE_00E3BE:          STA $0B                             ;; 00E3BE : 85 0B       ;
CODE_00E3C0:          LDA $64                             ;; 00E3C0 : A5 64       ;
CODE_00E3C2:          LDX.W RAM_IsBehindScenery           ;; 00E3C2 : AE F9 13    ;
CODE_00E3C5:          BEQ CODE_00E3CA                     ;; 00E3C5 : F0 03       ;
CODE_00E3C7:          LDA.W DATA_00E2B9,X                 ;; 00E3C7 : BD B9 E2    ;
CODE_00E3CA:          LDY.W DATA_00E2B2,X                 ;; 00E3CA : BC B2 E2    ;
CODE_00E3CD:          LDX RAM_MarioDirection              ;; 00E3CD : A6 76       ;
CODE_00E3CF:          ORA.W MarioPalIndex,X               ;; 00E3CF : 1D 8C E1    ;
CODE_00E3D2:          STA.W OAM_Prop,Y                    ;; 00E3D2 : 99 03 03    ;
CODE_00E3D5:          STA.W OAM_Tile2Prop,Y               ;; 00E3D5 : 99 07 03    ;
CODE_00E3D8:          STA.W OAM_Tile4Prop,Y               ;; 00E3D8 : 99 0F 03    ;
CODE_00E3DB:          STA.W $0313,Y                       ;; 00E3DB : 99 13 03    ;
CODE_00E3DE:          STA.W $02FB,Y                       ;; 00E3DE : 99 FB 02    ;
CODE_00E3E1:          STA.W $02FF,Y                       ;; 00E3E1 : 99 FF 02    ;
CODE_00E3E4:          LDX $04                             ;; 00E3E4 : A6 04       ;
CODE_00E3E6:          CPX.B #$E8                          ;; 00E3E6 : E0 E8       ;
CODE_00E3E8:          BNE CODE_00E3EC                     ;; 00E3E8 : D0 02       ;
CODE_00E3EA:          EOR.B #$40                          ;; 00E3EA : 49 40       ;
CODE_00E3EC:          STA.W OAM_Tile3Prop,Y               ;; 00E3EC : 99 0B 03    ;
CODE_00E3EF:          JSR.W CODE_00E45D                   ;; 00E3EF : 20 5D E4    ;
CODE_00E3F2:          JSR.W CODE_00E45D                   ;; 00E3F2 : 20 5D E4    ;
CODE_00E3F5:          JSR.W CODE_00E45D                   ;; 00E3F5 : 20 5D E4    ;
CODE_00E3F8:          JSR.W CODE_00E45D                   ;; 00E3F8 : 20 5D E4    ;
CODE_00E3FB:          LDA RAM_MarioPowerUp                ;; 00E3FB : A5 19       ;
CODE_00E3FD:          CMP.B #$02                          ;; 00E3FD : C9 02       ;
CODE_00E3FF:          BNE CODE_00E458                     ;; 00E3FF : D0 57       ;
CODE_00E401:          PHY                                 ;; 00E401 : 5A          ;
CODE_00E402:          LDA.B #$2C                          ;; 00E402 : A9 2C       ;
CODE_00E404:          STA $06                             ;; 00E404 : 85 06       ;
CODE_00E406:          LDX.W MarioFrame                    ;; 00E406 : AE E0 13    ;
CODE_00E409:          LDA.W DATA_00E18E,X                 ;; 00E409 : BD 8E E1    ;
CODE_00E40C:          TAX                                 ;; 00E40C : AA          ;
CODE_00E40D:          LDA.W DATA_00E1D7,X                 ;; 00E40D : BD D7 E1    ;
CODE_00E410:          STA $0D                             ;; 00E410 : 85 0D       ;
CODE_00E412:          LDA.W DATA_00E1D8,X                 ;; 00E412 : BD D8 E1    ;
CODE_00E415:          STA $0E                             ;; 00E415 : 85 0E       ;
CODE_00E417:          LDA.W DATA_00E1D5,X                 ;; 00E417 : BD D5 E1    ;
CODE_00E41A:          STA $0C                             ;; 00E41A : 85 0C       ;
CODE_00E41C:          CMP.B #$04                          ;; 00E41C : C9 04       ;
CODE_00E41E:          BCS CODE_00E432                     ;; 00E41E : B0 12       ;
CODE_00E420:          LDA.W $13DF                         ;; 00E420 : AD DF 13    ;
CODE_00E423:          ASL                                 ;; 00E423 : 0A          ;
CODE_00E424:          ASL                                 ;; 00E424 : 0A          ;
CODE_00E425:          ORA $0C                             ;; 00E425 : 05 0C       ;
CODE_00E427:          TAY                                 ;; 00E427 : A8          ;
CODE_00E428:          LDA.W DATA_00E23A,Y                 ;; 00E428 : B9 3A E2    ;
CODE_00E42B:          STA $0C                             ;; 00E42B : 85 0C       ;
CODE_00E42D:          LDA.W DATA_00E266,Y                 ;; 00E42D : B9 66 E2    ;
CODE_00E430:          BRA CODE_00E435                     ;; 00E430 : 80 03       ;
                                                          ;;                      ;
CODE_00E432:          LDA.W DATA_00E1D6,X                 ;; 00E432 : BD D6 E1    ;
CODE_00E435:          ORA RAM_MarioDirection              ;; 00E435 : 05 76       ;
CODE_00E437:          TAY                                 ;; 00E437 : A8          ;
CODE_00E438:          LDA.W DATA_00E21A,Y                 ;; 00E438 : B9 1A E2    ;
CODE_00E43B:          STA $05                             ;; 00E43B : 85 05       ;
CODE_00E43D:          PLY                                 ;; 00E43D : 7A          ;
CODE_00E43E:          LDA.W DATA_00E1D4,X                 ;; 00E43E : BD D4 E1    ;
CODE_00E441:          TSB $78                             ;; 00E441 : 04 78       ;
CODE_00E443:          BMI CODE_00E448                     ;; 00E443 : 30 03       ;
CODE_00E445:          JSR.W CODE_00E45D                   ;; 00E445 : 20 5D E4    ;
CODE_00E448:          LDX.W RAM_IsBehindScenery           ;; 00E448 : AE F9 13    ;
CODE_00E44B:          LDY.W DATA_00E2B6,X                 ;; 00E44B : BC B6 E2    ;
CODE_00E44E:          JSR.W CODE_00E45D                   ;; 00E44E : 20 5D E4    ;
CODE_00E451:          LDA $0E                             ;; 00E451 : A5 0E       ;
CODE_00E453:          STA $06                             ;; 00E453 : 85 06       ;
CODE_00E455:          JSR.W CODE_00E45D                   ;; 00E455 : 20 5D E4    ;
CODE_00E458:          JSR.W CODE_00F636                   ;; 00E458 : 20 36 F6    ;
CODE_00E45B:          PLB                                 ;; 00E45B : AB          ;
Return00E45C:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00E45D:          LSR $78                             ;; 00E45D : 46 78       ;
CODE_00E45F:          BCS CODE_00E49F                     ;; 00E45F : B0 3E       ;
CODE_00E461:          LDX $06                             ;; 00E461 : A6 06       ;
CODE_00E463:          LDA.W Mario8x8Tiles,X               ;; 00E463 : BD DA DF    ;
CODE_00E466:          BMI CODE_00E49F                     ;; 00E466 : 30 37       ;
CODE_00E468:          STA.W OAM_Tile,Y                    ;; 00E468 : 99 02 03    ;
CODE_00E46B:          LDX $05                             ;; 00E46B : A6 05       ;
CODE_00E46D:          REP #$20                            ;; 00E46D : C2 20       ; Accum (16 bit) 
CODE_00E46F:          LDA $80                             ;; 00E46F : A5 80       ;
CODE_00E471:          CLC                                 ;; 00E471 : 18          ;
CODE_00E472:          ADC.W DATA_00DE32,X                 ;; 00E472 : 7D 32 DE    ;
CODE_00E475:          PHA                                 ;; 00E475 : 48          ;
CODE_00E476:          CLC                                 ;; 00E476 : 18          ;
CODE_00E477:          ADC.W #$0010                        ;; 00E477 : 69 10 00    ;
CODE_00E47A:          CMP.W #$0100                        ;; 00E47A : C9 00 01    ;
CODE_00E47D:          PLA                                 ;; 00E47D : 68          ;
CODE_00E47E:          SEP #$20                            ;; 00E47E : E2 20       ; Accum (8 bit) 
CODE_00E480:          BCS CODE_00E49F                     ;; 00E480 : B0 1D       ;
CODE_00E482:          STA.W OAM_DispY,Y                   ;; 00E482 : 99 01 03    ;
CODE_00E485:          REP #$20                            ;; 00E485 : C2 20       ; Accum (16 bit) 
CODE_00E487:          LDA $7E                             ;; 00E487 : A5 7E       ;
CODE_00E489:          CLC                                 ;; 00E489 : 18          ;
CODE_00E48A:          ADC.W DATA_00DD4E,X                 ;; 00E48A : 7D 4E DD    ;
CODE_00E48D:          PHA                                 ;; 00E48D : 48          ;
CODE_00E48E:          CLC                                 ;; 00E48E : 18          ;
CODE_00E48F:          ADC.W #$0080                        ;; 00E48F : 69 80 00    ;
CODE_00E492:          CMP.W #$0200                        ;; 00E492 : C9 00 02    ;
CODE_00E495:          PLA                                 ;; 00E495 : 68          ;
CODE_00E496:          SEP #$20                            ;; 00E496 : E2 20       ; Accum (8 bit) 
CODE_00E498:          BCS CODE_00E49F                     ;; 00E498 : B0 05       ;
CODE_00E49A:          STA.W OAM_DispX,Y                   ;; 00E49A : 99 00 03    ;
CODE_00E49D:          XBA                                 ;; 00E49D : EB          ;
CODE_00E49E:          LSR                                 ;; 00E49E : 4A          ;
CODE_00E49F:          PHP                                 ;; 00E49F : 08          ;
CODE_00E4A0:          TYA                                 ;; 00E4A0 : 98          ;
CODE_00E4A1:          LSR                                 ;; 00E4A1 : 4A          ;
CODE_00E4A2:          LSR                                 ;; 00E4A2 : 4A          ;
CODE_00E4A3:          TAX                                 ;; 00E4A3 : AA          ;
CODE_00E4A4:          ASL $04                             ;; 00E4A4 : 06 04       ;
CODE_00E4A6:          ROL                                 ;; 00E4A6 : 2A          ;
CODE_00E4A7:          PLP                                 ;; 00E4A7 : 28          ;
CODE_00E4A8:          ROL                                 ;; 00E4A8 : 2A          ;
CODE_00E4A9:          AND.B #$03                          ;; 00E4A9 : 29 03       ;
CODE_00E4AB:          STA.W OAM_TileSize,X                ;; 00E4AB : 9D 60 04    ;
CODE_00E4AE:          INY                                 ;; 00E4AE : C8          ;
CODE_00E4AF:          INY                                 ;; 00E4AF : C8          ;
CODE_00E4B0:          INY                                 ;; 00E4B0 : C8          ;
CODE_00E4B1:          INY                                 ;; 00E4B1 : C8          ;
CODE_00E4B2:          INC $05                             ;; 00E4B2 : E6 05       ;
CODE_00E4B4:          INC $05                             ;; 00E4B4 : E6 05       ;
CODE_00E4B6:          INC $06                             ;; 00E4B6 : E6 06       ;
Return00E4B8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00E4B9:          .db $08,$08,$08,$08,$10,$10,$10,$10 ;; 00E4B9               ;
                      .db $18,$18,$20,$20,$28,$30,$08,$10 ;; ?QPWZ?               ;
                      .db $00,$00,$28,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $38,$50,$48,$40,$58,$58,$60,$60 ;; ?QPWZ?               ;
                      .db $00                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E4DA:          .db $10,$10,$10,$10,$10,$10,$10,$10 ;; 00E4DA               ;
                      .db $20,$20,$20,$20,$30,$30,$40,$30 ;; ?QPWZ?               ;
                      .db $30,$30,$30,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $30,$30,$30,$30,$40,$40,$40,$40 ;; ?QPWZ?               ;
                      .db $00                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E4FB:          .db $00,$00,$00,$00,$00,$00,$00,$00 ;; 00E4FB               ;
                      .db $EC,$EC,$EE,$EE,$DA,$DA,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $DA,$DA,$DA,$DA,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E51C:          .db $08,$08,$08,$08,$08,$08,$08,$08 ;; 00E51C               ;
                      .db $09,$09,$09,$09,$0B,$0B,$0B,$0B ;; ?QPWZ?               ;
                      .db $0B,$0B,$0B,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $0B,$0B,$0B,$0B,$14,$14,$14,$14 ;; ?QPWZ?               ;
                      .db $06                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E53D:          .db $FF,$FF,$FF,$FF,$01,$01,$01,$01 ;; 00E53D               ;
                      .db $FE,$FE,$02,$02,$FD,$03,$FD,$03 ;; ?QPWZ?               ;
                      .db $FD,$03,$FD,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $08,$08,$F8,$F8,$FC,$FC,$04,$04 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$01,$01 ;; ?QPWZ?               ;
                      .db $01,$01,$01,$02,$02,$02,$02,$02 ;; ?QPWZ?               ;
                      .db $03,$03,$03,$03,$03,$04,$04,$04 ;; ?QPWZ?               ;
                      .db $04,$04,$05,$05,$05,$05,$05,$06 ;; ?QPWZ?               ;
                      .db $06,$06,$06,$06,$07,$07,$07,$07 ;; ?QPWZ?               ;
                      .db $07,$08,$08,$08,$08,$08,$09,$09 ;; ?QPWZ?               ;
                      .db $09,$09,$09,$0A,$0A,$0A,$0A,$0A ;; ?QPWZ?               ;
                      .db $0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C ;; ?QPWZ?               ;
                      .db $0C,$0C,$0D,$0D,$0D,$0D,$0D,$0E ;; ?QPWZ?               ;
                      .db $0F,$10,$11,$03,$03,$04,$04,$09 ;; ?QPWZ?               ;
                      .db $09,$0A,$0A,$0C,$0C,$0D,$0D,$12 ;; ?QPWZ?               ;
                      .db $13,$14,$15,$16,$17,$1C,$1D,$1E ;; ?QPWZ?               ;
                      .db $1F,$18,$19,$1A,$1B,$08,$09,$0A ;; ?QPWZ?               ;
                      .db $0B,$0C,$0D,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $01,$01,$01,$01,$01,$02,$02,$02 ;; ?QPWZ?               ;
                      .db $02,$02,$03,$03,$03,$03,$03,$04 ;; ?QPWZ?               ;
                      .db $04,$04,$04,$04,$05,$05,$05,$05 ;; ?QPWZ?               ;
                      .db $05,$06,$06,$06,$06,$06,$07,$07 ;; ?QPWZ?               ;
                      .db $07,$07,$07,$08,$08,$08,$08,$08 ;; ?QPWZ?               ;
                      .db $09,$09,$09,$09,$09,$0A,$0A,$0A ;; ?QPWZ?               ;
                      .db $0A,$0A,$0B,$0B,$0B,$0B,$0B,$0C ;; ?QPWZ?               ;
                      .db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D ;; ?QPWZ?               ;
                      .db $0D,$0E,$0F,$10,$11,$03,$03,$04 ;; ?QPWZ?               ;
                      .db $04,$09,$09,$0A,$0A,$0C,$0C,$0D ;; ?QPWZ?               ;
                      .db $0D,$0C,$0D,$0D,$0C,$16,$17,$1C ;; ?QPWZ?               ;
                      .db $1D,$1E,$1F,$18,$19,$1A,$1B,$08 ;; ?QPWZ?               ;
                      .db $09,$0A,$0B,$0C,$0D             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E632:          .db $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E ;; 00E632               ;
                      .db $0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C ;; ?QPWZ?               ;
                      .db $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A ;; ?QPWZ?               ;
                      .db $09,$09,$09,$09,$08,$08,$08,$08 ;; ?QPWZ?               ;
                      .db $07,$07,$07,$07,$06,$06,$06,$06 ;; ?QPWZ?               ;
                      .db $05,$05,$05,$05,$04,$04,$04,$04 ;; ?QPWZ?               ;
                      .db $03,$03,$03,$03,$02,$02,$02,$02 ;; ?QPWZ?               ;
                      .db $01,$01,$01,$01,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$01,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $02,$02,$02,$02,$03,$03,$03,$03 ;; ?QPWZ?               ;
                      .db $04,$04,$04,$04,$05,$05,$05,$05 ;; ?QPWZ?               ;
                      .db $06,$06,$06,$06,$07,$07,$07,$07 ;; ?QPWZ?               ;
                      .db $08,$08,$08,$08,$09,$09,$09,$09 ;; ?QPWZ?               ;
                      .db $0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B ;; ?QPWZ?               ;
                      .db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D ;; ?QPWZ?               ;
                      .db $0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F ;; ?QPWZ?               ;
                      .db $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C ;; ?QPWZ?               ;
                      .db $0B,$0B,$0A,$0A,$09,$09,$08,$08 ;; ?QPWZ?               ;
                      .db $07,$07,$06,$06,$05,$05,$04,$04 ;; ?QPWZ?               ;
                      .db $03,$03,$02,$02,$01,$01,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$01,$01,$02,$02,$03,$03 ;; ?QPWZ?               ;
                      .db $04,$04,$05,$05,$06,$06,$07,$07 ;; ?QPWZ?               ;
                      .db $08,$08,$09,$09,$0A,$0A,$0B,$0B ;; ?QPWZ?               ;
                      .db $0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F ;; ?QPWZ?               ;
                      .db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08 ;; ?QPWZ?               ;
                      .db $07,$06,$05,$04,$03,$02,$01,$00 ;; ?QPWZ?               ;
                      .db $00,$01,$02,$03,$04,$05,$06,$07 ;; ?QPWZ?               ;
                      .db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F ;; ?QPWZ?               ;
                      .db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08 ;; ?QPWZ?               ;
                      .db $07,$06,$05,$04,$03,$02,$01,$00 ;; ?QPWZ?               ;
                      .db $00,$01,$02,$03,$04,$05,$06,$07 ;; ?QPWZ?               ;
                      .db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F ;; ?QPWZ?               ;
                      .db $08,$06,$04,$03,$02,$02,$01,$01 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$00,$00,$00,$00,$00,$00 ;; ?QPWZ?               ;
                      .db $01,$01,$02,$02,$03,$04,$06,$08 ;; ?QPWZ?               ;
                      .db $FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ;; ?QPWZ?               ;
                      .db $F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0 ;; ?QPWZ?               ;
                      .db $F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7 ;; ?QPWZ?               ;
                      .db $F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC ;; ?QPWZ?               ;
                      .db $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8 ;; ?QPWZ?               ;
                      .db $F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4 ;; ?QPWZ?               ;
                      .db $F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0 ;; ?QPWZ?               ;
                      .db $F0,$F0,$F1,$F1,$F2,$F2,$F3,$F3 ;; ?QPWZ?               ;
                      .db $F4,$F4,$F5,$F5,$F6,$F6,$F7,$F7 ;; ?QPWZ?               ;
                      .db $F8,$F8,$F9,$F9,$FA,$FA,$FB,$FB ;; ?QPWZ?               ;
                      .db $FC,$FC,$FD,$FD,$FE,$FE,$FF,$FF ;; ?QPWZ?               ;
                      .db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08 ;; ?QPWZ?               ;
                      .db $07,$06,$05,$04,$03,$02,$01,$00 ;; ?QPWZ?               ;
                      .db $00,$01,$02,$03,$04,$05,$06,$07 ;; ?QPWZ?               ;
                      .db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F ;; ?QPWZ?               ;
                      .db $00,$01,$02,$03,$04,$05,$06,$07 ;; ?QPWZ?               ;
                      .db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F ;; ?QPWZ?               ;
                      .db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08 ;; ?QPWZ?               ;
                      .db $07,$06,$05,$04,$03,$02,$01,$00 ;; ?QPWZ?               ;
                      .db $10,$10,$10,$10,$10,$10,$10,$10 ;; ?QPWZ?               ;
                      .db $0E,$0C,$0A,$08,$06,$04,$02,$00 ;; ?QPWZ?               ;
                      .db $0E,$0C,$0A,$08,$06,$04,$02,$00 ;; ?QPWZ?               ;
                      .db $FE,$FC,$FA,$F8,$F6,$F4,$F2,$F0 ;; ?QPWZ?               ;
                      .db $00,$02,$04,$06,$08,$0A,$0C,$0E ;; ?QPWZ?               ;
                      .db $10,$10,$10,$10,$10,$10,$10,$10 ;; ?QPWZ?               ;
                      .db $F0,$F2,$F4,$F6,$F8,$FA,$FC,$FE ;; ?QPWZ?               ;
                      .db $00,$02,$04,$06,$08,$0A         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E830:          .db $0C,$0E,$08,$00,$0E,$00,$0E,$00 ;; 00E830               ;
                      .db $08,$00,$05,$00,$0B,$00,$08,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$02,$00,$08,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $05,$00,$08,$00,$0E,$00,$0E,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$05,$00,$0B,$00,$08,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$02,$00,$08,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $05,$00,$08,$00,$0E,$00,$0E,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$05,$00,$0B,$00,$08,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$02,$00,$08,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $05,$00,$08,$00,$0E,$00,$0E,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$05,$00,$0B,$00,$08,$00 ;; ?QPWZ?               ;
                      .db $02,$00,$02,$00,$08,$00,$0B,$00 ;; ?QPWZ?               ;
                      .db $05,$00,$10,$00,$20,$00,$07,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$F0,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E89C:          .db $08,$00,$18,$00,$1A,$00,$16,$00 ;; 00E89C               ;
DATA_00E8A4:          .db $10,$00,$20,$00,$20,$00,$18,$00 ;; 00E8A4               ;
                      .db $1A,$00,$16,$00,$10,$00,$20,$00 ;; ?QPWZ?               ;
                      .db $20,$00,$12,$00,$1A,$00,$0F,$00 ;; ?QPWZ?               ;
                      .db $08,$00,$20,$00,$20,$00,$12,$00 ;; ?QPWZ?               ;
                      .db $1A,$00,$0F,$00,$08,$00,$20,$00 ;; ?QPWZ?               ;
                      .db $20,$00,$1D,$00,$28,$00,$19,$00 ;; ?QPWZ?               ;
                      .db $13,$00,$30,$00,$30,$00,$1D,$00 ;; ?QPWZ?               ;
                      .db $28,$00,$19,$00,$13,$00,$30,$00 ;; ?QPWZ?               ;
                      .db $30,$00,$1A,$00,$28,$00,$16,$00 ;; ?QPWZ?               ;
                      .db $10,$00,$30,$00,$30,$00,$1A,$00 ;; ?QPWZ?               ;
                      .db $28,$00,$16,$00,$10,$00,$30,$00 ;; ?QPWZ?               ;
                      .db $30,$00,$18,$00,$18,$00,$18,$00 ;; ?QPWZ?               ;
                      .db $18,$00,$18,$00,$18,$00         ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E90A:          .db $01,$02,$11                     ;; 00E90A               ;
                                                          ;;                      ;
DATA_00E90D:          .db $FF                             ;; 00E90D               ;
                                                          ;;                      ;
DATA_00E90E:          .db $FF,$01,$00                     ;; 00E90E               ;
                                                          ;;                      ;
DATA_00E911:          .db $02,$0D                         ;; 00E911               ;
                                                          ;;                      ;
DATA_00E913:          .db $01,$00,$FF,$FF,$01,$00,$01,$00 ;; 00E913               ;
                      .db $FF,$FF,$FF,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00E91F:          .db $00,$00,$00,$00,$FF,$FF,$01,$00 ;; 00E91F               ;
                      .db $FF,$FF,$01,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00E92B:          JSR.W CODE_00EAA6                   ;; 00E92B : 20 A6 EA    ;
CODE_00E92E:          LDA.W $185C                         ;; 00E92E : AD 5C 18    ;
CODE_00E931:          BEQ CODE_00E938                     ;; 00E931 : F0 05       ;
ADDR_00E933:          JSR.W CODE_00EE1D                   ;; 00E933 : 20 1D EE    ;
ADDR_00E936:          BRA CODE_00E98C                     ;; 00E936 : 80 54       ;
                                                          ;;                      ;
CODE_00E938:          LDA.W $13EF                         ;; 00E938 : AD EF 13    ;
CODE_00E93B:          STA $8D                             ;; 00E93B : 85 8D       ;
CODE_00E93D:          STZ.W $13EF                         ;; 00E93D : 9C EF 13    ;
CODE_00E940:          LDA RAM_IsFlying                    ;; 00E940 : A5 72       ;
CODE_00E942:          STA $8F                             ;; 00E942 : 85 8F       ;
CODE_00E944:          LDA RAM_IsVerticalLvl               ;; 00E944 : A5 5B       ;
CODE_00E946:          BPL CODE_00E978                     ;; 00E946 : 10 30       ;
CODE_00E948:          AND.B #$82                          ;; 00E948 : 29 82       ;
CODE_00E94A:          STA $8E                             ;; 00E94A : 85 8E       ;
CODE_00E94C:          LDA.B #$01                          ;; 00E94C : A9 01       ;
CODE_00E94E:          STA.W $1933                         ;; 00E94E : 8D 33 19    ;
CODE_00E951:          REP #$20                            ;; 00E951 : C2 20       ; Accum (16 bit) 
CODE_00E953:          LDA RAM_MarioXPos                   ;; 00E953 : A5 94       ;
CODE_00E955:          CLC                                 ;; 00E955 : 18          ;
CODE_00E956:          ADC $26                             ;; 00E956 : 65 26       ;
CODE_00E958:          STA RAM_MarioXPos                   ;; 00E958 : 85 94       ;
CODE_00E95A:          LDA RAM_MarioYPos                   ;; 00E95A : A5 96       ;
CODE_00E95C:          CLC                                 ;; 00E95C : 18          ;
CODE_00E95D:          ADC $28                             ;; 00E95D : 65 28       ;
CODE_00E95F:          STA RAM_MarioYPos                   ;; 00E95F : 85 96       ;
CODE_00E961:          SEP #$20                            ;; 00E961 : E2 20       ; Accum (8 bit) 
CODE_00E963:          JSR.W CODE_00EADB                   ;; 00E963 : 20 DB EA    ;
CODE_00E966:          REP #$20                            ;; 00E966 : C2 20       ; Accum (16 bit) 
CODE_00E968:          LDA RAM_MarioXPos                   ;; 00E968 : A5 94       ;
CODE_00E96A:          SEC                                 ;; 00E96A : 38          ;
CODE_00E96B:          SBC $26                             ;; 00E96B : E5 26       ;
CODE_00E96D:          STA RAM_MarioXPos                   ;; 00E96D : 85 94       ;
CODE_00E96F:          LDA RAM_MarioYPos                   ;; 00E96F : A5 96       ;
CODE_00E971:          SEC                                 ;; 00E971 : 38          ;
CODE_00E972:          SBC $28                             ;; 00E972 : E5 28       ;
CODE_00E974:          STA RAM_MarioYPos                   ;; 00E974 : 85 96       ;
CODE_00E976:          SEP #$20                            ;; 00E976 : E2 20       ; Accum (8 bit) 
CODE_00E978:          ASL.W $13EF                         ;; 00E978 : 0E EF 13    ;
CODE_00E97B:          LDA RAM_IsVerticalLvl               ;; 00E97B : A5 5B       ;
CODE_00E97D:          AND.B #$41                          ;; 00E97D : 29 41       ;
CODE_00E97F:          STA $8E                             ;; 00E97F : 85 8E       ;
CODE_00E981:          ASL                                 ;; 00E981 : 0A          ;
CODE_00E982:          BMI CODE_00E98C                     ;; 00E982 : 30 08       ;
CODE_00E984:          STZ.W $1933                         ;; 00E984 : 9C 33 19    ;
CODE_00E987:          ASL $8D                             ;; 00E987 : 06 8D       ;
CODE_00E989:          JSR.W CODE_00EADB                   ;; 00E989 : 20 DB EA    ;
CODE_00E98C:          LDA.W $1B96                         ;; 00E98C : AD 96 1B    ;
CODE_00E98F:          BEQ CODE_00E9A1                     ;; 00E98F : F0 10       ;
CODE_00E991:          REP #$20                            ;; 00E991 : C2 20       ; Accum (16 bit) 
CODE_00E993:          LDA $7E                             ;; 00E993 : A5 7E       ;
CODE_00E995:          CMP.W #$00FA                        ;; 00E995 : C9 FA 00    ;
CODE_00E998:          SEP #$20                            ;; 00E998 : E2 20       ; Accum (8 bit) 
CODE_00E99A:          BCC CODE_00E9FB                     ;; 00E99A : 90 5F       ;
CODE_00E99C:          JSL.L SubSideExit                   ;; 00E99C : 22 60 B1 05 ;
Return00E9A0:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00E9A1:          LDA $7E                             ;; 00E9A1 : A5 7E       ;
CODE_00E9A3:          CMP.B #$F0                          ;; 00E9A3 : C9 F0       ;
CODE_00E9A5:          BCS CODE_00EA08                     ;; 00E9A5 : B0 61       ;
CODE_00E9A7:          LDA RAM_MarioObjStatus              ;; 00E9A7 : A5 77       ;
CODE_00E9A9:          AND.B #$03                          ;; 00E9A9 : 29 03       ;
CODE_00E9AB:          BNE CODE_00E9FB                     ;; 00E9AB : D0 4E       ;
CODE_00E9AD:          REP #$20                            ;; 00E9AD : C2 20       ; Accum (16 bit) 
CODE_00E9AF:          LDY.B #$00                          ;; 00E9AF : A0 00       ;
CODE_00E9B1:          LDA.W $1462                         ;; 00E9B1 : AD 62 14    ;
CODE_00E9B4:          CLC                                 ;; 00E9B4 : 18          ;
CODE_00E9B5:          ADC.W #$00E8                        ;; 00E9B5 : 69 E8 00    ;
CODE_00E9B8:          CMP RAM_MarioXPos                   ;; 00E9B8 : C5 94       ;
CODE_00E9BA:          BEQ CODE_00E9C8                     ;; 00E9BA : F0 0C       ;
CODE_00E9BC:          BMI CODE_00E9C8                     ;; 00E9BC : 30 0A       ;
CODE_00E9BE:          INY                                 ;; 00E9BE : C8          ;
CODE_00E9BF:          LDA RAM_MarioXPos                   ;; 00E9BF : A5 94       ;
CODE_00E9C1:          SEC                                 ;; 00E9C1 : 38          ;
CODE_00E9C2:          SBC.W #$0008                        ;; 00E9C2 : E9 08 00    ;
CODE_00E9C5:          CMP.W $1462                         ;; 00E9C5 : CD 62 14    ;
CODE_00E9C8:          SEP #$20                            ;; 00E9C8 : E2 20       ; Accum (8 bit) 
CODE_00E9CA:          BEQ CODE_00E9FB                     ;; 00E9CA : F0 2F       ;
CODE_00E9CC:          BPL CODE_00E9FB                     ;; 00E9CC : 10 2D       ;
CODE_00E9CE:          LDA.W $1411                         ;; 00E9CE : AD 11 14    ;
CODE_00E9D1:          BNE CODE_00E9F6                     ;; 00E9D1 : D0 23       ;
CODE_00E9D3:          LDA.B #$80                          ;; 00E9D3 : A9 80       ;
CODE_00E9D5:          TSB RAM_MarioObjStatus              ;; 00E9D5 : 04 77       ;
CODE_00E9D7:          REP #$20                            ;; 00E9D7 : C2 20       ; Accum (16 bit) 
CODE_00E9D9:          LDA.W $1446                         ;; 00E9D9 : AD 46 14    ;
CODE_00E9DC:          LSR                                 ;; 00E9DC : 4A          ;
CODE_00E9DD:          LSR                                 ;; 00E9DD : 4A          ;
CODE_00E9DE:          LSR                                 ;; 00E9DE : 4A          ;
CODE_00E9DF:          LSR                                 ;; 00E9DF : 4A          ;
CODE_00E9E0:          SEP #$20                            ;; 00E9E0 : E2 20       ; Accum (8 bit) 
CODE_00E9E2:          STA $00                             ;; 00E9E2 : 85 00       ;
CODE_00E9E4:          SEC                                 ;; 00E9E4 : 38          ;
CODE_00E9E5:          SBC RAM_MarioSpeedX                 ;; 00E9E5 : E5 7B       ;
CODE_00E9E7:          EOR.W DATA_00E90E,Y                 ;; 00E9E7 : 59 0E E9    ;
CODE_00E9EA:          BMI CODE_00E9F6                     ;; 00E9EA : 30 0A       ;
CODE_00E9EC:          LDA $00                             ;; 00E9EC : A5 00       ;
CODE_00E9EE:          STA RAM_MarioSpeedX                 ;; 00E9EE : 85 7B       ;
CODE_00E9F0:          LDA.W $144E                         ;; 00E9F0 : AD 4E 14    ;
CODE_00E9F3:          STA.W $13DA                         ;; 00E9F3 : 8D DA 13    ;
CODE_00E9F6:          LDA.W DATA_00E90A,Y                 ;; 00E9F6 : B9 0A E9    ;
CODE_00E9F9:          TSB RAM_MarioObjStatus              ;; 00E9F9 : 04 77       ;
CODE_00E9FB:          LDA RAM_MarioObjStatus              ;; 00E9FB : A5 77       ;
CODE_00E9FD:          AND.B #$1C                          ;; 00E9FD : 29 1C       ;
CODE_00E9FF:          CMP.B #$1C                          ;; 00E9FF : C9 1C       ;
CODE_00EA01:          BNE CODE_00EA0D                     ;; 00EA01 : D0 0A       ;
CODE_00EA03:          LDA.W $1471                         ;; 00EA03 : AD 71 14    ;
CODE_00EA06:          BNE CODE_00EA0D                     ;; 00EA06 : D0 05       ;
CODE_00EA08:          JSR.W CODE_00F629                   ;; 00EA08 : 20 29 F6    ;
CODE_00EA0B:          BRA CODE_00EA32                     ;; 00EA0B : 80 25       ;
                                                          ;;                      ;
CODE_00EA0D:          LDA RAM_MarioObjStatus              ;; 00EA0D : A5 77       ;
CODE_00EA0F:          AND.B #$03                          ;; 00EA0F : 29 03       ;
CODE_00EA11:          BEQ CODE_00EA34                     ;; 00EA11 : F0 21       ;
CODE_00EA13:          AND.B #$02                          ;; 00EA13 : 29 02       ;
CODE_00EA15:          TAY                                 ;; 00EA15 : A8          ;
CODE_00EA16:          REP #$20                            ;; 00EA16 : C2 20       ; Accum (16 bit) 
CODE_00EA18:          LDA RAM_MarioXPos                   ;; 00EA18 : A5 94       ;
CODE_00EA1A:          CLC                                 ;; 00EA1A : 18          ;
CODE_00EA1B:          ADC.W DATA_00E90D,Y                 ;; 00EA1B : 79 0D E9    ;
CODE_00EA1E:          STA RAM_MarioXPos                   ;; 00EA1E : 85 94       ;
CODE_00EA20:          SEP #$20                            ;; 00EA20 : E2 20       ; Accum (8 bit) 
CODE_00EA22:          LDA RAM_MarioObjStatus              ;; 00EA22 : A5 77       ;
CODE_00EA24:          BMI CODE_00EA34                     ;; 00EA24 : 30 0E       ;
CODE_00EA26:          LDA.B #$03                          ;; 00EA26 : A9 03       ;
CODE_00EA28:          STA.W $13E5                         ;; 00EA28 : 8D E5 13    ;
CODE_00EA2B:          LDA RAM_MarioSpeedX                 ;; 00EA2B : A5 7B       ;
CODE_00EA2D:          EOR.W DATA_00E90D,Y                 ;; 00EA2D : 59 0D E9    ;
CODE_00EA30:          BPL CODE_00EA34                     ;; 00EA30 : 10 02       ;
CODE_00EA32:          STZ RAM_MarioSpeedX                 ;; 00EA32 : 64 7B       ;
CODE_00EA34:          LDA.W RAM_IsBehindScenery           ;; 00EA34 : AD F9 13    ;
CODE_00EA37:          CMP.B #$01                          ;; 00EA37 : C9 01       ;
CODE_00EA39:          BNE CODE_00EA42                     ;; 00EA39 : D0 07       ;
CODE_00EA3B:          LDA $8B                             ;; 00EA3B : A5 8B       ;
CODE_00EA3D:          BNE CODE_00EA42                     ;; 00EA3D : D0 03       ;
CODE_00EA3F:          STZ.W RAM_IsBehindScenery           ;; 00EA3F : 9C F9 13    ;
CODE_00EA42:          STZ.W $13FA                         ;; 00EA42 : 9C FA 13    ;
CODE_00EA45:          LDA RAM_IsWaterLevel                ;; 00EA45 : A5 85       ;
CODE_00EA47:          BNE CODE_00EA5E                     ;; 00EA47 : D0 15       ;
CODE_00EA49:          LSR $8A                             ;; 00EA49 : 46 8A       ;
CODE_00EA4B:          BCC CODE_00EAA3                     ;; 00EA4B : 90 56       ;
CODE_00EA4D:          LDA RAM_IsSwimming                  ;; 00EA4D : A5 75       ;
CODE_00EA4F:          BNE CODE_00EA65                     ;; 00EA4F : D0 14       ;
CODE_00EA51:          LDA RAM_MarioSpeedY                 ;; 00EA51 : A5 7D       ;
CODE_00EA53:          BMI CODE_00EA65                     ;; 00EA53 : 30 10       ;
CODE_00EA55:          LSR $8A                             ;; 00EA55 : 46 8A       ;
CODE_00EA57:          BCC Return00EAA5                    ;; 00EA57 : 90 4C       ;
CODE_00EA59:          JSR.W CODE_00FDA5                   ;; 00EA59 : 20 A5 FD    ;
CODE_00EA5C:          STZ RAM_MarioSpeedY                 ;; 00EA5C : 64 7D       ;
CODE_00EA5E:          LDA.B #$01                          ;; 00EA5E : A9 01       ;
CODE_00EA60:          STA RAM_IsSwimming                  ;; 00EA60 : 85 75       ;
CODE_00EA62:          JMP.W CODE_00FD08                   ;; 00EA62 : 4C 08 FD    ;
                                                          ;;                      ;
CODE_00EA65:          LSR $8A                             ;; 00EA65 : 46 8A       ;
CODE_00EA67:          BCS CODE_00EA5E                     ;; 00EA67 : B0 F5       ;
CODE_00EA69:          LDA RAM_IsSwimming                  ;; 00EA69 : A5 75       ;
CODE_00EA6B:          BEQ Return00EAA5                    ;; 00EA6B : F0 38       ;
CODE_00EA6D:          LDA.B #$FC                          ;; 00EA6D : A9 FC       ;
CODE_00EA6F:          CMP RAM_MarioSpeedY                 ;; 00EA6F : C5 7D       ;
CODE_00EA71:          BMI CODE_00EA75                     ;; 00EA71 : 30 02       ;
CODE_00EA73:          STA RAM_MarioSpeedY                 ;; 00EA73 : 85 7D       ;
CODE_00EA75:          INC.W $13FA                         ;; 00EA75 : EE FA 13    ;
CODE_00EA78:          LDA RAM_ControllerA                 ;; 00EA78 : A5 15       ;
CODE_00EA7A:          AND.B #$88                          ;; 00EA7A : 29 88       ;
CODE_00EA7C:          CMP.B #$88                          ;; 00EA7C : C9 88       ;
CODE_00EA7E:          BNE CODE_00EA62                     ;; 00EA7E : D0 E2       ;
CODE_00EA80:          LDA RAM_ControllerB                 ;; 00EA80 : A5 17       ;
CODE_00EA82:          BPL CODE_00EA92                     ;; 00EA82 : 10 0E       ;
CODE_00EA84:          LDA.W $148F                         ;; 00EA84 : AD 8F 14    ;
CODE_00EA87:          BNE CODE_00EA92                     ;; 00EA87 : D0 09       ;
CODE_00EA89:          INC A                               ;; 00EA89 : 1A          ;
CODE_00EA8A:          STA.W RAM_IsSpinJump                ;; 00EA8A : 8D 0D 14    ;
CODE_00EA8D:          LDA.B #$04                          ;; 00EA8D : A9 04       ; \ Play sound effect 
CODE_00EA8F:          STA.W $1DFC                         ;; 00EA8F : 8D FC 1D    ; / 
CODE_00EA92:          LDA RAM_MarioObjStatus              ;; 00EA92 : A5 77       ;
CODE_00EA94:          AND.B #$08                          ;; 00EA94 : 29 08       ;
CODE_00EA96:          BNE CODE_00EA62                     ;; 00EA96 : D0 CA       ;
CODE_00EA98:          JSR.W CODE_00FDA5                   ;; 00EA98 : 20 A5 FD    ;
CODE_00EA9B:          LDA.B #$0B                          ;; 00EA9B : A9 0B       ;
CODE_00EA9D:          STA RAM_IsFlying                    ;; 00EA9D : 85 72       ;
CODE_00EA9F:          LDA.B #$AA                          ;; 00EA9F : A9 AA       ;
CODE_00EAA1:          STA RAM_MarioSpeedY                 ;; 00EAA1 : 85 7D       ;
CODE_00EAA3:          STZ RAM_IsSwimming                  ;; 00EAA3 : 64 75       ;
Return00EAA5:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EAA6:          STZ.W $13E5                         ;; 00EAA6 : 9C E5 13    ;
CODE_00EAA9:          STZ RAM_MarioObjStatus              ;; 00EAA9 : 64 77       ;
CODE_00EAAB:          STZ.W $13E1                         ;; 00EAAB : 9C E1 13    ;
CODE_00EAAE:          STZ.W $13EE                         ;; 00EAAE : 9C EE 13    ;
CODE_00EAB1:          STZ $8A                             ;; 00EAB1 : 64 8A       ;
CODE_00EAB3:          STZ $8B                             ;; 00EAB3 : 64 8B       ;
CODE_00EAB5:          STZ.W $140E                         ;; 00EAB5 : 9C 0E 14    ;
Return00EAB8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00EAB9:          .db $DE,$23                         ;; 00EAB9               ;
                                                          ;;                      ;
DATA_00EABB:          .db $20,$E0                         ;; 00EABB               ;
                                                          ;;                      ;
DATA_00EABD:          .db $08,$00,$F8,$FF                 ;; 00EABD               ;
                                                          ;;                      ;
DATA_00EAC1:          .db $71,$72,$76,$77,$7B,$7C,$81,$86 ;; 00EAC1               ;
                      .db $8A,$8B,$8F,$90,$94,$95,$99,$9A ;; ?QPWZ?               ;
                      .db $9E,$9F,$A3,$A4,$A8,$A9,$AD,$AE ;; ?QPWZ?               ;
                      .db $B2,$B3                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00EADB:          LDA RAM_MarioYPos                   ;; 00EADB : A5 96       ;
CODE_00EADD:          AND.B #$0F                          ;; 00EADD : 29 0F       ;
CODE_00EADF:          STA $90                             ;; 00EADF : 85 90       ;
CODE_00EAE1:          LDA.W RAM_WallWalkStatus            ;; 00EAE1 : AD E3 13    ;
CODE_00EAE4:          BNE CODE_00EAE9                     ;; 00EAE4 : D0 03       ;
CODE_00EAE6:          JMP.W CODE_00EB77                   ;; 00EAE6 : 4C 77 EB    ;
                                                          ;;                      ;
CODE_00EAE9:          AND.B #$01                          ;; 00EAE9 : 29 01       ;
CODE_00EAEB:          TAY                                 ;; 00EAEB : A8          ;
CODE_00EAEC:          LDA RAM_MarioSpeedX                 ;; 00EAEC : A5 7B       ;
CODE_00EAEE:          SEC                                 ;; 00EAEE : 38          ;
CODE_00EAEF:          SBC.W DATA_00EAB9,Y                 ;; 00EAEF : F9 B9 EA    ;
CODE_00EAF2:          EOR.W DATA_00EAB9,Y                 ;; 00EAF2 : 59 B9 EA    ;
CODE_00EAF5:          BMI CODE_00EB48                     ;; 00EAF5 : 30 51       ;
CODE_00EAF7:          LDA RAM_IsFlying                    ;; 00EAF7 : A5 72       ;
CODE_00EAF9:          ORA.W $148F                         ;; 00EAF9 : 0D 8F 14    ;
CODE_00EAFC:          ORA RAM_IsDucking                   ;; 00EAFC : 05 73       ;
CODE_00EAFE:          ORA.W RAM_OnYoshi                   ;; 00EAFE : 0D 7A 18    ;
CODE_00EB01:          BNE CODE_00EB48                     ;; 00EB01 : D0 45       ;
CODE_00EB03:          LDA.W RAM_WallWalkStatus            ;; 00EB03 : AD E3 13    ;
CODE_00EB06:          CMP.B #$06                          ;; 00EB06 : C9 06       ;
CODE_00EB08:          BCS CODE_00EB22                     ;; 00EB08 : B0 18       ;
CODE_00EB0A:          LDX $90                             ;; 00EB0A : A6 90       ;
CODE_00EB0C:          CPX.B #$08                          ;; 00EB0C : E0 08       ;
CODE_00EB0E:          BCC Return00EB76                    ;; 00EB0E : 90 66       ;
CODE_00EB10:          CMP.B #$04                          ;; 00EB10 : C9 04       ;
CODE_00EB12:          BCS CODE_00EB73                     ;; 00EB12 : B0 5F       ;
CODE_00EB14:          ORA.B #$04                          ;; 00EB14 : 09 04       ;
CODE_00EB16:          STA.W RAM_WallWalkStatus            ;; 00EB16 : 8D E3 13    ;
CODE_00EB19:          LDA RAM_MarioXPos                   ;; 00EB19 : A5 94       ;
CODE_00EB1B:          AND.B #$F0                          ;; 00EB1B : 29 F0       ;
CODE_00EB1D:          ORA.B #$08                          ;; 00EB1D : 09 08       ;
CODE_00EB1F:          STA RAM_MarioXPos                   ;; 00EB1F : 85 94       ;
Return00EB21:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EB22:          LDX.B #$60                          ;; 00EB22 : A2 60       ;
CODE_00EB24:          TYA                                 ;; 00EB24 : 98          ;
CODE_00EB25:          BEQ CODE_00EB29                     ;; 00EB25 : F0 02       ;
CODE_00EB27:          LDX.B #$66                          ;; 00EB27 : A2 66       ;
CODE_00EB29:          JSR.W CODE_00EFE8                   ;; 00EB29 : 20 E8 EF    ;
CODE_00EB2C:          LDA RAM_MarioPowerUp                ;; 00EB2C : A5 19       ;
CODE_00EB2E:          BNE CODE_00EB34                     ;; 00EB2E : D0 04       ;
CODE_00EB30:          INX                                 ;; 00EB30 : E8          ;
CODE_00EB31:          INX                                 ;; 00EB31 : E8          ;
CODE_00EB32:          BRA CODE_00EB37                     ;; 00EB32 : 80 03       ;
                                                          ;;                      ;
CODE_00EB34:          JSR.W CODE_00EFE8                   ;; 00EB34 : 20 E8 EF    ;
CODE_00EB37:          JSR.W CODE_00F44D                   ;; 00EB37 : 20 4D F4    ;
CODE_00EB3A:          BNE CODE_00EB19                     ;; 00EB3A : D0 DD       ;
CODE_00EB3C:          LDA.B #$02                          ;; 00EB3C : A9 02       ;
CODE_00EB3E:          TRB.W RAM_WallWalkStatus            ;; 00EB3E : 1C E3 13    ;
Return00EB41:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
ADDR_00EB42:          LDA.W RAM_WallWalkStatus            ;; 00EB42 : AD E3 13    ;
ADDR_00EB45:          AND.B #$01                          ;; 00EB45 : 29 01       ;
ADDR_00EB47:          TAY                                 ;; 00EB47 : A8          ;
CODE_00EB48:          LDA.W DATA_00EABB,Y                 ;; 00EB48 : B9 BB EA    ;
CODE_00EB4B:          STA RAM_MarioSpeedX                 ;; 00EB4B : 85 7B       ;
CODE_00EB4D:          TYA                                 ;; 00EB4D : 98          ;
CODE_00EB4E:          ASL                                 ;; 00EB4E : 0A          ;
CODE_00EB4F:          TAY                                 ;; 00EB4F : A8          ;
CODE_00EB50:          REP #$20                            ;; 00EB50 : C2 20       ; Accum (16 bit) 
CODE_00EB52:          LDA RAM_MarioXPos                   ;; 00EB52 : A5 94       ;
CODE_00EB54:          CLC                                 ;; 00EB54 : 18          ;
CODE_00EB55:          ADC.W DATA_00EABD,Y                 ;; 00EB55 : 79 BD EA    ;
CODE_00EB58:          STA RAM_MarioXPos                   ;; 00EB58 : 85 94       ;
CODE_00EB5A:          LDA.W #$0008                        ;; 00EB5A : A9 08 00    ;
CODE_00EB5D:          LDY RAM_MarioPowerUp                ;; 00EB5D : A4 19       ;
CODE_00EB5F:          BEQ CODE_00EB64                     ;; 00EB5F : F0 03       ;
CODE_00EB61:          LDA.W #$0010                        ;; 00EB61 : A9 10 00    ;
CODE_00EB64:          CLC                                 ;; 00EB64 : 18          ;
CODE_00EB65:          ADC RAM_MarioYPos                   ;; 00EB65 : 65 96       ;
CODE_00EB67:          STA RAM_MarioYPos                   ;; 00EB67 : 85 96       ;
CODE_00EB69:          SEP #$20                            ;; 00EB69 : E2 20       ; Accum (8 bit) 
CODE_00EB6B:          LDA.B #$24                          ;; 00EB6B : A9 24       ;
CODE_00EB6D:          STA RAM_IsFlying                    ;; 00EB6D : 85 72       ;
CODE_00EB6F:          LDA.B #$E0                          ;; 00EB6F : A9 E0       ;
CODE_00EB71:          STA RAM_MarioSpeedY                 ;; 00EB71 : 85 7D       ;
CODE_00EB73:          STZ.W RAM_WallWalkStatus            ;; 00EB73 : 9C E3 13    ;
Return00EB76:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EB77:          LDX.B #$00                          ;; 00EB77 : A2 00       ;
CODE_00EB79:          LDA RAM_MarioPowerUp                ;; 00EB79 : A5 19       ;
CODE_00EB7B:          BEQ CODE_00EB83                     ;; 00EB7B : F0 06       ;
CODE_00EB7D:          LDA RAM_IsDucking                   ;; 00EB7D : A5 73       ;
CODE_00EB7F:          BNE CODE_00EB83                     ;; 00EB7F : D0 02       ;
CODE_00EB81:          LDX.B #$18                          ;; 00EB81 : A2 18       ;
CODE_00EB83:          LDA.W RAM_OnYoshi                   ;; 00EB83 : AD 7A 18    ;
CODE_00EB86:          BEQ CODE_00EB8D                     ;; 00EB86 : F0 05       ;
CODE_00EB88:          TXA                                 ;; 00EB88 : 8A          ;
CODE_00EB89:          CLC                                 ;; 00EB89 : 18          ;
CODE_00EB8A:          ADC.B #$30                          ;; 00EB8A : 69 30       ;
CODE_00EB8C:          TAX                                 ;; 00EB8C : AA          ;
CODE_00EB8D:          LDA RAM_MarioXPos                   ;; 00EB8D : A5 94       ;
CODE_00EB8F:          AND.B #$0F                          ;; 00EB8F : 29 0F       ;
CODE_00EB91:          TAY                                 ;; 00EB91 : A8          ;
CODE_00EB92:          CLC                                 ;; 00EB92 : 18          ;
CODE_00EB93:          ADC.B #$08                          ;; 00EB93 : 69 08       ;
CODE_00EB95:          AND.B #$0F                          ;; 00EB95 : 29 0F       ;
CODE_00EB97:          STA $92                             ;; 00EB97 : 85 92       ;
CODE_00EB99:          STZ $93                             ;; 00EB99 : 64 93       ;
CODE_00EB9B:          CPY.B #$08                          ;; 00EB9B : C0 08       ;
CODE_00EB9D:          BCC CODE_00EBA5                     ;; 00EB9D : 90 06       ;
CODE_00EB9F:          TXA                                 ;; 00EB9F : 8A          ;
CODE_00EBA0:          ADC.B #$0B                          ;; 00EBA0 : 69 0B       ;
CODE_00EBA2:          TAX                                 ;; 00EBA2 : AA          ;
CODE_00EBA3:          INC $93                             ;; 00EBA3 : E6 93       ;
CODE_00EBA5:          LDA $90                             ;; 00EBA5 : A5 90       ;
CODE_00EBA7:          CLC                                 ;; 00EBA7 : 18          ;
CODE_00EBA8:          ADC.W DATA_00E8A4,X                 ;; 00EBA8 : 7D A4 E8    ;
CODE_00EBAB:          AND.B #$0F                          ;; 00EBAB : 29 0F       ;
CODE_00EBAD:          STA $91                             ;; 00EBAD : 85 91       ;
CODE_00EBAF:          JSR.W CODE_00F44D                   ;; 00EBAF : 20 4D F4    ;
CODE_00EBB2:          BEQ CODE_00EBDD                     ;; 00EBB2 : F0 29       ;
CODE_00EBB4:          CPY.B #$11                          ;; 00EBB4 : C0 11       ;
CODE_00EBB6:          BCC CODE_00EC24                     ;; 00EBB6 : 90 6C       ;
CODE_00EBB8:          CPY.B #$6E                          ;; 00EBB8 : C0 6E       ;
CODE_00EBBA:          BCC CODE_00EBC9                     ;; 00EBBA : 90 0D       ;
CODE_00EBBC:          TYA                                 ;; 00EBBC : 98          ;
CODE_00EBBD:          JSL.L CODE_00F04D                   ;; 00EBBD : 22 4D F0 00 ;
CODE_00EBC1:          BCC CODE_00EC24                     ;; 00EBC1 : 90 61       ;
ADDR_00EBC3:          LDA.B #$01                          ;; 00EBC3 : A9 01       ;
ADDR_00EBC5:          TSB $8A                             ;; 00EBC5 : 04 8A       ;
ADDR_00EBC7:          BRA CODE_00EC24                     ;; 00EBC7 : 80 5B       ;
                                                          ;;                      ;
CODE_00EBC9:          INX                                 ;; 00EBC9 : E8          ;
CODE_00EBCA:          INX                                 ;; 00EBCA : E8          ;
CODE_00EBCB:          INX                                 ;; 00EBCB : E8          ;
CODE_00EBCC:          INX                                 ;; 00EBCC : E8          ;
CODE_00EBCD:          TYA                                 ;; 00EBCD : 98          ;
CODE_00EBCE:          LDY.B #$00                          ;; 00EBCE : A0 00       ;
CODE_00EBD0:          CMP.B #$1E                          ;; 00EBD0 : C9 1E       ;
CODE_00EBD2:          BEQ CODE_00EBDA                     ;; 00EBD2 : F0 06       ;
CODE_00EBD4:          CMP.B #$52                          ;; 00EBD4 : C9 52       ;
CODE_00EBD6:          BEQ CODE_00EBDA                     ;; 00EBD6 : F0 02       ;
CODE_00EBD8:          LDY.B #$02                          ;; 00EBD8 : A0 02       ;
CODE_00EBDA:          JMP.W CODE_00EC6F                   ;; 00EBDA : 4C 6F EC    ;
                                                          ;;                      ;
CODE_00EBDD:          CPY.B #$9C                          ;; 00EBDD : C0 9C       ;
CODE_00EBDF:          BNE CODE_00EBE8                     ;; 00EBDF : D0 07       ;
CODE_00EBE1:          LDA.W $1931                         ;; 00EBE1 : AD 31 19    ;
CODE_00EBE4:          CMP.B #$01                          ;; 00EBE4 : C9 01       ;
CODE_00EBE6:          BEQ CODE_00EC06                     ;; 00EBE6 : F0 1E       ;
CODE_00EBE8:          CPY.B #$20                          ;; 00EBE8 : C0 20       ;
CODE_00EBEA:          BEQ CODE_00EC01                     ;; 00EBEA : F0 15       ;
CODE_00EBEC:          CPY.B #$1F                          ;; 00EBEC : C0 1F       ;
CODE_00EBEE:          BEQ CODE_00EBFD                     ;; 00EBEE : F0 0D       ;
CODE_00EBF0:          LDA.W RAM_BluePowTimer              ;; 00EBF0 : AD AD 14    ;
CODE_00EBF3:          BEQ CODE_00EC21                     ;; 00EBF3 : F0 2C       ;
CODE_00EBF5:          CPY.B #$28                          ;; 00EBF5 : C0 28       ;
CODE_00EBF7:          BEQ CODE_00EC01                     ;; 00EBF7 : F0 08       ;
CODE_00EBF9:          CPY.B #$27                          ;; 00EBF9 : C0 27       ;
CODE_00EBFB:          BNE CODE_00EC21                     ;; 00EBFB : D0 24       ;
CODE_00EBFD:          LDA RAM_MarioPowerUp                ;; 00EBFD : A5 19       ;
CODE_00EBFF:          BNE CODE_00EC24                     ;; 00EBFF : D0 23       ;
CODE_00EC01:          JSR.W CODE_00F443                   ;; 00EC01 : 20 43 F4    ;
CODE_00EC04:          BCS CODE_00EC24                     ;; 00EC04 : B0 1E       ;
CODE_00EC06:          LDA $8F                             ;; 00EC06 : A5 8F       ;
CODE_00EC08:          BNE CODE_00EC24                     ;; 00EC08 : D0 1A       ;
CODE_00EC0A:          LDA $16                             ;; 00EC0A : A5 16       ;
CODE_00EC0C:          AND.B #$08                          ;; 00EC0C : 29 08       ;
CODE_00EC0E:          BEQ CODE_00EC24                     ;; 00EC0E : F0 14       ;
CODE_00EC10:          LDA.B #$0F                          ;; 00EC10 : A9 0F       ; \ Play sound effect 
CODE_00EC12:          STA.W $1DFC                         ;; 00EC12 : 8D FC 1D    ; / 
CODE_00EC15:          JSR.W CODE_00D273                   ;; 00EC15 : 20 73 D2    ;
CODE_00EC18:          LDA.B #$0D                          ;; 00EC18 : A9 0D       ;
CODE_00EC1A:          STA RAM_MarioAnimation              ;; 00EC1A : 85 71       ;
CODE_00EC1C:          JSR.W NoButtons                     ;; 00EC1C : 20 2D F6    ;
CODE_00EC1F:          BRA CODE_00EC24                     ;; 00EC1F : 80 03       ;
                                                          ;;                      ;
CODE_00EC21:          JSR.W CODE_00F28C                   ;; 00EC21 : 20 8C F2    ;
CODE_00EC24:          JSR.W CODE_00F44D                   ;; 00EC24 : 20 4D F4    ;
CODE_00EC27:          BEQ CODE_00EC35                     ;; 00EC27 : F0 0C       ;
CODE_00EC29:          CPY.B #$11                          ;; 00EC29 : C0 11       ;
CODE_00EC2B:          BCC CODE_00EC3A                     ;; 00EC2B : 90 0D       ;
CODE_00EC2D:          CPY.B #$6E                          ;; 00EC2D : C0 6E       ;
CODE_00EC2F:          BCS CODE_00EC3A                     ;; 00EC2F : B0 09       ;
CODE_00EC31:          INX                                 ;; 00EC31 : E8          ;
CODE_00EC32:          INX                                 ;; 00EC32 : E8          ;
CODE_00EC33:          BRA CODE_00EC4E                     ;; 00EC33 : 80 19       ;
                                                          ;;                      ;
CODE_00EC35:          LDA.B #$10                          ;; 00EC35 : A9 10       ;
CODE_00EC37:          JSR.W CODE_00F2C9                   ;; 00EC37 : 20 C9 F2    ;
CODE_00EC3A:          JSR.W CODE_00F44D                   ;; 00EC3A : 20 4D F4    ;
CODE_00EC3D:          BNE CODE_00EC46                     ;; 00EC3D : D0 07       ;
CODE_00EC3F:          LDA.B #$08                          ;; 00EC3F : A9 08       ;
CODE_00EC41:          JSR.W CODE_00F2C9                   ;; 00EC41 : 20 C9 F2    ;
CODE_00EC44:          BRA CODE_00EC8A                     ;; 00EC44 : 80 44       ;
                                                          ;;                      ;
CODE_00EC46:          CPY.B #$11                          ;; 00EC46 : C0 11       ;
CODE_00EC48:          BCC CODE_00EC8A                     ;; 00EC48 : 90 40       ;
CODE_00EC4A:          CPY.B #$6E                          ;; 00EC4A : C0 6E       ;
CODE_00EC4C:          BCS CODE_00EC8A                     ;; 00EC4C : B0 3C       ;
CODE_00EC4E:          LDA RAM_MarioDirection              ;; 00EC4E : A5 76       ;
CODE_00EC50:          CMP $93                             ;; 00EC50 : C5 93       ;
CODE_00EC52:          BEQ CODE_00EC5F                     ;; 00EC52 : F0 0B       ;
CODE_00EC54:          JSR.W CODE_00F3C4                   ;; 00EC54 : 20 C4 F3    ;
CODE_00EC57:          PHX                                 ;; 00EC57 : DA          ;
CODE_00EC58:          JSR.W CODE_00F267                   ;; 00EC58 : 20 67 F2    ;
CODE_00EC5B:          LDY.W $1693                         ;; 00EC5B : AC 93 16    ; Current MAP16 tile number 
CODE_00EC5E:          PLX                                 ;; 00EC5E : FA          ;
CODE_00EC5F:          LDA.B #$03                          ;; 00EC5F : A9 03       ;
CODE_00EC61:          STA.W $13E5                         ;; 00EC61 : 8D E5 13    ;
CODE_00EC64:          LDY $93                             ;; 00EC64 : A4 93       ;
CODE_00EC66:          LDA RAM_MarioXPos                   ;; 00EC66 : A5 94       ;
CODE_00EC68:          AND.B #$0F                          ;; 00EC68 : 29 0F       ;
CODE_00EC6A:          CMP.W DATA_00E911,Y                 ;; 00EC6A : D9 11 E9    ;
CODE_00EC6D:          BEQ CODE_00EC8A                     ;; 00EC6D : F0 1B       ;
CODE_00EC6F:          LDA.W $1402                         ;; 00EC6F : AD 02 14    ;
CODE_00EC72:          BEQ CODE_00EC7B                     ;; 00EC72 : F0 07       ;
CODE_00EC74:          LDA.W $1693                         ;; 00EC74 : AD 93 16    ;
CODE_00EC77:          CMP.B #$52                          ;; 00EC77 : C9 52       ;
CODE_00EC79:          BEQ CODE_00EC8A                     ;; 00EC79 : F0 0F       ;
CODE_00EC7B:          LDA.W DATA_00E90A,Y                 ;; 00EC7B : B9 0A E9    ;
CODE_00EC7E:          TSB RAM_MarioObjStatus              ;; 00EC7E : 04 77       ;
CODE_00EC80:          AND.B #$03                          ;; 00EC80 : 29 03       ;
CODE_00EC82:          TAY                                 ;; 00EC82 : A8          ;
CODE_00EC83:          LDA.W $1693                         ;; 00EC83 : AD 93 16    ; Current MAP16 tile number 
CODE_00EC86:          JSL.L CODE_00F127                   ;; 00EC86 : 22 27 F1 00 ;
CODE_00EC8A:          JSR.W CODE_00F44D                   ;; 00EC8A : 20 4D F4    ;
CODE_00EC8D:          BNE CODE_00ECB1                     ;; 00EC8D : D0 22       ;
CODE_00EC8F:          LDA.B #$02                          ;; 00EC8F : A9 02       ;
CODE_00EC91:          JSR.W CODE_00F2C2                   ;; 00EC91 : 20 C2 F2    ;
CODE_00EC94:          LDY RAM_MarioSpeedY                 ;; 00EC94 : A4 7D       ;
CODE_00EC96:          BPL CODE_00ECA3                     ;; 00EC96 : 10 0B       ;
CODE_00EC98:          LDA.W $1693                         ;; 00EC98 : AD 93 16    ; Current MAP16 tile number 
CODE_00EC9B:          CMP.B #$21                          ;; 00EC9B : C9 21       ;
CODE_00EC9D:          BCC CODE_00ECA3                     ;; 00EC9D : 90 04       ;
CODE_00EC9F:          CMP.B #$25                          ;; 00EC9F : C9 25       ;
CODE_00ECA1:          BCC CODE_00ECA6                     ;; 00ECA1 : 90 03       ;
CODE_00ECA3:          JMP.W CODE_00ED4A                   ;; 00ECA3 : 4C 4A ED    ;
                                                          ;;                      ;
CODE_00ECA6:          SEC                                 ;; 00ECA6 : 38          ;
CODE_00ECA7:          SBC.B #$04                          ;; 00ECA7 : E9 04       ;
CODE_00ECA9:          LDY.B #$00                          ;; 00ECA9 : A0 00       ;
CODE_00ECAB:          JSL.L CODE_00F17F                   ;; 00ECAB : 22 7F F1 00 ;
CODE_00ECAF:          BRA CODE_00ED0D                     ;; 00ECAF : 80 5C       ;
                                                          ;;                      ;
CODE_00ECB1:          CPY.B #$11                          ;; 00ECB1 : C0 11       ;
CODE_00ECB3:          BCC CODE_00ECA3                     ;; 00ECB3 : 90 EE       ;
CODE_00ECB5:          CPY.B #$6E                          ;; 00ECB5 : C0 6E       ;
CODE_00ECB7:          BCC CODE_00ECFA                     ;; 00ECB7 : 90 41       ;
CODE_00ECB9:          CPY.B #$D8                          ;; 00ECB9 : C0 D8       ;
CODE_00ECBB:          BCC CODE_00ECDA                     ;; 00ECBB : 90 1D       ;
CODE_00ECBD:          REP #$20                            ;; 00ECBD : C2 20       ; Accum (16 bit) 
CODE_00ECBF:          LDA RAM_BlockXLo                    ;; 00ECBF : A5 98       ;
CODE_00ECC1:          CLC                                 ;; 00ECC1 : 18          ;
CODE_00ECC2:          ADC.W #$0010                        ;; 00ECC2 : 69 10 00    ;
CODE_00ECC5:          STA RAM_BlockXLo                    ;; 00ECC5 : 85 98       ;
CODE_00ECC7:          JSR.W CODE_00F461                   ;; 00ECC7 : 20 61 F4    ;
CODE_00ECCA:          BEQ CODE_00ECF8                     ;; 00ECCA : F0 2C       ;
CODE_00ECCC:          CPY.B #$6E                          ;; 00ECCC : C0 6E       ;
CODE_00ECCE:          BCC CODE_00ED4A                     ;; 00ECCE : 90 7A       ;
CODE_00ECD0:          CPY.B #$D8                          ;; 00ECD0 : C0 D8       ;
CODE_00ECD2:          BCS CODE_00ED4A                     ;; 00ECD2 : B0 76       ;
CODE_00ECD4:          LDA $91                             ;; 00ECD4 : A5 91       ; Accum (8 bit) 
CODE_00ECD6:          SBC.B #$0F                          ;; 00ECD6 : E9 0F       ;
CODE_00ECD8:          STA $91                             ;; 00ECD8 : 85 91       ;
CODE_00ECDA:          TYA                                 ;; 00ECDA : 98          ;
CODE_00ECDB:          SEC                                 ;; 00ECDB : 38          ;
CODE_00ECDC:          SBC.B #$6E                          ;; 00ECDC : E9 6E       ;
CODE_00ECDE:          TAY                                 ;; 00ECDE : A8          ;
CODE_00ECDF:          REP #$20                            ;; 00ECDF : C2 20       ; Accum (16 bit) 
CODE_00ECE1:          LDA [$82],Y                         ;; 00ECE1 : B7 82       ;
CODE_00ECE3:          AND.W #$00FF                        ;; 00ECE3 : 29 FF 00    ;
CODE_00ECE6:          ASL                                 ;; 00ECE6 : 0A          ;
CODE_00ECE7:          ASL                                 ;; 00ECE7 : 0A          ;
CODE_00ECE8:          ASL                                 ;; 00ECE8 : 0A          ;
CODE_00ECE9:          ASL                                 ;; 00ECE9 : 0A          ;
CODE_00ECEA:          SEP #$20                            ;; 00ECEA : E2 20       ; Accum (8 bit) 
CODE_00ECEC:          ORA $92                             ;; 00ECEC : 05 92       ;
CODE_00ECEE:          REP #$10                            ;; 00ECEE : C2 10       ; Index (16 bit) 
CODE_00ECF0:          TAY                                 ;; 00ECF0 : A8          ;
CODE_00ECF1:          LDA.W DATA_00E632,Y                 ;; 00ECF1 : B9 32 E6    ;
CODE_00ECF4:          SEP #$10                            ;; 00ECF4 : E2 10       ; Index (8 bit) 
CODE_00ECF6:          BMI CODE_00ED0F                     ;; 00ECF6 : 30 17       ;
CODE_00ECF8:          BRA CODE_00ED4A                     ;; 00ECF8 : 80 50       ;
                                                          ;;                      ;
CODE_00ECFA:          LDA.B #$02                          ;; 00ECFA : A9 02       ;
CODE_00ECFC:          JSR.W CODE_00F3E9                   ;; 00ECFC : 20 E9 F3    ;
CODE_00ECFF:          TYA                                 ;; 00ECFF : 98          ;
CODE_00ED00:          LDY.B #$00                          ;; 00ED00 : A0 00       ;
CODE_00ED02:          JSL.L CODE_00F127                   ;; 00ED02 : 22 27 F1 00 ;
CODE_00ED06:          LDA.W $1693                         ;; 00ED06 : AD 93 16    ; Current MAP16 tile number 
CODE_00ED09:          CMP.B #$1E                          ;; 00ED09 : C9 1E       ; \ If block is turn block, branch to $ED3B 
CODE_00ED0B:          BEQ CODE_00ED3B                     ;; 00ED0B : F0 2E       ; /  
CODE_00ED0D:          LDA.B #$F0                          ;; 00ED0D : A9 F0       ;
CODE_00ED0F:          CLC                                 ;; 00ED0F : 18          ;
CODE_00ED10:          ADC $91                             ;; 00ED10 : 65 91       ;
CODE_00ED12:          BPL CODE_00ED4A                     ;; 00ED12 : 10 36       ;
CODE_00ED14:          CMP.B #$F9                          ;; 00ED14 : C9 F9       ;
CODE_00ED16:          BCS CODE_00ED28                     ;; 00ED16 : B0 10       ;
CODE_00ED18:          LDY RAM_IsFlying                    ;; 00ED18 : A4 72       ;
CODE_00ED1A:          BNE CODE_00ED28                     ;; 00ED1A : D0 0C       ;
CODE_00ED1C:          LDA RAM_MarioObjStatus              ;; 00ED1C : A5 77       ;
CODE_00ED1E:          AND.B #$FC                          ;; 00ED1E : 29 FC       ;
CODE_00ED20:          ORA.B #$09                          ;; 00ED20 : 09 09       ;
CODE_00ED22:          STA RAM_MarioObjStatus              ;; 00ED22 : 85 77       ;
CODE_00ED24:          STZ RAM_MarioSpeedX                 ;; 00ED24 : 64 7B       ;
CODE_00ED26:          BRA CODE_00ED3B                     ;; 00ED26 : 80 13       ;
                                                          ;;                      ;
CODE_00ED28:          LDY RAM_IsFlying                    ;; 00ED28 : A4 72       ;
CODE_00ED2A:          BEQ CODE_00ED37                     ;; 00ED2A : F0 0B       ;
CODE_00ED2C:          EOR.B #$FF                          ;; 00ED2C : 49 FF       ;
CODE_00ED2E:          CLC                                 ;; 00ED2E : 18          ;
CODE_00ED2F:          ADC RAM_MarioYPos                   ;; 00ED2F : 65 96       ;
CODE_00ED31:          STA RAM_MarioYPos                   ;; 00ED31 : 85 96       ;
CODE_00ED33:          BCC CODE_00ED37                     ;; 00ED33 : 90 02       ;
CODE_00ED35:          INC RAM_MarioYPosHi                 ;; 00ED35 : E6 97       ;
CODE_00ED37:          LDA.B #$08                          ;; 00ED37 : A9 08       ;
CODE_00ED39:          TSB RAM_MarioObjStatus              ;; 00ED39 : 04 77       ;
CODE_00ED3B:          LDA RAM_MarioSpeedY                 ;; 00ED3B : A5 7D       ;
CODE_00ED3D:          BPL CODE_00ED4A                     ;; 00ED3D : 10 0B       ;
CODE_00ED3F:          STZ RAM_MarioSpeedY                 ;; 00ED3F : 64 7D       ;
CODE_00ED41:          LDA.W $1DF9                         ;; 00ED41 : AD F9 1D    ; / Play sound effect 
CODE_00ED44:          BNE CODE_00ED4A                     ;; 00ED44 : D0 04       ;
CODE_00ED46:          INC A                               ;; 00ED46 : 1A          ;
CODE_00ED47:          STA.W $1DF9                         ;; 00ED47 : 8D F9 1D    ; / Play sound effect 
CODE_00ED4A:          JSR.W CODE_00F44D                   ;; 00ED4A : 20 4D F4    ;
CODE_00ED4D:          BNE CODE_00ED52                     ;; 00ED4D : D0 03       ;
CODE_00ED4F:          JMP.W CODE_00EDDB                   ;; 00ED4F : 4C DB ED    ;
                                                          ;;                      ;
CODE_00ED52:          CPY.B #$6E                          ;; 00ED52 : C0 6E       ;
CODE_00ED54:          BCS CODE_00ED5E                     ;; 00ED54 : B0 08       ;
CODE_00ED56:          LDA.B #$03                          ;; 00ED56 : A9 03       ;
CODE_00ED58:          JSR.W CODE_00F3E9                   ;; 00ED58 : 20 E9 F3    ;
CODE_00ED5B:          JMP.W CODE_00EDF7                   ;; 00ED5B : 4C F7 ED    ;
                                                          ;;                      ;
CODE_00ED5E:          CPY.B #$D8                          ;; 00ED5E : C0 D8       ;
CODE_00ED60:          BCC CODE_00ED86                     ;; 00ED60 : 90 24       ;
CODE_00ED62:          CPY.B #$FB                          ;; 00ED62 : C0 FB       ;
CODE_00ED64:          BCC CODE_00ED69                     ;; 00ED64 : 90 03       ;
CODE_00ED66:          JMP.W CODE_00F629                   ;; 00ED66 : 4C 29 F6    ;
                                                          ;;                      ;
CODE_00ED69:          REP #$20                            ;; 00ED69 : C2 20       ; Accum (16 bit) 
CODE_00ED6B:          LDA RAM_BlockXLo                    ;; 00ED6B : A5 98       ;
CODE_00ED6D:          SEC                                 ;; 00ED6D : 38          ;
CODE_00ED6E:          SBC.W #$0010                        ;; 00ED6E : E9 10 00    ;
CODE_00ED71:          STA RAM_BlockXLo                    ;; 00ED71 : 85 98       ;
CODE_00ED73:          JSR.W CODE_00F461                   ;; 00ED73 : 20 61 F4    ;
CODE_00ED76:          BEQ CODE_00EDE9                     ;; 00ED76 : F0 71       ;
CODE_00ED78:          CPY.B #$6E                          ;; 00ED78 : C0 6E       ;
CODE_00ED7A:          BCC CODE_00EDE9                     ;; 00ED7A : 90 6D       ;
CODE_00ED7C:          CPY.B #$D8                          ;; 00ED7C : C0 D8       ;
CODE_00ED7E:          BCS CODE_00EDE9                     ;; 00ED7E : B0 69       ;
CODE_00ED80:          LDA $90                             ;; 00ED80 : A5 90       ; Accum (8 bit) 
CODE_00ED82:          ADC.B #$10                          ;; 00ED82 : 69 10       ;
CODE_00ED84:          STA $90                             ;; 00ED84 : 85 90       ;
CODE_00ED86:          LDA.W $1931                         ;; 00ED86 : AD 31 19    ;
CODE_00ED89:          CMP.B #$03                          ;; 00ED89 : C9 03       ;
CODE_00ED8B:          BEQ CODE_00ED91                     ;; 00ED8B : F0 04       ;
CODE_00ED8D:          CMP.B #$0E                          ;; 00ED8D : C9 0E       ;
CODE_00ED8F:          BNE CODE_00ED95                     ;; 00ED8F : D0 04       ;
CODE_00ED91:          CPY.B #$D2                          ;; 00ED91 : C0 D2       ;
CODE_00ED93:          BCS CODE_00EDE9                     ;; 00ED93 : B0 54       ;
CODE_00ED95:          TYA                                 ;; 00ED95 : 98          ;
CODE_00ED96:          SEC                                 ;; 00ED96 : 38          ;
CODE_00ED97:          SBC.B #$6E                          ;; 00ED97 : E9 6E       ;
CODE_00ED99:          TAY                                 ;; 00ED99 : A8          ;
CODE_00ED9A:          LDA [$82],Y                         ;; 00ED9A : B7 82       ;
CODE_00ED9C:          PHA                                 ;; 00ED9C : 48          ;
CODE_00ED9D:          REP #$20                            ;; 00ED9D : C2 20       ; Accum (16 bit) 
CODE_00ED9F:          AND.W #$00FF                        ;; 00ED9F : 29 FF 00    ;
CODE_00EDA2:          ASL                                 ;; 00EDA2 : 0A          ;
CODE_00EDA3:          ASL                                 ;; 00EDA3 : 0A          ;
CODE_00EDA4:          ASL                                 ;; 00EDA4 : 0A          ;
CODE_00EDA5:          ASL                                 ;; 00EDA5 : 0A          ;
CODE_00EDA6:          SEP #$20                            ;; 00EDA6 : E2 20       ; Accum (8 bit) 
CODE_00EDA8:          ORA $92                             ;; 00EDA8 : 05 92       ;
CODE_00EDAA:          PHX                                 ;; 00EDAA : DA          ;
CODE_00EDAB:          REP #$10                            ;; 00EDAB : C2 10       ; Index (16 bit) 
CODE_00EDAD:          TAX                                 ;; 00EDAD : AA          ;
CODE_00EDAE:          LDA $90                             ;; 00EDAE : A5 90       ;
CODE_00EDB0:          SEC                                 ;; 00EDB0 : 38          ;
CODE_00EDB1:          SBC.W DATA_00E632,X                 ;; 00EDB1 : FD 32 E6    ;
CODE_00EDB4:          BPL CODE_00EDB9                     ;; 00EDB4 : 10 03       ;
CODE_00EDB6:          INC.W $13EF                         ;; 00EDB6 : EE EF 13    ;
CODE_00EDB9:          SEP #$10                            ;; 00EDB9 : E2 10       ; Index (8 bit) 
CODE_00EDBB:          PLX                                 ;; 00EDBB : FA          ;
CODE_00EDBC:          PLY                                 ;; 00EDBC : 7A          ;
CODE_00EDBD:          CMP.W DATA_00E51C,Y                 ;; 00EDBD : D9 1C E5    ;
CODE_00EDC0:          BCS CODE_00EDE9                     ;; 00EDC0 : B0 27       ;
CODE_00EDC2:          STA $91                             ;; 00EDC2 : 85 91       ;
CODE_00EDC4:          STZ $90                             ;; 00EDC4 : 64 90       ;
CODE_00EDC6:          JSR.W CODE_00F005                   ;; 00EDC6 : 20 05 F0    ;
CODE_00EDC9:          CPY.B #$1C                          ;; 00EDC9 : C0 1C       ;
CODE_00EDCB:          BCC CODE_00EDD5                     ;; 00EDCB : 90 08       ;
CODE_00EDCD:          LDA.B #$08                          ;; 00EDCD : A9 08       ;
CODE_00EDCF:          STA.W $14A1                         ;; 00EDCF : 8D A1 14    ;
CODE_00EDD2:          JMP.W CODE_00EED1                   ;; 00EDD2 : 4C D1 EE    ;
                                                          ;;                      ;
CODE_00EDD5:          JSR.W CODE_00EFBC                   ;; 00EDD5 : 20 BC EF    ;
CODE_00EDD8:          JMP.W CODE_00EE85                   ;; 00EDD8 : 4C 85 EE    ;
                                                          ;;                      ;
CODE_00EDDB:          CPY.B #$05                          ;; 00EDDB : C0 05       ;
CODE_00EDDD:          BNE CODE_00EDE4                     ;; 00EDDD : D0 05       ;
CODE_00EDDF:          JSR.W CODE_00F629                   ;; 00EDDF : 20 29 F6    ;
CODE_00EDE2:          BRA CODE_00EDE9                     ;; 00EDE2 : 80 05       ;
                                                          ;;                      ;
CODE_00EDE4:          LDA.B #$04                          ;; 00EDE4 : A9 04       ;
CODE_00EDE6:          JSR.W CODE_00F2C2                   ;; 00EDE6 : 20 C2 F2    ;
CODE_00EDE9:          JSR.W CODE_00F44D                   ;; 00EDE9 : 20 4D F4    ;
CODE_00EDEC:          BNE CODE_00EDF3                     ;; 00EDEC : D0 05       ;
CODE_00EDEE:          JSR.W CODE_00F309                   ;; 00EDEE : 20 09 F3    ;
CODE_00EDF1:          BRA CODE_00EE1D                     ;; 00EDF1 : 80 2A       ;
                                                          ;;                      ;
CODE_00EDF3:          CPY.B #$6E                          ;; 00EDF3 : C0 6E       ;
CODE_00EDF5:          BCS CODE_00EE1D                     ;; 00EDF5 : B0 26       ;
CODE_00EDF7:          LDA RAM_MarioSpeedY                 ;; 00EDF7 : A5 7D       ;
CODE_00EDF9:          BMI Return00EE39                    ;; 00EDF9 : 30 3E       ;
CODE_00EDFB:          LDA.W $1931                         ;; 00EDFB : AD 31 19    ;
CODE_00EDFE:          CMP.B #$03                          ;; 00EDFE : C9 03       ;
CODE_00EE00:          BEQ CODE_00EE06                     ;; 00EE00 : F0 04       ;
CODE_00EE02:          CMP.B #$0E                          ;; 00EE02 : C9 0E       ;
CODE_00EE04:          BNE CODE_00EE11                     ;; 00EE04 : D0 0B       ;
CODE_00EE06:          LDY.W $1693                         ;; 00EE06 : AC 93 16    ; $ED3B 
CODE_00EE09:          CPY.B #$59                          ;; 00EE09 : C0 59       ;
CODE_00EE0B:          BCC CODE_00EE11                     ;; 00EE0B : 90 04       ;
CODE_00EE0D:          CPY.B #$5C                          ;; 00EE0D : C0 5C       ;
CODE_00EE0F:          BCC CODE_00EE1D                     ;; 00EE0F : 90 0C       ;
CODE_00EE11:          LDA $90                             ;; 00EE11 : A5 90       ;
CODE_00EE13:          AND.B #$0F                          ;; 00EE13 : 29 0F       ;
CODE_00EE15:          STZ $90                             ;; 00EE15 : 64 90       ;
CODE_00EE17:          CMP.B #$08                          ;; 00EE17 : C9 08       ;
CODE_00EE19:          STA $91                             ;; 00EE19 : 85 91       ;
CODE_00EE1B:          BCC CODE_00EE3A                     ;; 00EE1B : 90 1D       ;
CODE_00EE1D:          LDA.W $1471                         ;; 00EE1D : AD 71 14    ; \ If Mario isn't on a sprite platform, 
CODE_00EE20:          BEQ CODE_00EE2D                     ;; 00EE20 : F0 0B       ; / branch to $EE2D 
CODE_00EE22:          LDA RAM_MarioSpeedY                 ;; 00EE22 : A5 7D       ; \ If Mario is moving up, 
CODE_00EE24:          BMI CODE_00EE2D                     ;; 00EE24 : 30 07       ; / branch to $EE2D 
CODE_00EE26:          STZ $8E                             ;; 00EE26 : 64 8E       ;
CODE_00EE28:          LDY.B #$20                          ;; 00EE28 : A0 20       ;
CODE_00EE2A:          JMP.W CODE_00EEE1                   ;; 00EE2A : 4C E1 EE    ;
                                                          ;;                      ;
CODE_00EE2D:          LDA RAM_MarioObjStatus              ;; 00EE2D : A5 77       ; \  
CODE_00EE2F:          AND.B #$04                          ;; 00EE2F : 29 04       ;  |If Mario is on an edge or in air, 
CODE_00EE31:          ORA RAM_IsFlying                    ;; 00EE31 : 05 72       ;  |branch to $EE39 
CODE_00EE33:          BNE Return00EE39                    ;; 00EE33 : D0 04       ; /  
CODE_00EE35:          LDA.B #$24                          ;; 00EE35 : A9 24       ; \ Set "In air" to x24 (falling) 
CODE_00EE37:          STA RAM_IsFlying                    ;; 00EE37 : 85 72       ; /  
Return00EE39:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EE3A:          LDY.W $1693                         ;; 00EE3A : AC 93 16    ; Current MAP16 tile number 
CODE_00EE3D:          LDA.W $1931                         ;; 00EE3D : AD 31 19    ; Tileset 
CODE_00EE40:          CMP.B #$02                          ;; 00EE40 : C9 02       ; \ If tileset is "Rope 1", 
CODE_00EE42:          BEQ CODE_00EE48                     ;; 00EE42 : F0 04       ; / branch to $EE48 
CODE_00EE44:          CMP.B #$08                          ;; 00EE44 : C9 08       ; \ If tileset isn't "Rope 3", 
CODE_00EE46:          BNE CODE_00EE57                     ;; 00EE46 : D0 0F       ; / branch to $EE57 
CODE_00EE48:          TYA                                 ;; 00EE48 : 98          ; \  
CODE_00EE49:          SEC                                 ;; 00EE49 : 38          ;  |If the current tile isn't Rope 3's "Conveyor rope", 
CODE_00EE4A:          SBC.B #$0C                          ;; 00EE4A : E9 0C       ;  |branch to $EE57 
CODE_00EE4C:          CMP.B #$02                          ;; 00EE4C : C9 02       ;  | 
CODE_00EE4E:          BCS CODE_00EE57                     ;; 00EE4E : B0 07       ; /  
ADDR_00EE50:          ASL                                 ;; 00EE50 : 0A          ;
ADDR_00EE51:          TAX                                 ;; 00EE51 : AA          ;
ADDR_00EE52:          JSR.W CODE_00EFCD                   ;; 00EE52 : 20 CD EF    ;
ADDR_00EE55:          BRA CODE_00EE83                     ;; 00EE55 : 80 2C       ;
                                                          ;;                      ;
CODE_00EE57:          JSR.W CODE_00F267                   ;; 00EE57 : 20 67 F2    ;
CODE_00EE5A:          LDY.B #$03                          ;; 00EE5A : A0 03       ;
CODE_00EE5C:          LDA.W $1693                         ;; 00EE5C : AD 93 16    ; Current MAP16 tile number 
CODE_00EE5F:          CMP.B #$1E                          ;; 00EE5F : C9 1E       ; \ If block isn't "Turn block", 
CODE_00EE61:          BNE CODE_00EE78                     ;; 00EE61 : D0 15       ; / branch to $EE78 
CODE_00EE63:          LDX $8F                             ;; 00EE63 : A6 8F       ;
CODE_00EE65:          BEQ CODE_00EE83                     ;; 00EE65 : F0 1C       ;
CODE_00EE67:          LDX RAM_MarioPowerUp                ;; 00EE67 : A6 19       ;
CODE_00EE69:          BEQ CODE_00EE83                     ;; 00EE69 : F0 18       ;
CODE_00EE6B:          LDX.W RAM_IsSpinJump                ;; 00EE6B : AE 0D 14    ;
CODE_00EE6E:          BEQ CODE_00EE83                     ;; 00EE6E : F0 13       ;
CODE_00EE70:          LDA.B #$21                          ;; 00EE70 : A9 21       ;
CODE_00EE72:          JSL.L CODE_00F17F                   ;; 00EE72 : 22 7F F1 00 ;
CODE_00EE76:          BRA CODE_00EE1D                     ;; 00EE76 : 80 A5       ;
                                                          ;;                      ;
CODE_00EE78:          CMP.B #$32                          ;; 00EE78 : C9 32       ; \ If block isn't "Brown block", 
CODE_00EE7A:          BNE CODE_00EE7F                     ;; 00EE7A : D0 03       ; / branch to $EE7F 
CODE_00EE7C:          STZ.W $1909                         ;; 00EE7C : 9C 09 19    ;
CODE_00EE7F:          JSL.L CODE_00F120                   ;; 00EE7F : 22 20 F1 00 ;
CODE_00EE83:          LDY.B #$20                          ;; 00EE83 : A0 20       ;
CODE_00EE85:          LDA RAM_MarioSpeedY                 ;; 00EE85 : A5 7D       ; \ If Mario isn't moving up, 
CODE_00EE87:          BPL CODE_00EE8F                     ;; 00EE87 : 10 06       ; / branch to $EE8F 
CODE_00EE89:          LDA $8D                             ;; 00EE89 : A5 8D       ;
CODE_00EE8B:          CMP.B #$02                          ;; 00EE8B : C9 02       ;
CODE_00EE8D:          BCC Return00EE39                    ;; 00EE8D : 90 AA       ;
CODE_00EE8F:          LDX.W $1423                         ;; 00EE8F : AE 23 14    ;
CODE_00EE92:          BEQ CODE_00EED1                     ;; 00EE92 : F0 3D       ;
CODE_00EE94:          DEX                                 ;; 00EE94 : CA          ;
CODE_00EE95:          TXA                                 ;; 00EE95 : 8A          ;
CODE_00EE96:          AND.B #$03                          ;; 00EE96 : 29 03       ;
CODE_00EE98:          BEQ CODE_00EEAA                     ;; 00EE98 : F0 10       ;
CODE_00EE9A:          CMP.B #$02                          ;; 00EE9A : C9 02       ;
CODE_00EE9C:          BCS CODE_00EED1                     ;; 00EE9C : B0 33       ;
CODE_00EE9E:          REP #$20                            ;; 00EE9E : C2 20       ; Accum (16 bit) 
CODE_00EEA0:          LDA RAM_BlockYLo                    ;; 00EEA0 : A5 9A       ;
CODE_00EEA2:          SEC                                 ;; 00EEA2 : 38          ;
CODE_00EEA3:          SBC.W #$0010                        ;; 00EEA3 : E9 10 00    ;
CODE_00EEA6:          STA RAM_BlockYLo                    ;; 00EEA6 : 85 9A       ;
CODE_00EEA8:          SEP #$20                            ;; 00EEA8 : E2 20       ; Accum (8 bit) 
CODE_00EEAA:          TXA                                 ;; 00EEAA : 8A          ;
CODE_00EEAB:          LSR                                 ;; 00EEAB : 4A          ;
CODE_00EEAC:          LSR                                 ;; 00EEAC : 4A          ;
CODE_00EEAD:          TAX                                 ;; 00EEAD : AA          ;
CODE_00EEAE:          LDA.W $1F27,X                       ;; 00EEAE : BD 27 1F    ; \ If switch block is already active, 
CODE_00EEB1:          BNE CODE_00EED1                     ;; 00EEB1 : D0 1E       ; / branch to $EED1 
CODE_00EEB3:          INC A                               ;; 00EEB3 : 1A          ; \ Activate switch block 
CODE_00EEB4:          STA.W $1F27,X                       ;; 00EEB4 : 9D 27 1F    ; /  
CODE_00EEB7:          STA.W $13D2                         ;; 00EEB7 : 8D D2 13    ;
CODE_00EEBA:          PHY                                 ;; 00EEBA : 5A          ;
CODE_00EEBB:          STX.W $191E                         ;; 00EEBB : 8E 1E 19    ;
CODE_00EEBE:          JSR.W FlatPalaceSwitch              ;; 00EEBE : 20 45 FA    ;
CODE_00EEC1:          PLY                                 ;; 00EEC1 : 7A          ;
CODE_00EEC2:          LDA.B #$0C                          ;; 00EEC2 : A9 0C       ;
CODE_00EEC4:          STA.W $1DFB                         ;; 00EEC4 : 8D FB 1D    ; / Change music 
CODE_00EEC7:          LDA.B #$FF                          ;; 00EEC7 : A9 FF       ; \  
CODE_00EEC9:          STA.W $0DDA                         ;; 00EEC9 : 8D DA 0D    ; / Set music to xFF 
CODE_00EECC:          LDA.B #$08                          ;; 00EECC : A9 08       ;
CODE_00EECE:          STA.W $1493                         ;; 00EECE : 8D 93 14    ;
CODE_00EED1:          INC.W $13EF                         ;; 00EED1 : EE EF 13    ;
CODE_00EED4:          LDA RAM_MarioYPos                   ;; 00EED4 : A5 96       ;
CODE_00EED6:          SEC                                 ;; 00EED6 : 38          ;
CODE_00EED7:          SBC $91                             ;; 00EED7 : E5 91       ;
CODE_00EED9:          STA RAM_MarioYPos                   ;; 00EED9 : 85 96       ;
CODE_00EEDB:          LDA RAM_MarioYPosHi                 ;; 00EEDB : A5 97       ;
CODE_00EEDD:          SBC $90                             ;; 00EEDD : E5 90       ;
CODE_00EEDF:          STA RAM_MarioYPosHi                 ;; 00EEDF : 85 97       ;
CODE_00EEE1:          LDA.W DATA_00E53D,Y                 ;; 00EEE1 : B9 3D E5    ;
CODE_00EEE4:          BNE CODE_00EEEF                     ;; 00EEE4 : D0 09       ;
CODE_00EEE6:          LDX.W $13ED                         ;; 00EEE6 : AE ED 13    ;
CODE_00EEE9:          BEQ CODE_00EF05                     ;; 00EEE9 : F0 1A       ;
CODE_00EEEB:          LDX RAM_MarioSpeedX                 ;; 00EEEB : A6 7B       ;
CODE_00EEED:          BEQ CODE_00EF02                     ;; 00EEED : F0 13       ;
CODE_00EEEF:          STA.W $13EE                         ;; 00EEEF : 8D EE 13    ;
CODE_00EEF2:          LDA RAM_ControllerA                 ;; 00EEF2 : A5 15       ;
CODE_00EEF4:          AND.B #$04                          ;; 00EEF4 : 29 04       ;
CODE_00EEF6:          BEQ CODE_00EF05                     ;; 00EEF6 : F0 0D       ;
CODE_00EEF8:          LDA.W $148F                         ;; 00EEF8 : AD 8F 14    ;
CODE_00EEFB:          ORA.W $13ED                         ;; 00EEFB : 0D ED 13    ;
CODE_00EEFE:          BNE CODE_00EF05                     ;; 00EEFE : D0 05       ;
CODE_00EF00:          LDX.B #$1C                          ;; 00EF00 : A2 1C       ;
CODE_00EF02:          STX.W $13ED                         ;; 00EF02 : 8E ED 13    ;
CODE_00EF05:          LDX.W DATA_00E4B9,Y                 ;; 00EF05 : BE B9 E4    ;
CODE_00EF08:          STX.W $13E1                         ;; 00EF08 : 8E E1 13    ;
CODE_00EF0B:          CPY.B #$1C                          ;; 00EF0B : C0 1C       ;
CODE_00EF0D:          BCS CODE_00EF38                     ;; 00EF0D : B0 29       ;
CODE_00EF0F:          LDA RAM_MarioSpeedX                 ;; 00EF0F : A5 7B       ;
CODE_00EF11:          BEQ CODE_00EF31                     ;; 00EF11 : F0 1E       ;
CODE_00EF13:          LDA.W DATA_00E53D,Y                 ;; 00EF13 : B9 3D E5    ;
CODE_00EF16:          BEQ CODE_00EF31                     ;; 00EF16 : F0 19       ;
CODE_00EF18:          EOR RAM_MarioSpeedX                 ;; 00EF18 : 45 7B       ;
CODE_00EF1A:          BPL CODE_00EF31                     ;; 00EF1A : 10 15       ;
CODE_00EF1C:          STX.W $13E5                         ;; 00EF1C : 8E E5 13    ;
CODE_00EF1F:          LDA RAM_MarioSpeedX                 ;; 00EF1F : A5 7B       ;
CODE_00EF21:          BPL CODE_00EF26                     ;; 00EF21 : 10 03       ;
CODE_00EF23:          EOR.B #$FF                          ;; 00EF23 : 49 FF       ;
CODE_00EF25:          INC A                               ;; 00EF25 : 1A          ;
CODE_00EF26:          CMP.B #$28                          ;; 00EF26 : C9 28       ;
CODE_00EF28:          BCC CODE_00EF2F                     ;; 00EF28 : 90 05       ;
CODE_00EF2A:          LDA.W DATA_00E4FB,Y                 ;; 00EF2A : B9 FB E4    ;
CODE_00EF2D:          BRA CODE_00EF60                     ;; 00EF2D : 80 31       ;
                                                          ;;                      ;
CODE_00EF2F:          LDY.B #$20                          ;; 00EF2F : A0 20       ;
CODE_00EF31:          LDA RAM_MarioSpeedY                 ;; 00EF31 : A5 7D       ;
CODE_00EF33:          CMP.W DATA_00E4DA,Y                 ;; 00EF33 : D9 DA E4    ;
CODE_00EF36:          BCC CODE_00EF3B                     ;; 00EF36 : 90 03       ;
CODE_00EF38:          LDA.W DATA_00E4DA,Y                 ;; 00EF38 : B9 DA E4    ;
CODE_00EF3B:          LDX $8E                             ;; 00EF3B : A6 8E       ;
CODE_00EF3D:          BPL CODE_00EF60                     ;; 00EF3D : 10 21       ;
CODE_00EF3F:          INC.W $140E                         ;; 00EF3F : EE 0E 14    ;
CODE_00EF42:          PHA                                 ;; 00EF42 : 48          ;
CODE_00EF43:          REP #$20                            ;; 00EF43 : C2 20       ; Accum (16 bit) 
CODE_00EF45:          LDA.W $17BE                         ;; 00EF45 : AD BE 17    ;
CODE_00EF48:          AND.W #$FF00                        ;; 00EF48 : 29 00 FF    ;
CODE_00EF4B:          BPL CODE_00EF50                     ;; 00EF4B : 10 03       ;
CODE_00EF4D:          ORA.W #$00FF                        ;; 00EF4D : 09 FF 00    ;
CODE_00EF50:          XBA                                 ;; 00EF50 : EB          ;
CODE_00EF51:          EOR.W #$FFFF                        ;; 00EF51 : 49 FF FF    ;
CODE_00EF54:          INC A                               ;; 00EF54 : 1A          ;
CODE_00EF55:          CLC                                 ;; 00EF55 : 18          ;
CODE_00EF56:          ADC RAM_MarioXPos                   ;; 00EF56 : 65 94       ;
CODE_00EF58:          STA RAM_MarioXPos                   ;; 00EF58 : 85 94       ;
CODE_00EF5A:          SEP #$20                            ;; 00EF5A : E2 20       ; Accum (8 bit) 
CODE_00EF5C:          PLA                                 ;; 00EF5C : 68          ;
CODE_00EF5D:          CLC                                 ;; 00EF5D : 18          ;
CODE_00EF5E:          ADC.B #$28                          ;; 00EF5E : 69 28       ;
CODE_00EF60:          STA RAM_MarioSpeedY                 ;; 00EF60 : 85 7D       ;
CODE_00EF62:          TAX                                 ;; 00EF62 : AA          ;
CODE_00EF63:          BPL CODE_00EF68                     ;; 00EF63 : 10 03       ;
CODE_00EF65:          INC.W $13EF                         ;; 00EF65 : EE EF 13    ;
CODE_00EF68:          STZ.W $18B5                         ;; 00EF68 : 9C B5 18    ;
CODE_00EF6B:          STZ RAM_IsFlying                    ;; 00EF6B : 64 72       ;
CODE_00EF6D:          STZ RAM_IsClimbing                  ;; 00EF6D : 64 74       ;
CODE_00EF6F:          STZ.W $1406                         ;; 00EF6F : 9C 06 14    ;
CODE_00EF72:          STZ.W RAM_IsSpinJump                ;; 00EF72 : 9C 0D 14    ;
CODE_00EF75:          LDA.B #$04                          ;; 00EF75 : A9 04       ;
CODE_00EF77:          TSB RAM_MarioObjStatus              ;; 00EF77 : 04 77       ;
CODE_00EF79:          LDY.W $1407                         ;; 00EF79 : AC 07 14    ;
CODE_00EF7C:          BNE CODE_00EF99                     ;; 00EF7C : D0 1B       ;
CODE_00EF7E:          LDA.W RAM_OnYoshi                   ;; 00EF7E : AD 7A 18    ;
CODE_00EF81:          BEQ CODE_00EF95                     ;; 00EF81 : F0 12       ;
CODE_00EF83:          LDA $8F                             ;; 00EF83 : A5 8F       ;
CODE_00EF85:          BEQ CODE_00EF95                     ;; 00EF85 : F0 0E       ;
CODE_00EF87:          LDA.W RAM_YoshiHasStomp             ;; 00EF87 : AD E7 18    ; \ If Yoshi has stomp ability, 
CODE_00EF8A:          BEQ CODE_00EF95                     ;; 00EF8A : F0 09       ;  | 
CODE_00EF8C:          JSL.L YoshiStompRoutine             ;; 00EF8C : 22 BF 86 02 ;  | Run routine 
CODE_00EF90:          LDA.B #$25                          ;; 00EF90 : A9 25       ;  | Play sound effect 
CODE_00EF92:          STA.W $1DFC                         ;; 00EF92 : 8D FC 1D    ; / 
CODE_00EF95:          STZ.W $1697                         ;; 00EF95 : 9C 97 16    ;
Return00EF98:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EF99:          STZ.W $1697                         ;; 00EF99 : 9C 97 16    ;
CODE_00EF9C:          STZ.W $1407                         ;; 00EF9C : 9C 07 14    ;
CODE_00EF9F:          CPY.B #$05                          ;; 00EF9F : C0 05       ;
CODE_00EFA1:          BCS CallGroundPound                 ;; 00EFA1 : B0 0B       ;
CODE_00EFA3:          LDA RAM_MarioPowerUp                ;; 00EFA3 : A5 19       ;
CODE_00EFA5:          CMP.B #$02                          ;; 00EFA5 : C9 02       ;
CODE_00EFA7:          BNE Return00EFAD                    ;; 00EFA7 : D0 04       ;
CODE_00EFA9:          SEC                                 ;; 00EFA9 : 38          ;
CODE_00EFAA:          ROR.W $13ED                         ;; 00EFAA : 6E ED 13    ;
Return00EFAD:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CallGroundPound:      LDA $8F                             ;; ?QPWZ? : A5 8F       ;
CODE_00EFB0:          BEQ Return00EFBB                    ;; 00EFB0 : F0 09       ;
CODE_00EFB2:          JSL.L GroundPound                   ;; 00EFB2 : 22 C1 94 02 ;
CODE_00EFB6:          LDA.B #$09                          ;; 00EFB6 : A9 09       ; \ Play sound effect 
CODE_00EFB8:          STA.W $1DFC                         ;; 00EFB8 : 8D FC 1D    ; / 
Return00EFBB:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EFBC:          LDX.W $1693                         ;; 00EFBC : AE 93 16    ;
CODE_00EFBF:          CPX.B #$CE                          ;; 00EFBF : E0 CE       ;
CODE_00EFC1:          BCC Return00EFE7                    ;; 00EFC1 : 90 24       ;
CODE_00EFC3:          CPX.B #$D2                          ;; 00EFC3 : E0 D2       ;
CODE_00EFC5:          BCS Return00EFE7                    ;; 00EFC5 : B0 20       ;
CODE_00EFC7:          TXA                                 ;; 00EFC7 : 8A          ;
CODE_00EFC8:          SEC                                 ;; 00EFC8 : 38          ;
CODE_00EFC9:          SBC.B #$CC                          ;; 00EFC9 : E9 CC       ;
CODE_00EFCB:          ASL                                 ;; 00EFCB : 0A          ;
CODE_00EFCC:          TAX                                 ;; 00EFCC : AA          ;
CODE_00EFCD:          LDA RAM_FrameCounter                ;; 00EFCD : A5 13       ;
CODE_00EFCF:          AND.B #$03                          ;; 00EFCF : 29 03       ;
CODE_00EFD1:          BNE Return00EFE7                    ;; 00EFD1 : D0 14       ;
CODE_00EFD3:          REP #$20                            ;; 00EFD3 : C2 20       ; Accum (16 bit) 
CODE_00EFD5:          LDA RAM_MarioXPos                   ;; 00EFD5 : A5 94       ;
CODE_00EFD7:          CLC                                 ;; 00EFD7 : 18          ;
CODE_00EFD8:          ADC.W DATA_00E913,X                 ;; 00EFD8 : 7D 13 E9    ;
CODE_00EFDB:          STA RAM_MarioXPos                   ;; 00EFDB : 85 94       ;
CODE_00EFDD:          LDA RAM_MarioYPos                   ;; 00EFDD : A5 96       ;
CODE_00EFDF:          CLC                                 ;; 00EFDF : 18          ;
CODE_00EFE0:          ADC.W DATA_00E91F,X                 ;; 00EFE0 : 7D 1F E9    ;
CODE_00EFE3:          STA RAM_MarioYPos                   ;; 00EFE3 : 85 96       ;
CODE_00EFE5:          SEP #$20                            ;; 00EFE5 : E2 20       ; Accum (8 bit) 
Return00EFE7:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00EFE8:          JSR.W CODE_00F44D                   ;; 00EFE8 : 20 4D F4    ;
CODE_00EFEB:          BNE ADDR_00EFF0                     ;; 00EFEB : D0 03       ;
CODE_00EFED:          JMP.W CODE_00F309                   ;; 00EFED : 4C 09 F3    ;
                                                          ;;                      ;
ADDR_00EFF0:          CPY.B #$11                          ;; 00EFF0 : C0 11       ;
ADDR_00EFF2:          BCC Return00F004                    ;; 00EFF2 : 90 10       ;
ADDR_00EFF4:          CPY.B #$6E                          ;; 00EFF4 : C0 6E       ;
ADDR_00EFF6:          BCS Return00F004                    ;; 00EFF6 : B0 0C       ;
ADDR_00EFF8:          TYA                                 ;; 00EFF8 : 98          ;
ADDR_00EFF9:          LDY.B #$00                          ;; 00EFF9 : A0 00       ;
ADDR_00EFFB:          JSL.L CODE_00F160                   ;; 00EFFB : 22 60 F1 00 ;
ADDR_00EFFF:          PLA                                 ;; 00EFFF : 68          ;
ADDR_00F000:          PLA                                 ;; 00F000 : 68          ;
ADDR_00F001:          JMP.W ADDR_00EB42                   ;; 00F001 : 4C 42 EB    ;
                                                          ;;                      ;
Return00F004:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F005:          TYA                                 ;; 00F005 : 98          ;
CODE_00F006:          SEC                                 ;; 00F006 : 38          ;
CODE_00F007:          SBC.B #$0E                          ;; 00F007 : E9 0E       ;
CODE_00F009:          CMP.B #$02                          ;; 00F009 : C9 02       ;
CODE_00F00B:          BCS Return00F04C                    ;; 00F00B : B0 3F       ;
CODE_00F00D:          EOR.B #$01                          ;; 00F00D : 49 01       ;
CODE_00F00F:          CMP RAM_MarioDirection              ;; 00F00F : C5 76       ;
CODE_00F011:          BNE Return00F04C                    ;; 00F011 : D0 39       ;
CODE_00F013:          TAX                                 ;; 00F013 : AA          ;
CODE_00F014:          LSR                                 ;; 00F014 : 4A          ;
CODE_00F015:          LDA $92                             ;; 00F015 : A5 92       ;
CODE_00F017:          BCC CODE_00F01B                     ;; 00F017 : 90 02       ;
CODE_00F019:          EOR.B #$0F                          ;; 00F019 : 49 0F       ;
CODE_00F01B:          CMP.B #$08                          ;; 00F01B : C9 08       ;
CODE_00F01D:          BCS Return00F04C                    ;; 00F01D : B0 2D       ;
CODE_00F01F:          LDA.W RAM_OnYoshi                   ;; 00F01F : AD 7A 18    ;
CODE_00F022:          BEQ CODE_00F035                     ;; 00F022 : F0 11       ;
CODE_00F024:          LDA.B #$08                          ;; 00F024 : A9 08       ;
CODE_00F026:          STA.W $1DFC                         ;; 00F026 : 8D FC 1D    ; / Play sound effect 
CODE_00F029:          LDA.B #$80                          ;; 00F029 : A9 80       ;
CODE_00F02B:          STA RAM_MarioSpeedY                 ;; 00F02B : 85 7D       ;
CODE_00F02D:          STA.W $1406                         ;; 00F02D : 8D 06 14    ;
CODE_00F030:          PLA                                 ;; 00F030 : 68          ;
CODE_00F031:          PLA                                 ;; 00F031 : 68          ;
CODE_00F032:          JMP.W CODE_00EE35                   ;; 00F032 : 4C 35 EE    ;
                                                          ;;                      ;
CODE_00F035:          LDA RAM_MarioSpeedX                 ;; 00F035 : A5 7B       ;
CODE_00F037:          SEC                                 ;; 00F037 : 38          ;
CODE_00F038:          SBC.W DATA_00EAB9,X                 ;; 00F038 : FD B9 EA    ;
CODE_00F03B:          EOR.W DATA_00EAB9,X                 ;; 00F03B : 5D B9 EA    ;
CODE_00F03E:          BMI Return00F04C                    ;; 00F03E : 30 0C       ;
CODE_00F040:          LDA.W $148F                         ;; 00F040 : AD 8F 14    ;
CODE_00F043:          ORA RAM_IsDucking                   ;; 00F043 : 05 73       ;
CODE_00F045:          BNE Return00F04C                    ;; 00F045 : D0 05       ;
CODE_00F047:          INX                                 ;; 00F047 : E8          ;
CODE_00F048:          INX                                 ;; 00F048 : E8          ;
CODE_00F049:          STX.W RAM_WallWalkStatus            ;; 00F049 : 8E E3 13    ;
Return00F04C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F04D:          PHX                                 ;; 00F04D : DA          ;
CODE_00F04E:          LDX.B #$19                          ;; 00F04E : A2 19       ;
CODE_00F050:          CMP.L DATA_00EAC1,X                 ;; 00F050 : DF C1 EA 00 ;
CODE_00F054:          BEQ CODE_00F05A                     ;; 00F054 : F0 04       ;
CODE_00F056:          DEX                                 ;; 00F056 : CA          ;
CODE_00F057:          BPL CODE_00F050                     ;; 00F057 : 10 F7       ;
CODE_00F059:          CLC                                 ;; 00F059 : 18          ;
CODE_00F05A:          PLX                                 ;; 00F05A : FA          ;
Return00F05B:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00F05C:          .db $01,$05,$01,$02,$01,$01,$00,$00 ;; 00F05C               ;
                      .db $00,$00,$00,$00,$00,$06,$02,$02 ;; ?QPWZ?               ;
                      .db $02,$02,$02,$02,$02,$02,$02,$02 ;; ?QPWZ?               ;
                      .db $02,$03,$03,$04,$02,$02,$02,$01 ;; ?QPWZ?               ;
                      .db $01,$07,$11,$10                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F080:          .db $80,$00,$00,$1E,$00,$00,$05,$09 ;; 00F080               ;
                      .db $06,$81,$0E,$0C,$14,$00,$05,$09 ;; ?QPWZ?               ;
                      .db $06,$07,$0E,$0C,$16,$18,$1A,$1A ;; ?QPWZ?               ;
                      .db $00,$09,$00,$00,$FF,$0C,$0A,$00 ;; ?QPWZ?               ;
                      .db $00,$00,$08,$02                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F0A4:          .db $0C,$08,$0C,$08,$0C,$0F,$08,$08 ;; 00F0A4               ;
                      .db $08,$08,$08,$08,$08,$08,$08,$08 ;; ?QPWZ?               ;
                      .db $08,$08,$08,$08,$08,$08,$08,$08 ;; ?QPWZ?               ;
                      .db $08,$03,$03,$08,$08,$08,$08,$08 ;; ?QPWZ?               ;
                      .db $08,$04,$08,$08                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F0C8:          .db $0E,$13,$0E,$0D,$0E,$10,$0D,$0D ;; 00F0C8               ;
                      .db $0D,$0D,$0A,$0D,$0D,$0C,$0D,$0D ;; ?QPWZ?               ;
                      .db $0D,$0D,$0B,$0D,$0D,$16,$0D,$0D ;; ?QPWZ?               ;
                      .db $0D,$11,$11,$12,$0D,$0D,$0D,$0E ;; ?QPWZ?               ;
                      .db $0F,$0C,$0D,$0D                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F0EC:          .db $08,$01,$02,$04,$ED,$F6,$00,$7D ;; 00F0EC               ;
                      .db $BE,$00,$6F,$B7                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F0F8:          .db $40,$50,$00,$70,$80,$00,$A0,$B0 ;; 00F0F8               ;
DATA_00F100:          .db $05,$09,$06,$05,$09,$06,$05,$09 ;; 00F100               ;
                      .db $06,$05,$09,$06,$05,$09,$06,$05 ;; ?QPWZ?               ;
                      .db $07,$0A,$10,$07,$0A,$10,$07,$0A ;; ?QPWZ?               ;
                      .db $10,$07,$0A,$10,$07,$0A,$10,$07 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00F120:          XBA                                 ;; 00F120 : EB          ;
CODE_00F121:          LDA.W RAM_OnYoshi                   ;; 00F121 : AD 7A 18    ;
CODE_00F124:          BNE CODE_00F15F                     ;; 00F124 : D0 39       ;
CODE_00F126:          XBA                                 ;; 00F126 : EB          ;
CODE_00F127:          CMP.B #$2F                          ;; 00F127 : C9 2F       ;
CODE_00F129:          BEQ CODE_00F154                     ;; 00F129 : F0 29       ;
CODE_00F12B:          CMP.B #$59                          ;; 00F12B : C9 59       ;
CODE_00F12D:          BCC CODE_00F144                     ;; 00F12D : 90 15       ;
CODE_00F12F:          CMP.B #$5C                          ;; 00F12F : C9 5C       ;
CODE_00F131:          BCS CODE_00F140                     ;; 00F131 : B0 0D       ;
CODE_00F133:          XBA                                 ;; 00F133 : EB          ;
CODE_00F134:          LDA.W $1931                         ;; 00F134 : AD 31 19    ;
CODE_00F137:          CMP.B #$05                          ;; 00F137 : C9 05       ;
CODE_00F139:          BEQ CODE_00F154                     ;; 00F139 : F0 19       ;
CODE_00F13B:          CMP.B #$0D                          ;; 00F13B : C9 0D       ;
CODE_00F13D:          BEQ CODE_00F154                     ;; 00F13D : F0 15       ;
CODE_00F13F:          XBA                                 ;; 00F13F : EB          ;
CODE_00F140:          CMP.B #$5D                          ;; 00F140 : C9 5D       ;
CODE_00F142:          BCC CODE_00F14C                     ;; 00F142 : 90 08       ;
CODE_00F144:          CMP.B #$66                          ;; 00F144 : C9 66       ;
CODE_00F146:          BCC CODE_00F160                     ;; 00F146 : 90 18       ;
CODE_00F148:          CMP.B #$6A                          ;; 00F148 : C9 6A       ;
CODE_00F14A:          BCS CODE_00F160                     ;; 00F14A : B0 14       ;
CODE_00F14C:          XBA                                 ;; 00F14C : EB          ;
CODE_00F14D:          LDA.W $1931                         ;; 00F14D : AD 31 19    ;
CODE_00F150:          CMP.B #$01                          ;; 00F150 : C9 01       ;
CODE_00F152:          BNE CODE_00F15F                     ;; 00F152 : D0 0B       ;
CODE_00F154:          PHB                                 ;; 00F154 : 8B          ;
CODE_00F155:          LDA.B #$01                          ;; 00F155 : A9 01       ;
CODE_00F157:          PHA                                 ;; 00F157 : 48          ;
CODE_00F158:          PLB                                 ;; 00F158 : AB          ;
CODE_00F159:          JSL.L HurtMario                     ;; 00F159 : 22 B7 F5 00 ;
CODE_00F15D:          PLB                                 ;; 00F15D : AB          ;
Return00F15E:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F15F:          XBA                                 ;; 00F15F : EB          ;
CODE_00F160:          SEC                                 ;; 00F160 : 38          ;
CODE_00F161:          SBC.B #$11                          ;; 00F161 : E9 11       ;
CODE_00F163:          CMP.B #$1D                          ;; 00F163 : C9 1D       ;
CODE_00F165:          BCC CODE_00F17F                     ;; 00F165 : 90 18       ;
CODE_00F167:          XBA                                 ;; 00F167 : EB          ;
CODE_00F168:          PHX                                 ;; 00F168 : DA          ;
CODE_00F169:          LDX.W $1931                         ;; 00F169 : AE 31 19    ;
CODE_00F16C:          LDA.L DATA_00A625,X                 ;; 00F16C : BF 25 A6 00 ;
CODE_00F170:          PLX                                 ;; 00F170 : FA          ;
CODE_00F171:          AND.B #$03                          ;; 00F171 : 29 03       ;
CODE_00F173:          BEQ CODE_00F176                     ;; 00F173 : F0 01       ;
Return00F175:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F176:          XBA                                 ;; 00F176 : EB          ;
CODE_00F177:          SBC.B #$59                          ;; 00F177 : E9 59       ;
CODE_00F179:          CMP.B #$02                          ;; 00F179 : C9 02       ;
CODE_00F17B:          BCS Return00F1F8                    ;; 00F17B : B0 7B       ;
CODE_00F17D:          ADC.B #$22                          ;; 00F17D : 69 22       ;
CODE_00F17F:          PHX                                 ;; 00F17F : DA          ;
CODE_00F180:          PHA                                 ;; 00F180 : 48          ;
CODE_00F181:          TYX                                 ;; 00F181 : BB          ;
CODE_00F182:          LDA.L DATA_00F0EC,X                 ;; 00F182 : BF EC F0 00 ;
CODE_00F186:          PLX                                 ;; 00F186 : FA          ;
CODE_00F187:          AND.L DATA_00F0A4,X                 ;; 00F187 : 3F A4 F0 00 ;
CODE_00F18B:          BEQ CODE_00F1F6                     ;; 00F18B : F0 69       ;
CODE_00F18D:          STY $06                             ;; 00F18D : 84 06       ;
CODE_00F18F:          LDA.L DATA_00F0C8,X                 ;; 00F18F : BF C8 F0 00 ;
CODE_00F193:          STA $07                             ;; 00F193 : 85 07       ;
CODE_00F195:          LDA.L DATA_00F05C,X                 ;; 00F195 : BF 5C F0 00 ;
CODE_00F199:          STA $04                             ;; 00F199 : 85 04       ;
CODE_00F19B:          LDA.L DATA_00F080,X                 ;; 00F19B : BF 80 F0 00 ;
CODE_00F19F:          BPL CODE_00F1BA                     ;; 00F19F : 10 19       ;
CODE_00F1A1:          CMP.B #$FF                          ;; 00F1A1 : C9 FF       ;
CODE_00F1A3:          BNE CODE_00F1AE                     ;; 00F1A3 : D0 09       ;
CODE_00F1A5:          LDA.B #$05                          ;; 00F1A5 : A9 05       ;
CODE_00F1A7:          LDY.W $0DC0                         ;; 00F1A7 : AC C0 0D    ;
CODE_00F1AA:          BEQ CODE_00F1D0                     ;; 00F1AA : F0 24       ;
CODE_00F1AC:          BRA CODE_00F1CE                     ;; 00F1AC : 80 20       ;
                                                          ;;                      ;
CODE_00F1AE:          LSR                                 ;; 00F1AE : 4A          ;
CODE_00F1AF:          LDA RAM_BlockYLo                    ;; 00F1AF : A5 9A       ;
CODE_00F1B1:          ROR                                 ;; 00F1B1 : 6A          ;
CODE_00F1B2:          LSR                                 ;; 00F1B2 : 4A          ;
CODE_00F1B3:          LSR                                 ;; 00F1B3 : 4A          ;
CODE_00F1B4:          LSR                                 ;; 00F1B4 : 4A          ;
CODE_00F1B5:          TAX                                 ;; 00F1B5 : AA          ;
CODE_00F1B6:          LDA.L DATA_00F100,X                 ;; 00F1B6 : BF 00 F1 00 ;
CODE_00F1BA:          LSR                                 ;; 00F1BA : 4A          ;
CODE_00F1BB:          BCC CODE_00F1D0                     ;; 00F1BB : 90 13       ;
CODE_00F1BD:          CMP.B #$03                          ;; 00F1BD : C9 03       ;
CODE_00F1BF:          BEQ CODE_00F1C9                     ;; 00F1BF : F0 08       ;
CODE_00F1C1:          LDY RAM_MarioPowerUp                ;; 00F1C1 : A4 19       ;
CODE_00F1C3:          BNE CODE_00F1D0                     ;; 00F1C3 : D0 0B       ;
CODE_00F1C5:          LDA.B #$01                          ;; 00F1C5 : A9 01       ;
CODE_00F1C7:          BRA CODE_00F1D0                     ;; 00F1C7 : 80 07       ;
                                                          ;;                      ;
CODE_00F1C9:          LDY.W $1490                         ;; 00F1C9 : AC 90 14    ; \ Branch if Mario has star 
CODE_00F1CC:          BNE CODE_00F1D0                     ;; 00F1CC : D0 02       ; / 
CODE_00F1CE:          LDA.B #$06                          ;; 00F1CE : A9 06       ;
CODE_00F1D0:          STA $05                             ;; 00F1D0 : 85 05       ;
CODE_00F1D2:          CMP.B #$05                          ;; 00F1D2 : C9 05       ;
CODE_00F1D4:          BNE CODE_00F1DA                     ;; 00F1D4 : D0 04       ;
CODE_00F1D6:          LDA.B #$16                          ;; 00F1D6 : A9 16       ;
CODE_00F1D8:          STA $07                             ;; 00F1D8 : 85 07       ;
CODE_00F1DA:          TAY                                 ;; 00F1DA : A8          ;
CODE_00F1DB:          LDA.B #$0F                          ;; 00F1DB : A9 0F       ;
CODE_00F1DD:          TRB RAM_BlockYLo                    ;; 00F1DD : 14 9A       ;
CODE_00F1DF:          TRB RAM_BlockXLo                    ;; 00F1DF : 14 98       ;
CODE_00F1E1:          CPY.B #$06                          ;; 00F1E1 : C0 06       ;
CODE_00F1E3:          BNE CODE_00F1EC                     ;; 00F1E3 : D0 07       ;
CODE_00F1E5:          LDY.W $1931                         ;; 00F1E5 : AC 31 19    ;
CODE_00F1E8:          CPY.B #$04                          ;; 00F1E8 : C0 04       ;
CODE_00F1EA:          BEQ CODE_00F1F9                     ;; 00F1EA : F0 0D       ;
CODE_00F1EC:          PHB                                 ;; 00F1EC : 8B          ;
CODE_00F1ED:          LDA.B #$02                          ;; 00F1ED : A9 02       ;
CODE_00F1EF:          PHA                                 ;; 00F1EF : 48          ;
CODE_00F1F0:          PLB                                 ;; 00F1F0 : AB          ;
CODE_00F1F1:          JSL.L CODE_028752                   ;; 00F1F1 : 22 52 87 02 ;
CODE_00F1F5:          PLB                                 ;; 00F1F5 : AB          ;
CODE_00F1F6:          PLX                                 ;; 00F1F6 : FA          ;
CODE_00F1F7:          CLC                                 ;; 00F1F7 : 18          ;
Return00F1F8:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F1F9:          LDA RAM_BlockXHi                    ;; 00F1F9 : A5 99       ;
CODE_00F1FB:          LSR                                 ;; 00F1FB : 4A          ;
CODE_00F1FC:          LDA RAM_BlockXLo                    ;; 00F1FC : A5 98       ;
CODE_00F1FE:          AND.B #$C0                          ;; 00F1FE : 29 C0       ;
CODE_00F200:          ROL                                 ;; 00F200 : 2A          ;
CODE_00F201:          ROL                                 ;; 00F201 : 2A          ;
CODE_00F202:          ROL                                 ;; 00F202 : 2A          ;
CODE_00F203:          TAY                                 ;; 00F203 : A8          ;
CODE_00F204:          LDA RAM_BlockYLo                    ;; 00F204 : A5 9A       ;
CODE_00F206:          LSR                                 ;; 00F206 : 4A          ;
CODE_00F207:          LSR                                 ;; 00F207 : 4A          ;
CODE_00F208:          LSR                                 ;; 00F208 : 4A          ;
CODE_00F209:          LSR                                 ;; 00F209 : 4A          ;
CODE_00F20A:          TAX                                 ;; 00F20A : AA          ;
CODE_00F20B:          LDA.W $13F3,Y                       ;; 00F20B : B9 F3 13    ;
CODE_00F20E:          ORA.L DATA_00F0EC,X                 ;; 00F20E : 1F EC F0 00 ;
CODE_00F212:          LDX.W $13F3,Y                       ;; 00F212 : BE F3 13    ;
CODE_00F215:          STA.W $13F3,Y                       ;; 00F215 : 99 F3 13    ;
CODE_00F218:          CMP.B #$FF                          ;; 00F218 : C9 FF       ;
CODE_00F21A:          BNE CODE_00F226                     ;; 00F21A : D0 0A       ;
CODE_00F21C:          LDA.B #$05                          ;; 00F21C : A9 05       ;
CODE_00F21E:          STA $05                             ;; 00F21E : 85 05       ;
CODE_00F220:          LDA.B #$17                          ;; 00F220 : A9 17       ;
CODE_00F222:          STA $07                             ;; 00F222 : 85 07       ;
CODE_00F224:          BRA CODE_00F1EC                     ;; 00F224 : 80 C6       ;
                                                          ;;                      ;
CODE_00F226:          LDA.W $141B                         ;; 00F226 : AD 1B 14    ;
CODE_00F229:          BNE CODE_00F236                     ;; 00F229 : D0 0B       ;
CODE_00F22B:          TXA                                 ;; 00F22B : 8A          ;
CODE_00F22C:          BEQ CODE_00F230                     ;; 00F22C : F0 02       ;
CODE_00F22E:          LDA.B #$02                          ;; 00F22E : A9 02       ;
CODE_00F230:          EOR.B #$03                          ;; 00F230 : 49 03       ;
CODE_00F232:          AND RAM_FrameCounter                ;; 00F232 : 25 13       ;
CODE_00F234:          BNE CODE_00F220                     ;; 00F234 : D0 EA       ;
CODE_00F236:          LDA.B #$2A                          ;; 00F236 : A9 2A       ;
CODE_00F238:          STA.W $1DFC                         ;; 00F238 : 8D FC 1D    ; / Play sound effect 
CODE_00F23B:          PHY                                 ;; 00F23B : 5A          ;
CODE_00F23C:          STZ $05                             ;; 00F23C : 64 05       ;
CODE_00F23E:          PHB                                 ;; 00F23E : 8B          ;
CODE_00F23F:          LDA.B #$02                          ;; 00F23F : A9 02       ; \ Set data bank = $02 
CODE_00F241:          PHA                                 ;; 00F241 : 48          ;  | 
CODE_00F242:          PLB                                 ;; 00F242 : AB          ;
CODE_00F243:          JSL.L CODE_028752                   ;; 00F243 : 22 52 87 02 ;
CODE_00F247:          PLB                                 ;; 00F247 : AB          ;
CODE_00F248:          PLY                                 ;; 00F248 : 7A          ;
CODE_00F249:          LDX.B #$07                          ;; 00F249 : A2 07       ;
CODE_00F24B:          LDA.W $13F3,Y                       ;; 00F24B : B9 F3 13    ;
CODE_00F24E:          LSR                                 ;; 00F24E : 4A          ;
CODE_00F24F:          BCS CODE_00F261                     ;; 00F24F : B0 10       ;
CODE_00F251:          PHA                                 ;; 00F251 : 48          ;
CODE_00F252:          LDA.B #$0D                          ;; 00F252 : A9 0D       ; \ Block to generate = Used block 
CODE_00F254:          STA RAM_BlockBlock                  ;; 00F254 : 85 9C       ; / 
CODE_00F256:          LDA.L DATA_00F0F8,X                 ;; 00F256 : BF F8 F0 00 ;
CODE_00F25A:          STA RAM_BlockYLo                    ;; 00F25A : 85 9A       ;
CODE_00F25C:          JSL.L GenerateTile                  ;; 00F25C : 22 B0 BE 00 ;
CODE_00F260:          PLA                                 ;; 00F260 : 68          ;
CODE_00F261:          DEX                                 ;; 00F261 : CA          ;
CODE_00F262:          BPL CODE_00F24E                     ;; 00F262 : 10 EA       ;
CODE_00F264:          JMP.W CODE_00F1F6                   ;; 00F264 : 4C F6 F1    ;
                                                          ;;                      ;
CODE_00F267:          CPY.B #$2E                          ;; 00F267 : C0 2E       ;
CODE_00F269:          BNE Return00F28B                    ;; 00F269 : D0 20       ;
CODE_00F26B:          BIT $16                             ;; 00F26B : 24 16       ;
CODE_00F26D:          BVC Return00F28B                    ;; 00F26D : 50 1C       ;
CODE_00F26F:          LDA.W $148F                         ;; 00F26F : AD 8F 14    ;
CODE_00F272:          ORA.W RAM_OnYoshi                   ;; 00F272 : 0D 7A 18    ;
CODE_00F275:          BNE Return00F28B                    ;; 00F275 : D0 14       ;
CODE_00F277:          LDA.B #$02                          ;; 00F277 : A9 02       ;
CODE_00F279:          PHA                                 ;; 00F279 : 48          ;
CODE_00F27A:          PLB                                 ;; 00F27A : AB          ;
CODE_00F27B:          JSL.L CODE_02862F                   ;; 00F27B : 22 2F 86 02 ;
CODE_00F27F:          BMI CODE_00F289                     ;; 00F27F : 30 08       ;
CODE_00F281:          LDA.B #$02                          ;; 00F281 : A9 02       ; \ Block to generate = #$02 
CODE_00F283:          STA RAM_BlockBlock                  ;; 00F283 : 85 9C       ; / 
CODE_00F285:          JSL.L GenerateTile                  ;; 00F285 : 22 B0 BE 00 ;
CODE_00F289:          PHK                                 ;; 00F289 : 4B          ;
CODE_00F28A:          PLB                                 ;; 00F28A : AB          ;
Return00F28B:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F28C:          TYA                                 ;; 00F28C : 98          ;
CODE_00F28D:          SEC                                 ;; 00F28D : 38          ;
CODE_00F28E:          SBC.B #$6F                          ;; 00F28E : E9 6F       ;
CODE_00F290:          CMP.B #$04                          ;; 00F290 : C9 04       ;
CODE_00F292:          BCS CODE_00F2C0                     ;; 00F292 : B0 2C       ;
CODE_00F294:          CMP.W $1421                         ;; 00F294 : CD 21 14    ;
CODE_00F297:          BEQ CODE_00F2A8                     ;; 00F297 : F0 0F       ;
CODE_00F299:          INC A                               ;; 00F299 : 1A          ;
CODE_00F29A:          CMP.W $1421                         ;; 00F29A : CD 21 14    ;
CODE_00F29D:          BEQ Return00F2BF                    ;; 00F29D : F0 20       ;
CODE_00F29F:          LDA.W $1421                         ;; 00F29F : AD 21 14    ;
CODE_00F2A2:          CMP.B #$04                          ;; 00F2A2 : C9 04       ;
CODE_00F2A4:          BCS Return00F2BF                    ;; 00F2A4 : B0 19       ;
CODE_00F2A6:          LDA.B #$FF                          ;; 00F2A6 : A9 FF       ;
CODE_00F2A8:          INC A                               ;; 00F2A8 : 1A          ;
CODE_00F2A9:          STA.W $1421                         ;; 00F2A9 : 8D 21 14    ;
CODE_00F2AC:          CMP.B #$04                          ;; 00F2AC : C9 04       ;
CODE_00F2AE:          BNE Return00F2BF                    ;; 00F2AE : D0 0F       ;
CODE_00F2B0:          PHX                                 ;; 00F2B0 : DA          ;
CODE_00F2B1:          JSL.L TriggerInivis1Up              ;; 00F2B1 : 22 D9 C2 03 ;
CODE_00F2B5:          JSR.W CODE_00F3B2                   ;; 00F2B5 : 20 B2 F3    ;
CODE_00F2B8:          ORA.W $1F3C,Y                       ;; 00F2B8 : 19 3C 1F    ;
CODE_00F2BB:          STA.W $1F3C,Y                       ;; 00F2BB : 99 3C 1F    ;
CODE_00F2BE:          PLX                                 ;; 00F2BE : FA          ;
Return00F2BF:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F2C0:          LDA.B #$01                          ;; 00F2C0 : A9 01       ;
CODE_00F2C2:          CPY.B #$06                          ;; 00F2C2 : C0 06       ;
CODE_00F2C4:          BCS CODE_00F2C9                     ;; 00F2C4 : B0 03       ;
CODE_00F2C6:          TSB $8A                             ;; 00F2C6 : 04 8A       ;
Return00F2C8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F2C9:          CPY.B #$38                          ;; 00F2C9 : C0 38       ;
CODE_00F2CB:          BNE CODE_00F2EE                     ;; 00F2CB : D0 21       ;
CODE_00F2CD:          LDA.B #$02                          ;; 00F2CD : A9 02       ; \ Block to generate = #$02 
CODE_00F2CF:          STA RAM_BlockBlock                  ;; 00F2CF : 85 9C       ; / 
CODE_00F2D1:          JSL.L GenerateTile                  ;; 00F2D1 : 22 B0 BE 00 ;
CODE_00F2D5:          JSR.W CODE_00FD5A                   ;; 00F2D5 : 20 5A FD    ;
CODE_00F2D8:          LDA.W $13CD                         ;; 00F2D8 : AD CD 13    ;
CODE_00F2DB:          BEQ CODE_00F2E0                     ;; 00F2DB : F0 03       ;
CODE_00F2DD:          JSR.W CODE_00CA2B                   ;; 00F2DD : 20 2B CA    ;
CODE_00F2E0:          LDA RAM_MarioPowerUp                ;; 00F2E0 : A5 19       ;
CODE_00F2E2:          BNE CODE_00F2E8                     ;; 00F2E2 : D0 04       ;
CODE_00F2E4:          LDA.B #$01                          ;; 00F2E4 : A9 01       ;
CODE_00F2E6:          STA RAM_MarioPowerUp                ;; 00F2E6 : 85 19       ;
CODE_00F2E8:          LDA.B #$05                          ;; 00F2E8 : A9 05       ;
CODE_00F2EA:          STA.W $1DF9                         ;; 00F2EA : 8D F9 1D    ; / Play sound effect 
Return00F2ED:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F2EE:          CPY.B #$06                          ;; 00F2EE : C0 06       ;
CODE_00F2F0:          BEQ CODE_00F2FC                     ;; 00F2F0 : F0 0A       ;
CODE_00F2F2:          CPY.B #$07                          ;; 00F2F2 : C0 07       ;
CODE_00F2F4:          BCC CODE_00F309                     ;; 00F2F4 : 90 13       ;
CODE_00F2F6:          CPY.B #$1D                          ;; 00F2F6 : C0 1D       ;
CODE_00F2F8:          BCS CODE_00F309                     ;; 00F2F8 : B0 0F       ;
CODE_00F2FA:          ORA.B #$80                          ;; 00F2FA : 09 80       ;
CODE_00F2FC:          CMP.B #$01                          ;; 00F2FC : C9 01       ;
CODE_00F2FE:          BNE CODE_00F302                     ;; 00F2FE : D0 02       ;
CODE_00F300:          ORA.B #$18                          ;; 00F300 : 09 18       ;
CODE_00F302:          TSB $8B                             ;; 00F302 : 04 8B       ;
CODE_00F304:          LDA $93                             ;; 00F304 : A5 93       ;
CODE_00F306:          STA $8C                             ;; 00F306 : 85 8C       ;
Return00F308:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F309:          CPY.B #$2F                          ;; 00F309 : C0 2F       ;
CODE_00F30B:          BCS CODE_00F311                     ;; 00F30B : B0 04       ;
CODE_00F30D:          CPY.B #$2A                          ;; 00F30D : C0 2A       ;
CODE_00F30F:          BCS CODE_00F32B                     ;; 00F30F : B0 1A       ;
CODE_00F311:          CPY.B #$6E                          ;; 00F311 : C0 6E       ;
CODE_00F313:          BNE Return00F376                    ;; 00F313 : D0 61       ;
CODE_00F315:          LDA.B #$0F                          ;; 00F315 : A9 0F       ;
CODE_00F317:          JSL.L CODE_00F38A                   ;; 00F317 : 22 8A F3 00 ;
CODE_00F31B:          INC.W $13C5                         ;; 00F31B : EE C5 13    ;
CODE_00F31E:          PHX                                 ;; 00F31E : DA          ;
CODE_00F31F:          JSR.W CODE_00F3B2                   ;; 00F31F : 20 B2 F3    ;
CODE_00F322:          ORA.W $1FEE,Y                       ;; 00F322 : 19 EE 1F    ;
CODE_00F325:          STA.W $1FEE,Y                       ;; 00F325 : 99 EE 1F    ;
CODE_00F328:          PLX                                 ;; 00F328 : FA          ;
CODE_00F329:          BRA CODE_00F36B                     ;; 00F329 : 80 40       ;
                                                          ;;                      ;
CODE_00F32B:          BNE CODE_00F332                     ;; 00F32B : D0 05       ;YOSHI COIN HANDLER        
CODE_00F32D:          LDA.W RAM_BluePowTimer              ;; 00F32D : AD AD 14    ;
CODE_00F330:          BEQ Return00F376                    ;; 00F330 : F0 44       ;
CODE_00F332:          CPY.B #$2D                          ;; 00F332 : C0 2D       ;
CODE_00F334:          BEQ CODE_00F33F                     ;; 00F334 : F0 09       ;
CODE_00F336:          BCC CODE_00F367                     ;; 00F336 : 90 2F       ;
CODE_00F338:          LDA RAM_BlockXLo                    ;; 00F338 : A5 98       ;
CODE_00F33A:          SEC                                 ;; 00F33A : 38          ;
CODE_00F33B:          SBC.B #$10                          ;; 00F33B : E9 10       ;
CODE_00F33D:          STA RAM_BlockXLo                    ;; 00F33D : 85 98       ;
CODE_00F33F:          JSL.L CODE_00F377                   ;; 00F33F : 22 77 F3 00 ;
CODE_00F343:          INC.W $1422                         ;; 00F343 : EE 22 14    ;
CODE_00F346:          LDA.W $1422                         ;; 00F346 : AD 22 14    ;
CODE_00F349:          CMP.B #$05                          ;; 00F349 : C9 05       ;
CODE_00F34B:          BCC CODE_00F358                     ;; 00F34B : 90 0B       ;
CODE_00F34D:          PHX                                 ;; 00F34D : DA          ;
CODE_00F34E:          JSR.W CODE_00F3B2                   ;; 00F34E : 20 B2 F3    ;
CODE_00F351:          ORA.W $1F2F,Y                       ;; 00F351 : 19 2F 1F    ;
CODE_00F354:          STA.W $1F2F,Y                       ;; 00F354 : 99 2F 1F    ;
CODE_00F357:          PLX                                 ;; 00F357 : FA          ;
CODE_00F358:          LDA.B #$1C                          ;; 00F358 : A9 1C       ;
CODE_00F35A:          STA.W $1DF9                         ;; 00F35A : 8D F9 1D    ; / Play sound effect 
CODE_00F35D:          LDA.B #$01                          ;; 00F35D : A9 01       ;
CODE_00F35F:          JSL.L CODE_05B330                   ;; 00F35F : 22 30 B3 05 ;
CODE_00F363:          LDY.B #$18                          ;; 00F363 : A0 18       ;
CODE_00F365:          BRA CODE_00F36D                     ;; 00F365 : 80 06       ;
                                                          ;;                      ;
CODE_00F367:          JSL.L CODE_05B34A                   ;; 00F367 : 22 4A B3 05 ;
CODE_00F36B:          LDY.B #$01                          ;; 00F36B : A0 01       ; \ Block to generate = #$01 
CODE_00F36D:          STY RAM_BlockBlock                  ;; 00F36D : 84 9C       ; / 
CODE_00F36F:          JSL.L GenerateTile                  ;; 00F36F : 22 B0 BE 00 ;
CODE_00F373:          JSR.W CODE_00FD5A                   ;; 00F373 : 20 5A FD    ;
Return00F376:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F377:          LDA.W $1420                         ;; 00F377 : AD 20 14    ;
CODE_00F37A:          INC.W $1420                         ;; 00F37A : EE 20 14    ;
CODE_00F37D:          CLC                                 ;; 00F37D : 18          ;
CODE_00F37E:          ADC.B #$09                          ;; 00F37E : 69 09       ;
CODE_00F380:          CMP.B #$0D                          ;; 00F380 : C9 0D       ;
CODE_00F382:          BCC CODE_00F386                     ;; 00F382 : 90 02       ;
CODE_00F384:          LDA.B #$0D                          ;; 00F384 : A9 0D       ;
CODE_00F386:          BRA CODE_00F38A                     ;; 00F386 : 80 02       ;
                                                          ;;                      ;
CODE_00F388:          LDA.B #$0D                          ;; 00F388 : A9 0D       ;
CODE_00F38A:          PHA                                 ;; 00F38A : 48          ;
CODE_00F38B:          JSL.L CODE_02AD34                   ;; 00F38B : 22 34 AD 02 ;
CODE_00F38F:          PLA                                 ;; 00F38F : 68          ;
CODE_00F390:          STA.W RAM_ScoreSprNum,Y             ;; 00F390 : 99 E1 16    ;
CODE_00F393:          LDA RAM_MarioXPos                   ;; 00F393 : A5 94       ;
CODE_00F395:          STA.W RAM_ScoreSprXLo,Y             ;; 00F395 : 99 ED 16    ;
CODE_00F398:          LDA RAM_MarioXPosHi                 ;; 00F398 : A5 95       ;
CODE_00F39A:          STA.W RAM_ScoreSprXHi,Y             ;; 00F39A : 99 F3 16    ;
CODE_00F39D:          LDA RAM_MarioYPos                   ;; 00F39D : A5 96       ;
CODE_00F39F:          STA.W RAM_ScoreSprYLo,Y             ;; 00F39F : 99 E7 16    ;
CODE_00F3A2:          LDA RAM_MarioYPosHi                 ;; 00F3A2 : A5 97       ;
CODE_00F3A4:          STA.W RAM_ScoreSprYHi,Y             ;; 00F3A4 : 99 F9 16    ;
CODE_00F3A7:          LDA.B #$30                          ;; 00F3A7 : A9 30       ;
CODE_00F3A9:          STA.W RAM_ScoreSprSpeedY,Y          ;; 00F3A9 : 99 FF 16    ;
CODE_00F3AC:          LDA.B #$00                          ;; 00F3AC : A9 00       ;
CODE_00F3AE:          STA.W $1705,Y                       ;; 00F3AE : 99 05 17    ;
Return00F3B1:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F3B2:          LDA.W $13BF                         ;; 00F3B2 : AD BF 13    ;
CODE_00F3B5:          LSR                                 ;; 00F3B5 : 4A          ;
CODE_00F3B6:          LSR                                 ;; 00F3B6 : 4A          ;
CODE_00F3B7:          LSR                                 ;; 00F3B7 : 4A          ;
CODE_00F3B8:          TAY                                 ;; 00F3B8 : A8          ;
CODE_00F3B9:          LDA.W $13BF                         ;; 00F3B9 : AD BF 13    ;
CODE_00F3BC:          AND.B #$07                          ;; 00F3BC : 29 07       ;
CODE_00F3BE:          TAX                                 ;; 00F3BE : AA          ;
CODE_00F3BF:          LDA.L DATA_05B35B,X                 ;; 00F3BF : BF 5B B3 05 ;
Return00F3C3:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F3C4:          CPY.B #$3F                          ;; 00F3C4 : C0 3F       ;
CODE_00F3C6:          BNE Return00F376                    ;; 00F3C6 : D0 AE       ;
CODE_00F3C8:          LDY $8F                             ;; 00F3C8 : A4 8F       ;
CODE_00F3CA:          BEQ CODE_00F3CF                     ;; 00F3CA : F0 03       ;
CODE_00F3CC:          JMP.W CODE_00F43F                   ;; 00F3CC : 4C 3F F4    ;
                                                          ;;                      ;
CODE_00F3CF:          PHX                                 ;; 00F3CF : DA          ;
CODE_00F3D0:          TAX                                 ;; 00F3D0 : AA          ;
CODE_00F3D1:          LDA RAM_MarioXPos                   ;; 00F3D1 : A5 94       ;
CODE_00F3D3:          TXY                                 ;; 00F3D3 : 9B          ;
CODE_00F3D4:          BEQ CODE_00F3D9                     ;; 00F3D4 : F0 03       ;
CODE_00F3D6:          EOR.B #$FF                          ;; 00F3D6 : 49 FF       ;
CODE_00F3D8:          INC A                               ;; 00F3D8 : 1A          ;
CODE_00F3D9:          AND.B #$0F                          ;; 00F3D9 : 29 0F       ;
CODE_00F3DB:          ASL                                 ;; 00F3DB : 0A          ;
CODE_00F3DC:          CLC                                 ;; 00F3DC : 18          ;
CODE_00F3DD:          ADC.B #$20                          ;; 00F3DD : 69 20       ;
CODE_00F3DF:          LDY.B #$05                          ;; 00F3DF : A0 05       ;
CODE_00F3E1:          BRA CODE_00F40A                     ;; 00F3E1 : 80 27       ;
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00F3E3:          .db $0A,$FF                         ;; 00F3E3               ;
                                                          ;;                      ;
DATA_00F3E5:          .db $02,$01,$08,$04                 ;; 00F3E5               ;
                                                          ;;                      ;
CODE_00F3E9:          XBA                                 ;; 00F3E9 : EB          ;
CODE_00F3EA:          TYA                                 ;; 00F3EA : 98          ;
CODE_00F3EB:          SEC                                 ;; 00F3EB : 38          ;
CODE_00F3EC:          SBC.B #$37                          ;; 00F3EC : E9 37       ;
CODE_00F3EE:          CMP.B #$02                          ;; 00F3EE : C9 02       ;
CODE_00F3F0:          BCS Return00F442                    ;; 00F3F0 : B0 50       ;
CODE_00F3F2:          TAY                                 ;; 00F3F2 : A8          ;
CODE_00F3F3:          LDA $92                             ;; 00F3F3 : A5 92       ;
CODE_00F3F5:          SBC.W DATA_00F3E3,Y                 ;; 00F3F5 : F9 E3 F3    ;
CODE_00F3F8:          CMP.B #$05                          ;; 00F3F8 : C9 05       ;
CODE_00F3FA:          BCS CODE_00F43F                     ;; 00F3FA : B0 43       ;
CODE_00F3FC:          PHX                                 ;; 00F3FC : DA          ;
CODE_00F3FD:          XBA                                 ;; 00F3FD : EB          ;
CODE_00F3FE:          TAX                                 ;; 00F3FE : AA          ;
CODE_00F3FF:          LDA.B #$20                          ;; 00F3FF : A9 20       ;
CODE_00F401:          LDY.W RAM_OnYoshi                   ;; 00F401 : AC 7A 18    ;
CODE_00F404:          BEQ CODE_00F408                     ;; 00F404 : F0 02       ;
CODE_00F406:          LDA.B #$30                          ;; 00F406 : A9 30       ;
CODE_00F408:          LDY.B #$06                          ;; 00F408 : A0 06       ;
CODE_00F40A:          STA $88                             ;; 00F40A : 85 88       ;
CODE_00F40C:          LDA RAM_ControllerA                 ;; 00F40C : A5 15       ;
CODE_00F40E:          AND.W DATA_00F3E5,X                 ;; 00F40E : 3D E5 F3    ;
CODE_00F411:          BEQ CODE_00F43E                     ;; 00F411 : F0 2B       ;
CODE_00F413:          STA RAM_SpritesLocked               ;; 00F413 : 85 9D       ;
CODE_00F415:          AND.B #$01                          ;; 00F415 : 29 01       ;
CODE_00F417:          STA RAM_MarioDirection              ;; 00F417 : 85 76       ;
CODE_00F419:          STX $89                             ;; 00F419 : 86 89       ;
CODE_00F41B:          TXA                                 ;; 00F41B : 8A          ;
CODE_00F41C:          LSR                                 ;; 00F41C : 4A          ;
CODE_00F41D:          TAX                                 ;; 00F41D : AA          ;
CODE_00F41E:          BNE CODE_00F430                     ;; 00F41E : D0 10       ;
CODE_00F420:          LDA.W $148F                         ;; 00F420 : AD 8F 14    ;
CODE_00F423:          BEQ CODE_00F430                     ;; 00F423 : F0 0B       ;
CODE_00F425:          LDA RAM_MarioDirection              ;; 00F425 : A5 76       ;
CODE_00F427:          EOR.B #$01                          ;; 00F427 : 49 01       ;
CODE_00F429:          STA RAM_MarioDirection              ;; 00F429 : 85 76       ;
CODE_00F42B:          LDA.B #$08                          ;; 00F42B : A9 08       ;
CODE_00F42D:          STA.W RAM_FaceCamImgTimer           ;; 00F42D : 8D 99 14    ;
CODE_00F430:          INX                                 ;; 00F430 : E8          ;
CODE_00F431:          STX.W RAM_YoshiInPipe               ;; 00F431 : 8E 19 14    ;
CODE_00F434:          STY RAM_MarioAnimation              ;; 00F434 : 84 71       ;
CODE_00F436:          JSR.W NoButtons                     ;; 00F436 : 20 2D F6    ;
CODE_00F439:          LDA.B #$04                          ;; 00F439 : A9 04       ;
CODE_00F43B:          STA.W $1DF9                         ;; 00F43B : 8D F9 1D    ; / Play sound effect 
CODE_00F43E:          PLX                                 ;; 00F43E : FA          ;
CODE_00F43F:          LDY.W $1693                         ;; 00F43F : AC 93 16    ;
Return00F442:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F443:          LDA RAM_MarioXPos                   ;; 00F443 : A5 94       ;
CODE_00F445:          CLC                                 ;; 00F445 : 18          ;
CODE_00F446:          ADC.B #$04                          ;; 00F446 : 69 04       ;
CODE_00F448:          AND.B #$0F                          ;; 00F448 : 29 0F       ;
CODE_00F44A:          CMP.B #$08                          ;; 00F44A : C9 08       ;
Return00F44C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F44D:          INX                                 ;; 00F44D : E8          ;
CODE_00F44E:          INX                                 ;; 00F44E : E8          ;
CODE_00F44F:          REP #$20                            ;; 00F44F : C2 20       ; Accum (16 bit) 
CODE_00F451:          LDA RAM_MarioXPos                   ;; 00F451 : A5 94       ;
CODE_00F453:          CLC                                 ;; 00F453 : 18          ;
CODE_00F454:          ADC.W DATA_00E830,X                 ;; 00F454 : 7D 30 E8    ;
CODE_00F457:          STA RAM_BlockYLo                    ;; 00F457 : 85 9A       ;
CODE_00F459:          LDA RAM_MarioYPos                   ;; 00F459 : A5 96       ;
CODE_00F45B:          CLC                                 ;; 00F45B : 18          ;
CODE_00F45C:          ADC.W DATA_00E89C,X                 ;; 00F45C : 7D 9C E8    ;
CODE_00F45F:          STA RAM_BlockXLo                    ;; 00F45F : 85 98       ;
CODE_00F461:          JSR.W CODE_00F465                   ;; 00F461 : 20 65 F4    ;
Return00F464:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F465:          SEP #$20                            ;; 00F465 : E2 20       ; Accum (8 bit) 
CODE_00F467:          STZ.W $1423                         ;; 00F467 : 9C 23 14    ;
CODE_00F46A:          PHX                                 ;; 00F46A : DA          ;
CODE_00F46B:          LDA $8E                             ;; 00F46B : A5 8E       ;
CODE_00F46D:          BPL CODE_00F472                     ;; 00F46D : 10 03       ;
CODE_00F46F:          JMP.W CODE_00F4EC                   ;; 00F46F : 4C EC F4    ;
                                                          ;;                      ;
CODE_00F472:          BNE CODE_00F4A6                     ;; 00F472 : D0 32       ;
CODE_00F474:          REP #$20                            ;; 00F474 : C2 20       ; Accum (16 bit) 
CODE_00F476:          LDA RAM_BlockXLo                    ;; 00F476 : A5 98       ;
CODE_00F478:          CMP.W #$01B0                        ;; 00F478 : C9 B0 01    ;
CODE_00F47B:          SEP #$20                            ;; 00F47B : E2 20       ; Accum (8 bit) 
CODE_00F47D:          BCS CODE_00F4A0                     ;; 00F47D : B0 21       ;
CODE_00F47F:          AND.B #$F0                          ;; 00F47F : 29 F0       ;
CODE_00F481:          STA $00                             ;; 00F481 : 85 00       ;
CODE_00F483:          LDX RAM_BlockYHi                    ;; 00F483 : A6 9B       ;
CODE_00F485:          CPX RAM_ScreensInLvl                ;; 00F485 : E4 5D       ;
CODE_00F487:          BCS CODE_00F4A0                     ;; 00F487 : B0 17       ;
CODE_00F489:          LDA RAM_BlockYLo                    ;; 00F489 : A5 9A       ;
CODE_00F48B:          LSR                                 ;; 00F48B : 4A          ;
CODE_00F48C:          LSR                                 ;; 00F48C : 4A          ;
CODE_00F48D:          LSR                                 ;; 00F48D : 4A          ;
CODE_00F48E:          LSR                                 ;; 00F48E : 4A          ;
CODE_00F48F:          ORA $00                             ;; 00F48F : 05 00       ;
CODE_00F491:          CLC                                 ;; 00F491 : 18          ;
CODE_00F492:          ADC.L DATA_00BA60,X                 ;; 00F492 : 7F 60 BA 00 ;
CODE_00F496:          STA $00                             ;; 00F496 : 85 00       ;
CODE_00F498:          LDA RAM_BlockXHi                    ;; 00F498 : A5 99       ;
CODE_00F49A:          ADC.L DATA_00BA9C,X                 ;; 00F49A : 7F 9C BA 00 ;
CODE_00F49E:          BRA CODE_00F4CD                     ;; 00F49E : 80 2D       ;
                                                          ;;                      ;
CODE_00F4A0:          PLX                                 ;; 00F4A0 : FA          ;
CODE_00F4A1:          LDY.B #$25                          ;; 00F4A1 : A0 25       ;
CODE_00F4A3:          LDA.B #$00                          ;; 00F4A3 : A9 00       ;
Return00F4A5:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F4A6:          LDA RAM_BlockYHi                    ;; 00F4A6 : A5 9B       ;
CODE_00F4A8:          CMP.B #$02                          ;; 00F4A8 : C9 02       ;
CODE_00F4AA:          BCS CODE_00F4E7                     ;; 00F4AA : B0 3B       ;
CODE_00F4AC:          LDX RAM_BlockXHi                    ;; 00F4AC : A6 99       ;
CODE_00F4AE:          CPX RAM_ScreensInLvl                ;; 00F4AE : E4 5D       ;
CODE_00F4B0:          BCS CODE_00F4E7                     ;; 00F4B0 : B0 35       ;
CODE_00F4B2:          LDA RAM_BlockXLo                    ;; 00F4B2 : A5 98       ;
CODE_00F4B4:          AND.B #$F0                          ;; 00F4B4 : 29 F0       ;
CODE_00F4B6:          STA $00                             ;; 00F4B6 : 85 00       ;
CODE_00F4B8:          LDA RAM_BlockYLo                    ;; 00F4B8 : A5 9A       ;
CODE_00F4BA:          LSR                                 ;; 00F4BA : 4A          ;
CODE_00F4BB:          LSR                                 ;; 00F4BB : 4A          ;
CODE_00F4BC:          LSR                                 ;; 00F4BC : 4A          ;
CODE_00F4BD:          LSR                                 ;; 00F4BD : 4A          ;
CODE_00F4BE:          ORA $00                             ;; 00F4BE : 05 00       ;
CODE_00F4C0:          CLC                                 ;; 00F4C0 : 18          ;
CODE_00F4C1:          ADC.L DATA_00BA80,X                 ;; 00F4C1 : 7F 80 BA 00 ;
CODE_00F4C5:          STA $00                             ;; 00F4C5 : 85 00       ;
CODE_00F4C7:          LDA RAM_BlockYHi                    ;; 00F4C7 : A5 9B       ;
CODE_00F4C9:          ADC.L DATA_00BABC,X                 ;; 00F4C9 : 7F BC BA 00 ;
CODE_00F4CD:          STA $01                             ;; 00F4CD : 85 01       ;
CODE_00F4CF:          LDA.B #$7E                          ;; 00F4CF : A9 7E       ;
CODE_00F4D1:          STA $02                             ;; 00F4D1 : 85 02       ;
CODE_00F4D3:          LDA [$00]                           ;; 00F4D3 : A7 00       ;
CODE_00F4D5:          STA.W $1693                         ;; 00F4D5 : 8D 93 16    ;
CODE_00F4D8:          INC $02                             ;; 00F4D8 : E6 02       ;
CODE_00F4DA:          PLX                                 ;; 00F4DA : FA          ;
CODE_00F4DB:          LDA [$00]                           ;; 00F4DB : A7 00       ;
CODE_00F4DD:          JSL.L CODE_00F545                   ;; 00F4DD : 22 45 F5 00 ;
CODE_00F4E1:          LDY.W $1693                         ;; 00F4E1 : AC 93 16    ;
CODE_00F4E4:          CMP.B #$00                          ;; 00F4E4 : C9 00       ;
Return00F4E6:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F4E7:          PLX                                 ;; 00F4E7 : FA          ;
CODE_00F4E8:          LDY.B #$25                          ;; 00F4E8 : A0 25       ;
CODE_00F4EA:          BRA CODE_00F4A3                     ;; 00F4EA : 80 B7       ;
                                                          ;;                      ;
CODE_00F4EC:          ASL                                 ;; 00F4EC : 0A          ;
CODE_00F4ED:          BNE CODE_00F51B                     ;; 00F4ED : D0 2C       ;
CODE_00F4EF:          REP #$20                            ;; 00F4EF : C2 20       ; Accum (16 bit) 
CODE_00F4F1:          LDA RAM_BlockXLo                    ;; 00F4F1 : A5 98       ;
CODE_00F4F3:          CMP.W #$01B0                        ;; 00F4F3 : C9 B0 01    ;
CODE_00F4F6:          SEP #$20                            ;; 00F4F6 : E2 20       ; Accum (8 bit) 
CODE_00F4F8:          BCS CODE_00F4E7                     ;; 00F4F8 : B0 ED       ;
CODE_00F4FA:          AND.B #$F0                          ;; 00F4FA : 29 F0       ;
CODE_00F4FC:          STA $00                             ;; 00F4FC : 85 00       ;
CODE_00F4FE:          LDX RAM_BlockYHi                    ;; 00F4FE : A6 9B       ;
CODE_00F500:          CPX.B #$10                          ;; 00F500 : E0 10       ;
CODE_00F502:          BCS CODE_00F4E7                     ;; 00F502 : B0 E3       ;
CODE_00F504:          LDA RAM_BlockYLo                    ;; 00F504 : A5 9A       ;
CODE_00F506:          LSR                                 ;; 00F506 : 4A          ;
CODE_00F507:          LSR                                 ;; 00F507 : 4A          ;
CODE_00F508:          LSR                                 ;; 00F508 : 4A          ;
CODE_00F509:          LSR                                 ;; 00F509 : 4A          ;
CODE_00F50A:          ORA $00                             ;; 00F50A : 05 00       ;
CODE_00F50C:          CLC                                 ;; 00F50C : 18          ;
CODE_00F50D:          ADC.L DATA_00BA70,X                 ;; 00F50D : 7F 70 BA 00 ;
CODE_00F511:          STA $00                             ;; 00F511 : 85 00       ;
CODE_00F513:          LDA RAM_BlockXHi                    ;; 00F513 : A5 99       ;
CODE_00F515:          ADC.L DATA_00BAAC,X                 ;; 00F515 : 7F AC BA 00 ;
CODE_00F519:          BRA CODE_00F4CD                     ;; 00F519 : 80 B2       ;
                                                          ;;                      ;
CODE_00F51B:          LDA RAM_BlockYHi                    ;; 00F51B : A5 9B       ;
CODE_00F51D:          CMP.B #$02                          ;; 00F51D : C9 02       ;
CODE_00F51F:          BCS CODE_00F4E7                     ;; 00F51F : B0 C6       ;
CODE_00F521:          LDX RAM_BlockXHi                    ;; 00F521 : A6 99       ;
CODE_00F523:          CPX.B #$0E                          ;; 00F523 : E0 0E       ;
CODE_00F525:          BCS CODE_00F4E7                     ;; 00F525 : B0 C0       ;
CODE_00F527:          LDA RAM_BlockXLo                    ;; 00F527 : A5 98       ;
CODE_00F529:          AND.B #$F0                          ;; 00F529 : 29 F0       ;
CODE_00F52B:          STA $00                             ;; 00F52B : 85 00       ;
CODE_00F52D:          LDA RAM_BlockYLo                    ;; 00F52D : A5 9A       ;
CODE_00F52F:          LSR                                 ;; 00F52F : 4A          ;
CODE_00F530:          LSR                                 ;; 00F530 : 4A          ;
CODE_00F531:          LSR                                 ;; 00F531 : 4A          ;
CODE_00F532:          LSR                                 ;; 00F532 : 4A          ;
CODE_00F533:          ORA $00                             ;; 00F533 : 05 00       ;
CODE_00F535:          CLC                                 ;; 00F535 : 18          ;
CODE_00F536:          ADC.L DATA_00BA8E,X                 ;; 00F536 : 7F 8E BA 00 ;
CODE_00F53A:          STA $00                             ;; 00F53A : 85 00       ;
CODE_00F53C:          LDA RAM_BlockYHi                    ;; 00F53C : A5 9B       ;
CODE_00F53E:          ADC.L DATA_00BACA,X                 ;; 00F53E : 7F CA BA 00 ;
CODE_00F542:          JMP.W CODE_00F4CD                   ;; 00F542 : 4C CD F4    ;
                                                          ;;                      ;
CODE_00F545:          TAY                                 ;; 00F545 : A8          ;
CODE_00F546:          BNE CODE_00F577                     ;; 00F546 : D0 2F       ;
CODE_00F548:          LDY.W $1693                         ;; 00F548 : AC 93 16    ; Load MAP16 tile number 
CODE_00F54B:          CPY.B #$29                          ;; 00F54B : C0 29       ; \ If block isn't "Invisible POW ? block", 
CODE_00F54D:          BNE PSwitchNotInvQBlk               ;; 00F54D : D0 0B       ; / branch to PSwitchNotInvQBlk 
CODE_00F54F:          LDY.W RAM_BluePowTimer              ;; 00F54F : AC AD 14    ;
CODE_00F552:          BEQ Return00F594                    ;; 00F552 : F0 40       ;
CODE_00F554:          LDA.B #$24                          ;; 00F554 : A9 24       ;
CODE_00F556:          STA.W $1693                         ;; 00F556 : 8D 93 16    ;
Return00F559:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
PSwitchNotInvQBlk:    CPY.B #$2B                          ;; ?QPWZ? : C0 2B       ; \ If block is "Coin", 
CODE_00F55C:          BEQ PSwitchCoinBrown                ;; 00F55C : F0 0E       ; / branch to PSwitchCoinBrown 
CODE_00F55E:          TYA                                 ;; 00F55E : 98          ;
CODE_00F55F:          SEC                                 ;; 00F55F : 38          ;
CODE_00F560:          SBC.B #$EC                          ;; 00F560 : E9 EC       ;
CODE_00F562:          CMP.B #$10                          ;; 00F562 : C9 10       ;
CODE_00F564:          BCS CODE_00F592                     ;; 00F564 : B0 2C       ;
CODE_00F566:          INC A                               ;; 00F566 : 1A          ;
CODE_00F567:          STA.W $1423                         ;; 00F567 : 8D 23 14    ;
CODE_00F56A:          BRA CODE_00F571                     ;; 00F56A : 80 05       ;
                                                          ;;                      ;
PSwitchCoinBrown:     LDY.W RAM_BluePowTimer              ;; ?QPWZ? : AC AD 14    ;
CODE_00F56F:          BEQ Return00F594                    ;; 00F56F : F0 23       ;
CODE_00F571:          LDA.B #$32                          ;; 00F571 : A9 32       ;
CODE_00F573:          STA.W $1693                         ;; 00F573 : 8D 93 16    ;
Return00F576:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F577:          LDY.W $1693                         ;; 00F577 : AC 93 16    ;
CODE_00F57A:          CPY.B #$32                          ;; 00F57A : C0 32       ;
CODE_00F57C:          BNE CODE_00F584                     ;; 00F57C : D0 06       ;
CODE_00F57E:          LDY.W RAM_BluePowTimer              ;; 00F57E : AC AD 14    ;
CODE_00F581:          BNE CODE_00F58D                     ;; 00F581 : D0 0A       ;
Return00F583:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F584:          CPY.B #$2F                          ;; 00F584 : C0 2F       ;
CODE_00F586:          BNE Return00F594                    ;; 00F586 : D0 0C       ;
CODE_00F588:          LDY.W RAM_SilverPowTimer            ;; 00F588 : AC AE 14    ;
CODE_00F58B:          BEQ Return00F594                    ;; 00F58B : F0 07       ;
CODE_00F58D:          LDY.B #$2B                          ;; 00F58D : A0 2B       ;
CODE_00F58F:          STY.W $1693                         ;; 00F58F : 8C 93 16    ;
CODE_00F592:          LDA.B #$00                          ;; 00F592 : A9 00       ;
Return00F594:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F595:          REP #$20                            ;; 00F595 : C2 20       ; Accum (16 bit) 
CODE_00F597:          LDA.W #$FF80                        ;; 00F597 : A9 80 FF    ;
CODE_00F59A:          CLC                                 ;; 00F59A : 18          ;
CODE_00F59B:          ADC RAM_ScreenBndryYLo              ;; 00F59B : 65 1C       ;
CODE_00F59D:          CMP RAM_MarioYPos                   ;; 00F59D : C5 96       ;
CODE_00F59F:          BMI CODE_00F5A3                     ;; 00F59F : 30 02       ;
CODE_00F5A1:          STA RAM_MarioYPos                   ;; 00F5A1 : 85 96       ;
CODE_00F5A3:          SEP #$20                            ;; 00F5A3 : E2 20       ; Accum (8 bit) 
CODE_00F5A5:          LDA $81                             ;; 00F5A5 : A5 81       ;
CODE_00F5A7:          DEC A                               ;; 00F5A7 : 3A          ;
CODE_00F5A8:          BMI Return00F5B6                    ;; 00F5A8 : 30 0C       ;
CODE_00F5AA:          LDA.W $1B95                         ;; 00F5AA : AD 95 1B    ;
CODE_00F5AD:          BEQ CODE_00F5B2                     ;; 00F5AD : F0 03       ;
CODE_00F5AF:          JMP.W CODE_00C95B                   ;; 00F5AF : 4C 5B C9    ;
                                                          ;;                      ;
CODE_00F5B2:          JSL.L CODE_00F60A                   ;; 00F5B2 : 22 0A F6 00 ;
Return00F5B6:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
HurtMario:            LDA RAM_MarioAnimation              ;; ?QPWZ? : A5 71       ; \ Return if animation sequence activated 
CODE_00F5B9:          BNE Return00F628                    ;; 00F5B9 : D0 6D       ; / 
CODE_00F5BB:          LDA.W $1497                         ;; 00F5BB : AD 97 14    ; \ If flashing... 
CODE_00F5BE:          ORA.W $1490                         ;; 00F5BE : 0D 90 14    ;  | ...or have star... 
CODE_00F5C1:          ORA.W $1493                         ;; 00F5C1 : 0D 93 14    ;  | ...or level ending... 
CODE_00F5C4:          BNE Return00F628                    ;; 00F5C4 : D0 62       ; / ...return 
CODE_00F5C6:          STZ.W $18E3                         ;; 00F5C6 : 9C E3 18    ;
CODE_00F5C9:          LDA.W RAM_WallWalkStatus            ;; 00F5C9 : AD E3 13    ;
CODE_00F5CC:          BEQ CODE_00F5D5                     ;; 00F5CC : F0 07       ;
ADDR_00F5CE:          PHB                                 ;; 00F5CE : 8B          ;
ADDR_00F5CF:          PHK                                 ;; 00F5CF : 4B          ;
ADDR_00F5D0:          PLB                                 ;; 00F5D0 : AB          ;
ADDR_00F5D1:          JSR.W ADDR_00EB42                   ;; 00F5D1 : 20 42 EB    ;
ADDR_00F5D4:          PLB                                 ;; 00F5D4 : AB          ;
CODE_00F5D5:          LDA RAM_MarioPowerUp                ;; 00F5D5 : A5 19       ; \ If Mario is small, kill him 
CODE_00F5D7:          BEQ KillMario                       ;; 00F5D7 : F0 2D       ; / 
CODE_00F5D9:          CMP.B #$02                          ;; 00F5D9 : C9 02       ; \ Branch if not Caped Mario 
CODE_00F5DB:          BNE PowerDown                       ;; 00F5DB : D0 16       ; / 
CODE_00F5DD:          LDA.W $1407                         ;; 00F5DD : AD 07 14    ; \ Branch if not soaring 
CODE_00F5E0:          BEQ PowerDown                       ;; 00F5E0 : F0 11       ; / 
CancelSoaring:        LDY.B #$0F                          ;; ?QPWZ? : A0 0F       ; \ Break Mario out of soaring 
CODE_00F5E4:          STY.W $1DF9                         ;; 00F5E4 : 8C F9 1D    ;  | (Play sound effect) 
CODE_00F5E7:          LDA.B #$01                          ;; 00F5E7 : A9 01       ;  | (Set spin jump flag) 
CODE_00F5E9:          STA.W RAM_IsSpinJump                ;; 00F5E9 : 8D 0D 14    ;  | 
CODE_00F5EC:          LDA.B #$30                          ;; 00F5EC : A9 30       ;  | (Set flashing timer) 
CODE_00F5EE:          STA.W $1497                         ;; 00F5EE : 8D 97 14    ; / 
CODE_00F5F1:          BRA CODE_00F622                     ;; 00F5F1 : 80 2F       ;
                                                          ;;                      ;
PowerDown:            LDY.B #$04                          ;; ?QPWZ? : A0 04       ; \ Play sound effect 
CODE_00F5F5:          STY.W $1DF9                         ;; 00F5F5 : 8C F9 1D    ; / 
CODE_00F5F8:          JSL.L CODE_028008                   ;; 00F5F8 : 22 08 80 02 ;
CODE_00F5FC:          LDA.B #$01                          ;; 00F5FC : A9 01       ; \ Set power down animation 
CODE_00F5FE:          STA RAM_MarioAnimation              ;; 00F5FE : 85 71       ; / 
CODE_00F600:          STZ RAM_MarioPowerUp                ;; 00F600 : 64 19       ; Mario status = Small 
CODE_00F602:          LDA.B #$2F                          ;; 00F602 : A9 2F       ;
CODE_00F604:          BRA CODE_00F61D                     ;; 00F604 : 80 17       ;
                                                          ;;                      ;
KillMario:            LDA.B #$90                          ;; ?QPWZ? : A9 90       ; \ Mario Y speed = #$90 
CODE_00F608:          STA RAM_MarioSpeedY                 ;; 00F608 : 85 7D       ; / 
CODE_00F60A:          LDA.B #$09                          ;; 00F60A : A9 09       ; \ 
CODE_00F60C:          STA.W $1DFB                         ;; 00F60C : 8D FB 1D    ; / Change music 
CODE_00F60F:          LDA.B #$FF                          ;; 00F60F : A9 FF       ;
CODE_00F611:          STA.W $0DDA                         ;; 00F611 : 8D DA 0D    ;
CODE_00F614:          LDA.B #$09                          ;; 00F614 : A9 09       ; \ Animation sequence = Kill Mario 
CODE_00F616:          STA RAM_MarioAnimation              ;; 00F616 : 85 71       ; / 
CODE_00F618:          STZ.W RAM_IsSpinJump                ;; 00F618 : 9C 0D 14    ; Spin jump flag = 0 
CODE_00F61B:          LDA.B #$30                          ;; 00F61B : A9 30       ;
CODE_00F61D:          STA.W $1496                         ;; 00F61D : 8D 96 14    ; Set hurt frame timer 
CODE_00F620:          STA RAM_SpritesLocked               ;; 00F620 : 85 9D       ; set lock sprite timer 
CODE_00F622:          STZ.W $1407                         ;; 00F622 : 9C 07 14    ; Cape status = 0 
CODE_00F625:          STZ.W $188A                         ;; 00F625 : 9C 8A 18    ;
Return00F628:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F629:          JSL.L KillMario                     ;; 00F629 : 22 06 F6 00 ;
NoButtons:            STZ RAM_ControllerA                 ;; ?QPWZ? : 64 15       ; Zero RAM mirrors for controller Input 
CODE_00F62F:          STZ $16                             ;; 00F62F : 64 16       ;
CODE_00F631:          STZ RAM_ControllerB                 ;; 00F631 : 64 17       ;
CODE_00F633:          STZ $18                             ;; 00F633 : 64 18       ;
Return00F635:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F636:          REP #$20                            ;; 00F636 : C2 20       ; Accum (16 bit) 
CODE_00F638:          LDX.B #$00                          ;; 00F638 : A2 00       ;
CODE_00F63A:          LDA $09                             ;; 00F63A : A5 09       ;
CODE_00F63C:          ORA.W #$0800                        ;; 00F63C : 09 00 08    ;
CODE_00F63F:          CMP $09                             ;; 00F63F : C5 09       ;
CODE_00F641:          BEQ CODE_00F644                     ;; 00F641 : F0 01       ;
CODE_00F643:          CLC                                 ;; 00F643 : 18          ;
CODE_00F644:          AND.W #$F700                        ;; 00F644 : 29 00 F7    ;
CODE_00F647:          ROR                                 ;; 00F647 : 6A          ;
CODE_00F648:          LSR                                 ;; 00F648 : 4A          ;
CODE_00F649:          ADC.W #$2000                        ;; 00F649 : 69 00 20    ;
CODE_00F64C:          STA.W $0D85                         ;; 00F64C : 8D 85 0D    ;
CODE_00F64F:          CLC                                 ;; 00F64F : 18          ;
CODE_00F650:          ADC.W #$0200                        ;; 00F650 : 69 00 02    ;
CODE_00F653:          STA.W $0D8F                         ;; 00F653 : 8D 8F 0D    ;
CODE_00F656:          LDX.B #$00                          ;; 00F656 : A2 00       ;
CODE_00F658:          LDA $0A                             ;; 00F658 : A5 0A       ;
CODE_00F65A:          ORA.W #$0800                        ;; 00F65A : 09 00 08    ;
CODE_00F65D:          CMP $0A                             ;; 00F65D : C5 0A       ;
CODE_00F65F:          BEQ CODE_00F662                     ;; 00F65F : F0 01       ;
CODE_00F661:          CLC                                 ;; 00F661 : 18          ;
CODE_00F662:          AND.W #$F700                        ;; 00F662 : 29 00 F7    ;
CODE_00F665:          ROR                                 ;; 00F665 : 6A          ;
CODE_00F666:          LSR                                 ;; 00F666 : 4A          ;
CODE_00F667:          ADC.W #$2000                        ;; 00F667 : 69 00 20    ;
CODE_00F66A:          STA.W $0D87                         ;; 00F66A : 8D 87 0D    ;
CODE_00F66D:          CLC                                 ;; 00F66D : 18          ;
CODE_00F66E:          ADC.W #$0200                        ;; 00F66E : 69 00 02    ;
CODE_00F671:          STA.W $0D91                         ;; 00F671 : 8D 91 0D    ;
CODE_00F674:          LDA $0B                             ;; 00F674 : A5 0B       ;
CODE_00F676:          AND.W #$FF00                        ;; 00F676 : 29 00 FF    ;
CODE_00F679:          LSR                                 ;; 00F679 : 4A          ;
CODE_00F67A:          LSR                                 ;; 00F67A : 4A          ;
CODE_00F67B:          LSR                                 ;; 00F67B : 4A          ;
CODE_00F67C:          ADC.W #$2000                        ;; 00F67C : 69 00 20    ;
CODE_00F67F:          STA.W $0D89                         ;; 00F67F : 8D 89 0D    ;
CODE_00F682:          CLC                                 ;; 00F682 : 18          ;
CODE_00F683:          ADC.W #$0200                        ;; 00F683 : 69 00 02    ;
CODE_00F686:          STA.W $0D93                         ;; 00F686 : 8D 93 0D    ;
CODE_00F689:          LDA $0C                             ;; 00F689 : A5 0C       ;
CODE_00F68B:          AND.W #$FF00                        ;; 00F68B : 29 00 FF    ;
CODE_00F68E:          LSR                                 ;; 00F68E : 4A          ;
CODE_00F68F:          LSR                                 ;; 00F68F : 4A          ;
CODE_00F690:          LSR                                 ;; 00F690 : 4A          ;
CODE_00F691:          ADC.W #$2000                        ;; 00F691 : 69 00 20    ;
CODE_00F694:          STA.W $0D99                         ;; 00F694 : 8D 99 0D    ;
CODE_00F697:          SEP #$20                            ;; 00F697 : E2 20       ; Accum (8 bit) 
CODE_00F699:          LDA.B #$0A                          ;; 00F699 : A9 0A       ;
CODE_00F69B:          STA.W $0D84                         ;; 00F69B : 8D 84 0D    ;
Return00F69E:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00F69F:          .db $64,$00,$7C,$00                 ;; 00F69F               ;
                                                          ;;                      ;
DATA_00F6A3:          .db $00,$00,$FF,$FF                 ;; 00F6A3               ;
                                                          ;;                      ;
DATA_00F6A7:          .db $FD,$FF,$05,$00,$FA,$FF         ;; 00F6A7               ;
                                                          ;;                      ;
DATA_00F6AD:          .db $00,$00,$00,$00,$C0,$00         ;; 00F6AD               ;
                                                          ;;                      ;
DATA_00F6B3:          .db $90,$00,$60,$00,$00,$00,$00,$00 ;; 00F6B3               ;
                      .db $00,$00,$00,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F6BF:          .db $00,$00,$FE,$FF,$02,$00,$00,$00 ;; 00F6BF               ;
                      .db $FE,$FF,$02,$00                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F6CB:          .db $00,$00,$20,$00                 ;; 00F6CB               ;
                                                          ;;                      ;
DATA_00F6CF:          .db $D0,$00,$00,$00,$20,$00,$D0,$00 ;; 00F6CF               ;
                      .db $01,$00,$FF,$FF                 ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00F6DB:          PHB                                 ;; 00F6DB : 8B          ;
CODE_00F6DC:          PHK                                 ;; 00F6DC : 4B          ;
CODE_00F6DD:          PLB                                 ;; 00F6DD : AB          ;
CODE_00F6DE:          REP #$20                            ;; 00F6DE : C2 20       ; Accum (16 bit) 
CODE_00F6E0:          LDA.W $142A                         ;; 00F6E0 : AD 2A 14    ;
CODE_00F6E3:          SEC                                 ;; 00F6E3 : 38          ;
CODE_00F6E4:          SBC.W #$000C                        ;; 00F6E4 : E9 0C 00    ;
CODE_00F6E7:          STA.W $142C                         ;; 00F6E7 : 8D 2C 14    ;
CODE_00F6EA:          CLC                                 ;; 00F6EA : 18          ;
CODE_00F6EB:          ADC.W #$0018                        ;; 00F6EB : 69 18 00    ;
CODE_00F6EE:          STA.W $142E                         ;; 00F6EE : 8D 2E 14    ;
CODE_00F6F1:          LDA.W $1462                         ;; 00F6F1 : AD 62 14    ;
CODE_00F6F4:          STA RAM_ScreenBndryXLo              ;; 00F6F4 : 85 1A       ;
CODE_00F6F6:          LDA.W $1464                         ;; 00F6F6 : AD 64 14    ;
CODE_00F6F9:          STA RAM_ScreenBndryYLo              ;; 00F6F9 : 85 1C       ;
CODE_00F6FB:          LDA.W $1466                         ;; 00F6FB : AD 66 14    ;
CODE_00F6FE:          STA $1E                             ;; 00F6FE : 85 1E       ;
CODE_00F700:          LDA.W $1468                         ;; 00F700 : AD 68 14    ;
CODE_00F703:          STA $20                             ;; 00F703 : 85 20       ;
CODE_00F705:          LDA RAM_IsVerticalLvl               ;; 00F705 : A5 5B       ;
CODE_00F707:          LSR                                 ;; 00F707 : 4A          ;
CODE_00F708:          BCC CODE_00F70D                     ;; 00F708 : 90 03       ;
CODE_00F70A:          JMP.W CODE_00F75C                   ;; 00F70A : 4C 5C F7    ;
                                                          ;;                      ;
CODE_00F70D:          LDA.W #$00C0                        ;; 00F70D : A9 C0 00    ;
CODE_00F710:          JSR.W CODE_00F7F4                   ;; 00F710 : 20 F4 F7    ;
CODE_00F713:          LDY.W $1411                         ;; 00F713 : AC 11 14    ;
CODE_00F716:          BEQ CODE_00F75A                     ;; 00F716 : F0 42       ;
CODE_00F718:          LDY.B #$02                          ;; 00F718 : A0 02       ;
CODE_00F71A:          LDA RAM_MarioXPos                   ;; 00F71A : A5 94       ;
CODE_00F71C:          SEC                                 ;; 00F71C : 38          ;
CODE_00F71D:          SBC RAM_ScreenBndryXLo              ;; 00F71D : E5 1A       ;
CODE_00F71F:          STA $00                             ;; 00F71F : 85 00       ;
CODE_00F721:          CMP.W $142A                         ;; 00F721 : CD 2A 14    ;
CODE_00F724:          BPL CODE_00F728                     ;; 00F724 : 10 02       ;
CODE_00F726:          LDY.B #$00                          ;; 00F726 : A0 00       ;
CODE_00F728:          STY $55                             ;; 00F728 : 84 55       ;
CODE_00F72A:          STY $56                             ;; 00F72A : 84 56       ;
CODE_00F72C:          SEC                                 ;; 00F72C : 38          ;
CODE_00F72D:          SBC.W $142C,Y                       ;; 00F72D : F9 2C 14    ;
CODE_00F730:          BEQ CODE_00F75A                     ;; 00F730 : F0 28       ;
CODE_00F732:          STA $02                             ;; 00F732 : 85 02       ;
CODE_00F734:          EOR.W DATA_00F6A3,Y                 ;; 00F734 : 59 A3 F6    ;
CODE_00F737:          BPL CODE_00F75A                     ;; 00F737 : 10 21       ;
CODE_00F739:          JSR.W CODE_00F8AB                   ;; 00F739 : 20 AB F8    ;
CODE_00F73C:          LDA $02                             ;; 00F73C : A5 02       ;
CODE_00F73E:          CLC                                 ;; 00F73E : 18          ;
CODE_00F73F:          ADC RAM_ScreenBndryXLo              ;; 00F73F : 65 1A       ;
CODE_00F741:          BPL CODE_00F746                     ;; 00F741 : 10 03       ;
CODE_00F743:          LDA.W #$0000                        ;; 00F743 : A9 00 00    ;
CODE_00F746:          STA RAM_ScreenBndryXLo              ;; 00F746 : 85 1A       ;
CODE_00F748:          LDA $5E                             ;; 00F748 : A5 5E       ;
CODE_00F74A:          DEC A                               ;; 00F74A : 3A          ;
CODE_00F74B:          XBA                                 ;; 00F74B : EB          ;
CODE_00F74C:          AND.W #$FF00                        ;; 00F74C : 29 00 FF    ;
CODE_00F74F:          BPL CODE_00F754                     ;; 00F74F : 10 03       ;
CODE_00F751:          LDA.W #$0080                        ;; 00F751 : A9 80 00    ;
CODE_00F754:          CMP RAM_ScreenBndryXLo              ;; 00F754 : C5 1A       ;
CODE_00F756:          BPL CODE_00F75A                     ;; 00F756 : 10 02       ;
CODE_00F758:          STA RAM_ScreenBndryXLo              ;; 00F758 : 85 1A       ;
CODE_00F75A:          BRA CODE_00F79D                     ;; 00F75A : 80 41       ;
                                                          ;;                      ;
CODE_00F75C:          LDA $5F                             ;; 00F75C : A5 5F       ;
CODE_00F75E:          DEC A                               ;; 00F75E : 3A          ;
CODE_00F75F:          XBA                                 ;; 00F75F : EB          ;
CODE_00F760:          AND.W #$FF00                        ;; 00F760 : 29 00 FF    ;
CODE_00F763:          JSR.W CODE_00F7F4                   ;; 00F763 : 20 F4 F7    ;
CODE_00F766:          LDY.W $1411                         ;; 00F766 : AC 11 14    ;
CODE_00F769:          BEQ CODE_00F79D                     ;; 00F769 : F0 32       ;
CODE_00F76B:          LDY.B #$00                          ;; 00F76B : A0 00       ;
CODE_00F76D:          LDA RAM_MarioXPos                   ;; 00F76D : A5 94       ;
CODE_00F76F:          SEC                                 ;; 00F76F : 38          ;
CODE_00F770:          SBC RAM_ScreenBndryXLo              ;; 00F770 : E5 1A       ;
CODE_00F772:          STA $00                             ;; 00F772 : 85 00       ;
CODE_00F774:          CMP.W $142A                         ;; 00F774 : CD 2A 14    ;
CODE_00F777:          BMI CODE_00F77B                     ;; 00F777 : 30 02       ;
CODE_00F779:          LDY.B #$02                          ;; 00F779 : A0 02       ;
CODE_00F77B:          SEC                                 ;; 00F77B : 38          ;
CODE_00F77C:          SBC.W $142C,Y                       ;; 00F77C : F9 2C 14    ;
CODE_00F77F:          STA $02                             ;; 00F77F : 85 02       ;
CODE_00F781:          EOR.W DATA_00F6A3,Y                 ;; 00F781 : 59 A3 F6    ;
CODE_00F784:          BPL CODE_00F79D                     ;; 00F784 : 10 17       ;
CODE_00F786:          JSR.W CODE_00F8AB                   ;; 00F786 : 20 AB F8    ;
CODE_00F789:          LDA $02                             ;; 00F789 : A5 02       ;
CODE_00F78B:          CLC                                 ;; 00F78B : 18          ;
CODE_00F78C:          ADC RAM_ScreenBndryXLo              ;; 00F78C : 65 1A       ;
CODE_00F78E:          BPL CODE_00F793                     ;; 00F78E : 10 03       ;
CODE_00F790:          LDA.W #$0000                        ;; 00F790 : A9 00 00    ;
CODE_00F793:          CMP.W #$0101                        ;; 00F793 : C9 01 01    ;
CODE_00F796:          BMI CODE_00F79B                     ;; 00F796 : 30 03       ;
CODE_00F798:          LDA.W #$0100                        ;; 00F798 : A9 00 01    ;
CODE_00F79B:          STA RAM_ScreenBndryXLo              ;; 00F79B : 85 1A       ;
CODE_00F79D:          LDY.W $1413                         ;; 00F79D : AC 13 14    ;
CODE_00F7A0:          BEQ CODE_00F7AA                     ;; 00F7A0 : F0 08       ;
CODE_00F7A2:          LDA RAM_ScreenBndryXLo              ;; 00F7A2 : A5 1A       ;
CODE_00F7A4:          DEY                                 ;; 00F7A4 : 88          ;
CODE_00F7A5:          BEQ CODE_00F7A8                     ;; 00F7A5 : F0 01       ;
CODE_00F7A7:          LSR                                 ;; 00F7A7 : 4A          ;
CODE_00F7A8:          STA $1E                             ;; 00F7A8 : 85 1E       ;
CODE_00F7AA:          LDY.W $1414                         ;; 00F7AA : AC 14 14    ;
CODE_00F7AD:          BEQ CODE_00F7C2                     ;; 00F7AD : F0 13       ;
CODE_00F7AF:          LDA RAM_ScreenBndryYLo              ;; 00F7AF : A5 1C       ;
CODE_00F7B1:          DEY                                 ;; 00F7B1 : 88          ;
CODE_00F7B2:          BEQ CODE_00F7BC                     ;; 00F7B2 : F0 08       ;
CODE_00F7B4:          LSR                                 ;; 00F7B4 : 4A          ;
CODE_00F7B5:          DEY                                 ;; 00F7B5 : 88          ;
CODE_00F7B6:          BEQ CODE_00F7BC                     ;; 00F7B6 : F0 04       ;
CODE_00F7B8:          LSR                                 ;; 00F7B8 : 4A          ;
CODE_00F7B9:          LSR                                 ;; 00F7B9 : 4A          ;
CODE_00F7BA:          LSR                                 ;; 00F7BA : 4A          ;
CODE_00F7BB:          LSR                                 ;; 00F7BB : 4A          ;
CODE_00F7BC:          CLC                                 ;; 00F7BC : 18          ;
CODE_00F7BD:          ADC.W $1417                         ;; 00F7BD : 6D 17 14    ;
CODE_00F7C0:          STA $20                             ;; 00F7C0 : 85 20       ;
CODE_00F7C2:          SEP #$20                            ;; 00F7C2 : E2 20       ; Accum (8 bit) 
CODE_00F7C4:          LDA RAM_ScreenBndryXLo              ;; 00F7C4 : A5 1A       ;
CODE_00F7C6:          SEC                                 ;; 00F7C6 : 38          ;
CODE_00F7C7:          SBC.W $1462                         ;; 00F7C7 : ED 62 14    ;
CODE_00F7CA:          STA.W $17BD                         ;; 00F7CA : 8D BD 17    ;
CODE_00F7CD:          LDA RAM_ScreenBndryYLo              ;; 00F7CD : A5 1C       ;
CODE_00F7CF:          SEC                                 ;; 00F7CF : 38          ;
CODE_00F7D0:          SBC.W $1464                         ;; 00F7D0 : ED 64 14    ;
CODE_00F7D3:          STA.W $17BC                         ;; 00F7D3 : 8D BC 17    ;
CODE_00F7D6:          LDA $1E                             ;; 00F7D6 : A5 1E       ;
CODE_00F7D8:          SEC                                 ;; 00F7D8 : 38          ;
CODE_00F7D9:          SBC.W $1466                         ;; 00F7D9 : ED 66 14    ;
CODE_00F7DC:          STA.W $17BF                         ;; 00F7DC : 8D BF 17    ;
CODE_00F7DF:          LDA $20                             ;; 00F7DF : A5 20       ;
CODE_00F7E1:          SEC                                 ;; 00F7E1 : 38          ;
CODE_00F7E2:          SBC.W $1468                         ;; 00F7E2 : ED 68 14    ;
CODE_00F7E5:          STA.W $17BE                         ;; 00F7E5 : 8D BE 17    ;
CODE_00F7E8:          LDX.B #$07                          ;; 00F7E8 : A2 07       ;
CODE_00F7EA:          LDA RAM_ScreenBndryXLo,X            ;; 00F7EA : B5 1A       ;
CODE_00F7EC:          STA.W $1462,X                       ;; 00F7EC : 9D 62 14    ;
CODE_00F7EF:          DEX                                 ;; 00F7EF : CA          ;
CODE_00F7F0:          BPL CODE_00F7EA                     ;; 00F7F0 : 10 F8       ;
CODE_00F7F2:          PLB                                 ;; 00F7F2 : AB          ;
Return00F7F3:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00F7F4:          LDX.W $1412                         ;; 00F7F4 : AE 12 14    ;
CODE_00F7F7:          BNE CODE_00F7FA                     ;; 00F7F7 : D0 01       ;
Return00F7F9:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F7FA:          STA $04                             ;; 00F7FA : 85 04       ; Accum (16 bit) 
CODE_00F7FC:          LDY.B #$00                          ;; 00F7FC : A0 00       ;
CODE_00F7FE:          LDA RAM_MarioYPos                   ;; 00F7FE : A5 96       ;
CODE_00F800:          SEC                                 ;; 00F800 : 38          ;
CODE_00F801:          SBC RAM_ScreenBndryYLo              ;; 00F801 : E5 1C       ;
CODE_00F803:          STA $00                             ;; 00F803 : 85 00       ;
CODE_00F805:          CMP.W #$0070                        ;; 00F805 : C9 70 00    ;
CODE_00F808:          BMI CODE_00F80C                     ;; 00F808 : 30 02       ;
CODE_00F80A:          LDY.B #$02                          ;; 00F80A : A0 02       ;
CODE_00F80C:          STY $55                             ;; 00F80C : 84 55       ;
CODE_00F80E:          STY $56                             ;; 00F80E : 84 56       ;
CODE_00F810:          SEC                                 ;; 00F810 : 38          ;
CODE_00F811:          SBC.W DATA_00F69F,Y                 ;; 00F811 : F9 9F F6    ;
CODE_00F814:          STA $02                             ;; 00F814 : 85 02       ;
CODE_00F816:          EOR.W DATA_00F6A3,Y                 ;; 00F816 : 59 A3 F6    ;
CODE_00F819:          BMI CODE_00F81F                     ;; 00F819 : 30 04       ;
CODE_00F81B:          LDY.B #$02                          ;; 00F81B : A0 02       ;
CODE_00F81D:          STZ $02                             ;; 00F81D : 64 02       ;
CODE_00F81F:          LDA $02                             ;; 00F81F : A5 02       ;
CODE_00F821:          BMI CODE_00F82A                     ;; 00F821 : 30 07       ;
CODE_00F823:          LDX.B #$00                          ;; 00F823 : A2 00       ;
CODE_00F825:          STX.W $1404                         ;; 00F825 : 8E 04 14    ;
CODE_00F828:          BRA CODE_00F883                     ;; 00F828 : 80 59       ;
                                                          ;;                      ;
CODE_00F82A:          SEP #$20                            ;; 00F82A : E2 20       ; Accum (8 bit) 
CODE_00F82C:          LDA.W RAM_WallWalkStatus            ;; 00F82C : AD E3 13    ;
CODE_00F82F:          CMP.B #$06                          ;; 00F82F : C9 06       ;
CODE_00F831:          BCS CODE_00F845                     ;; 00F831 : B0 12       ;
CODE_00F833:          LDA.W RAM_YoshiHasWingsB            ;; 00F833 : AD 10 14    ; \ If winged Yoshi... 
CODE_00F836:          LSR                                 ;; 00F836 : 4A          ;  | 
CODE_00F837:          ORA.W $149F                         ;; 00F837 : 0D 9F 14    ;
CODE_00F83A:          ORA RAM_IsClimbing                  ;; 00F83A : 05 74       ;  | ...or climbing 
CODE_00F83C:          ORA.W $13F3                         ;; 00F83C : 0D F3 13    ;
CODE_00F83F:          ORA.W $18C2                         ;; 00F83F : 0D C2 18    ;
CODE_00F842:          ORA.W $1406                         ;; 00F842 : 0D 06 14    ;
CODE_00F845:          TAX                                 ;; 00F845 : AA          ;
CODE_00F846:          REP #$20                            ;; 00F846 : C2 20       ; Accum (16 bit) 
CODE_00F848:          BNE CODE_00F869                     ;; 00F848 : D0 1F       ;
CODE_00F84A:          LDX.W RAM_OnYoshi                   ;; 00F84A : AE 7A 18    ;
CODE_00F84D:          BEQ CODE_00F856                     ;; 00F84D : F0 07       ;
CODE_00F84F:          LDX.W RAM_YoshiHasWings             ;; 00F84F : AE 1E 14    ; \ Branch if 141E >= #$02 
CODE_00F852:          CPX.B #$02                          ;; 00F852 : E0 02       ;  | 
CODE_00F854:          BCS CODE_00F869                     ;; 00F854 : B0 13       ; / 
CODE_00F856:          LDX RAM_IsSwimming                  ;; 00F856 : A6 75       ;
CODE_00F858:          BEQ CODE_00F85E                     ;; 00F858 : F0 04       ;
CODE_00F85A:          LDX RAM_IsFlying                    ;; 00F85A : A6 72       ;
CODE_00F85C:          BNE CODE_00F869                     ;; 00F85C : D0 0B       ;
CODE_00F85E:          LDX.W $1412                         ;; 00F85E : AE 12 14    ;
CODE_00F861:          DEX                                 ;; 00F861 : CA          ;
CODE_00F862:          BEQ CODE_00F875                     ;; 00F862 : F0 11       ;
CODE_00F864:          LDX.W $13F1                         ;; 00F864 : AE F1 13    ;
CODE_00F867:          BNE CODE_00F875                     ;; 00F867 : D0 0C       ;
CODE_00F869:          STX.W $13F1                         ;; 00F869 : 8E F1 13    ;
CODE_00F86C:          LDX.W $13F1                         ;; 00F86C : AE F1 13    ;
CODE_00F86F:          BNE CODE_00F881                     ;; 00F86F : D0 10       ;
CODE_00F871:          LDY.B #$04                          ;; 00F871 : A0 04       ;
CODE_00F873:          BRA CODE_00F881                     ;; 00F873 : 80 0C       ;
                                                          ;;                      ;
CODE_00F875:          LDX.W $1404                         ;; 00F875 : AE 04 14    ;
CODE_00F878:          BNE CODE_00F881                     ;; 00F878 : D0 07       ;
CODE_00F87A:          LDX RAM_IsFlying                    ;; 00F87A : A6 72       ;
CODE_00F87C:          BNE Return00F8AA                    ;; 00F87C : D0 2C       ;
CODE_00F87E:          INC.W $1404                         ;; 00F87E : EE 04 14    ;
CODE_00F881:          LDA $02                             ;; 00F881 : A5 02       ;
CODE_00F883:          SEC                                 ;; 00F883 : 38          ;
CODE_00F884:          SBC.W DATA_00F6A7,Y                 ;; 00F884 : F9 A7 F6    ;
CODE_00F887:          EOR.W DATA_00F6A7,Y                 ;; 00F887 : 59 A7 F6    ;
CODE_00F88A:          ASL                                 ;; 00F88A : 0A          ;
CODE_00F88B:          LDA $02                             ;; 00F88B : A5 02       ;
CODE_00F88D:          BCS CODE_00F892                     ;; 00F88D : B0 03       ;
CODE_00F88F:          LDA.W DATA_00F6A7,Y                 ;; 00F88F : B9 A7 F6    ;
CODE_00F892:          CLC                                 ;; 00F892 : 18          ;
CODE_00F893:          ADC RAM_ScreenBndryYLo              ;; 00F893 : 65 1C       ;
CODE_00F895:          CMP.W DATA_00F6AD,Y                 ;; 00F895 : D9 AD F6    ;
CODE_00F898:          BPL CODE_00F89D                     ;; 00F898 : 10 03       ;
CODE_00F89A:          LDA.W DATA_00F6AD,Y                 ;; 00F89A : B9 AD F6    ;
CODE_00F89D:          STA RAM_ScreenBndryYLo              ;; 00F89D : 85 1C       ;
CODE_00F89F:          LDA $04                             ;; 00F89F : A5 04       ;
CODE_00F8A1:          CMP RAM_ScreenBndryYLo              ;; 00F8A1 : C5 1C       ;
CODE_00F8A3:          BPL Return00F8AA                    ;; 00F8A3 : 10 05       ;
CODE_00F8A5:          STA RAM_ScreenBndryYLo              ;; 00F8A5 : 85 1C       ;
CODE_00F8A7:          STZ.W $13F1                         ;; 00F8A7 : 9C F1 13    ;
Return00F8AA:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F8AB:          LDY.W $13FD                         ;; 00F8AB : AC FD 13    ;
CODE_00F8AE:          BNE Return00F8DE                    ;; 00F8AE : D0 2E       ;
CODE_00F8B0:          SEP #$20                            ;; 00F8B0 : E2 20       ; Accum (8 bit) 
CODE_00F8B2:          LDX.W $13FF                         ;; 00F8B2 : AE FF 13    ;
CODE_00F8B5:          REP #$20                            ;; 00F8B5 : C2 20       ; Accum (16 bit) 
CODE_00F8B7:          LDY.B #$08                          ;; 00F8B7 : A0 08       ;
CODE_00F8B9:          LDA.W $142A                         ;; 00F8B9 : AD 2A 14    ;
CODE_00F8BC:          CMP.W DATA_00F6B3,X                 ;; 00F8BC : DD B3 F6    ;
CODE_00F8BF:          BPL CODE_00F8C3                     ;; 00F8BF : 10 02       ;
CODE_00F8C1:          LDY.B #$0A                          ;; 00F8C1 : A0 0A       ;
CODE_00F8C3:          LDA.W DATA_00F6BF,Y                 ;; 00F8C3 : B9 BF F6    ;
CODE_00F8C6:          EOR $02                             ;; 00F8C6 : 45 02       ;
CODE_00F8C8:          BPL Return00F8DE                    ;; 00F8C8 : 10 14       ;
CODE_00F8CA:          LDA.W DATA_00F6BF,X                 ;; 00F8CA : BD BF F6    ;
CODE_00F8CD:          EOR $02                             ;; 00F8CD : 45 02       ;
CODE_00F8CF:          BPL Return00F8DE                    ;; 00F8CF : 10 0D       ;
CODE_00F8D1:          LDA $02                             ;; 00F8D1 : A5 02       ;
CODE_00F8D3:          CLC                                 ;; 00F8D3 : 18          ;
CODE_00F8D4:          ADC.W DATA_00F6CF,Y                 ;; 00F8D4 : 79 CF F6    ;
CODE_00F8D7:          BEQ Return00F8DE                    ;; 00F8D7 : F0 05       ;
CODE_00F8D9:          STA $02                             ;; 00F8D9 : 85 02       ;
CODE_00F8DB:          STY.W $1400                         ;; 00F8DB : 8C 00 14    ;
Return00F8DE:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00F8DF:          .db $0C,$0C,$08,$00,$20,$04,$0A,$0D ;; 00F8DF               ;
                      .db $0D                             ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00F8E8:          .db $2A,$00,$2A,$00,$12,$00,$00,$00 ;; 00F8E8               ;
                      .db $ED,$FF                         ;; ?QPWZ?               ;
                                                          ;;                      ;
CODE_00F8F2:          JSR.W CODE_00EAA6                   ;; 00F8F2 : 20 A6 EA    ;
CODE_00F8F5:          BIT.W $0D9B                         ;; 00F8F5 : 2C 9B 0D    ;
CODE_00F8F8:          BVC CODE_00F94E                     ;; 00F8F8 : 50 54       ;
CODE_00F8FA:          JSR.W CODE_00E92B                   ;; 00F8FA : 20 2B E9    ;
CODE_00F8FD:          LDA.W $13FC                         ;; 00F8FD : AD FC 13    ;
CODE_00F900:          ASL                                 ;; 00F900 : 0A          ;
CODE_00F901:          TAX                                 ;; 00F901 : AA          ;
CODE_00F902:          PHX                                 ;; 00F902 : DA          ;
CODE_00F903:          LDY RAM_MarioSpeedY                 ;; 00F903 : A4 7D       ;
CODE_00F905:          BPL CODE_00F91E                     ;; 00F905 : 10 17       ;
CODE_00F907:          REP #$20                            ;; 00F907 : C2 20       ; Accum (16 bit) 
CODE_00F909:          LDA RAM_MarioYPos                   ;; 00F909 : A5 96       ;
CODE_00F90B:          CMP.W DATA_00F8E8,X                 ;; 00F90B : DD E8 F8    ;
CODE_00F90E:          BPL CODE_00F91E                     ;; 00F90E : 10 0E       ;
CODE_00F910:          LDA.W DATA_00F8E8,X                 ;; 00F910 : BD E8 F8    ;
CODE_00F913:          STA RAM_MarioYPos                   ;; 00F913 : 85 96       ;
CODE_00F915:          SEP #$20                            ;; 00F915 : E2 20       ; Accum (8 bit) 
CODE_00F917:          STZ RAM_MarioSpeedY                 ;; 00F917 : 64 7D       ;
CODE_00F919:          LDA.B #$01                          ;; 00F919 : A9 01       ;
CODE_00F91B:          STA.W $1DF9                         ;; 00F91B : 8D F9 1D    ; / Play sound effect 
CODE_00F91E:          SEP #$20                            ;; 00F91E : E2 20       ; Accum (8 bit) 
CODE_00F920:          PLX                                 ;; 00F920 : FA          ;
CODE_00F921:          LDA.W DATA_00F8E8,X                 ;; 00F921 : BD E8 F8    ;
CODE_00F924:          CMP.B #$2A                          ;; 00F924 : C9 2A       ;
CODE_00F926:          BNE Return00F94D                    ;; 00F926 : D0 25       ;
CODE_00F928:          REP #$20                            ;; 00F928 : C2 20       ; Accum (16 bit) 
CODE_00F92A:          LDY.B #$00                          ;; 00F92A : A0 00       ;
CODE_00F92C:          LDA.W $1617                         ;; 00F92C : AD 17 16    ;
CODE_00F92F:          AND.W #$00FF                        ;; 00F92F : 29 FF 00    ;
CODE_00F932:          INC A                               ;; 00F932 : 1A          ;
CODE_00F933:          CMP RAM_MarioXPos                   ;; 00F933 : C5 94       ;
CODE_00F935:          BEQ CODE_00F94A                     ;; 00F935 : F0 13       ;
CODE_00F937:          BMI CODE_00F94A                     ;; 00F937 : 30 11       ;
CODE_00F939:          LDA.W $153D                         ;; 00F939 : AD 3D 15    ;
CODE_00F93C:          AND.W #$00FF                        ;; 00F93C : 29 FF 00    ;
CODE_00F93F:          STA $00                             ;; 00F93F : 85 00       ;
CODE_00F941:          INY                                 ;; 00F941 : C8          ;
CODE_00F942:          LDA RAM_MarioXPos                   ;; 00F942 : A5 94       ;
CODE_00F944:          CLC                                 ;; 00F944 : 18          ;
CODE_00F945:          ADC.W #$000F                        ;; 00F945 : 69 0F 00    ;
CODE_00F948:          CMP $00                             ;; 00F948 : C5 00       ;
CODE_00F94A:          JMP.W CODE_00E9C8                   ;; 00F94A : 4C C8 E9    ;
                                                          ;;                      ;
Return00F94D:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F94E:          LDY.B #$00                          ;; 00F94E : A0 00       ;
CODE_00F950:          LDA RAM_MarioSpeedY                 ;; 00F950 : A5 7D       ;
CODE_00F952:          BPL CODE_00F957                     ;; 00F952 : 10 03       ;
CODE_00F954:          JMP.W CODE_00F997                   ;; 00F954 : 4C 97 F9    ;
                                                          ;;                      ;
CODE_00F957:          JSR.W CODE_00F9A8                   ;; 00F957 : 20 A8 F9    ;
CODE_00F95A:          BCS CODE_00F962                     ;; 00F95A : B0 06       ;
CODE_00F95C:          JSR.W CODE_00EE1D                   ;; 00F95C : 20 1D EE    ;
CODE_00F95F:          JMP.W CODE_00F997                   ;; 00F95F : 4C 97 F9    ;
                                                          ;;                      ;
CODE_00F962:          LDA RAM_IsFlying                    ;; 00F962 : A5 72       ;
CODE_00F964:          BEQ CODE_00F983                     ;; 00F964 : F0 1D       ;
CODE_00F966:          REP #$20                            ;; 00F966 : C2 20       ; Accum (16 bit) 
CODE_00F968:          LDA.W $14B8                         ;; 00F968 : AD B8 14    ;
CODE_00F96B:          AND.W #$00FF                        ;; 00F96B : 29 FF 00    ;
CODE_00F96E:          STA.W $14B4                         ;; 00F96E : 8D B4 14    ;
CODE_00F971:          STA.W RAM_KeyHolePos1               ;; 00F971 : 8D 36 14    ;
CODE_00F974:          LDA.W $14BA                         ;; 00F974 : AD BA 14    ;
CODE_00F977:          AND.W #$00F0                        ;; 00F977 : 29 F0 00    ;
CODE_00F97A:          STA.W $14B6                         ;; 00F97A : 8D B6 14    ;
CODE_00F97D:          STA.W RAM_KeyHolePos2               ;; 00F97D : 8D 38 14    ;
CODE_00F980:          JSR.W CODE_00F9C9                   ;; 00F980 : 20 C9 F9    ;
CODE_00F983:          LDA $36                             ;; 00F983 : A5 36       ; Accum (8 bit) 
CODE_00F985:          CLC                                 ;; 00F985 : 18          ;
CODE_00F986:          ADC.B #$48                          ;; 00F986 : 69 48       ;
CODE_00F988:          LSR                                 ;; 00F988 : 4A          ;
CODE_00F989:          LSR                                 ;; 00F989 : 4A          ;
CODE_00F98A:          LSR                                 ;; 00F98A : 4A          ;
CODE_00F98B:          LSR                                 ;; 00F98B : 4A          ;
CODE_00F98C:          TAX                                 ;; 00F98C : AA          ;
CODE_00F98D:          LDY.W DATA_00F8DF,X                 ;; 00F98D : BC DF F8    ;
CODE_00F990:          LDA.B #$80                          ;; 00F990 : A9 80       ;
CODE_00F992:          STA $8E                             ;; 00F992 : 85 8E       ;
CODE_00F994:          JSR.W CODE_00EEE1                   ;; 00F994 : 20 E1 EE    ;
CODE_00F997:          REP #$20                            ;; 00F997 : C2 20       ; Accum (16 bit) 
CODE_00F999:          LDA $80                             ;; 00F999 : A5 80       ;
CODE_00F99B:          CMP.W #$00AE                        ;; 00F99B : C9 AE 00    ;
CODE_00F99E:          SEP #$20                            ;; 00F99E : E2 20       ; Accum (8 bit) 
CODE_00F9A0:          BMI CODE_00F9A5                     ;; 00F9A0 : 30 03       ;
ADDR_00F9A2:          JSR.W CODE_00F629                   ;; 00F9A2 : 20 29 F6    ;
CODE_00F9A5:          JMP.W CODE_00E98C                   ;; 00F9A5 : 4C 8C E9    ;
                                                          ;;                      ;
CODE_00F9A8:          REP #$20                            ;; 00F9A8 : C2 20       ; Accum (16 bit) 
CODE_00F9AA:          LDA RAM_MarioXPos                   ;; 00F9AA : A5 94       ;
CODE_00F9AC:          CLC                                 ;; 00F9AC : 18          ;
CODE_00F9AD:          ADC.W #$0008                        ;; 00F9AD : 69 08 00    ;
CODE_00F9B0:          STA.W $14B4                         ;; 00F9B0 : 8D B4 14    ;
CODE_00F9B3:          LDA RAM_MarioYPos                   ;; 00F9B3 : A5 96       ;
CODE_00F9B5:          CLC                                 ;; 00F9B5 : 18          ;
CODE_00F9B6:          ADC.W #$0020                        ;; 00F9B6 : 69 20 00    ;
CODE_00F9B9:          STA.W $14B6                         ;; 00F9B9 : 8D B6 14    ;
CODE_00F9BC:          SEP #$20                            ;; 00F9BC : E2 20       ; Accum (8 bit) 
CODE_00F9BE:          PHB                                 ;; 00F9BE : 8B          ;
CODE_00F9BF:          LDA.B #$01                          ;; 00F9BF : A9 01       ;
CODE_00F9C1:          PHA                                 ;; 00F9C1 : 48          ;
CODE_00F9C2:          PLB                                 ;; 00F9C2 : AB          ;
CODE_00F9C3:          JSL.L CODE_01CC9D                   ;; 00F9C3 : 22 9D CC 01 ;
CODE_00F9C7:          PLB                                 ;; 00F9C7 : AB          ;
Return00F9C8:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00F9C9:          LDA $36                             ;; 00F9C9 : A5 36       ; Accum (16 bit) 
CODE_00F9CB:          PHA                                 ;; 00F9CB : 48          ;
CODE_00F9CC:          EOR.W #$FFFF                        ;; 00F9CC : 49 FF FF    ;
CODE_00F9CF:          INC A                               ;; 00F9CF : 1A          ;
CODE_00F9D0:          STA $36                             ;; 00F9D0 : 85 36       ;
CODE_00F9D2:          JSR.W CODE_00F9BC                   ;; 00F9D2 : 20 BC F9    ;
CODE_00F9D5:          REP #$20                            ;; 00F9D5 : C2 20       ; Accum (16 bit) 
CODE_00F9D7:          PLA                                 ;; 00F9D7 : 68          ;
CODE_00F9D8:          STA $36                             ;; 00F9D8 : 85 36       ;
CODE_00F9DA:          LDA.W $14B8                         ;; 00F9DA : AD B8 14    ;
CODE_00F9DD:          AND.W #$00FF                        ;; 00F9DD : 29 FF 00    ;
CODE_00F9E0:          SEC                                 ;; 00F9E0 : 38          ;
CODE_00F9E1:          SBC.W #$0008                        ;; 00F9E1 : E9 08 00    ;
CODE_00F9E4:          STA RAM_MarioXPos                   ;; 00F9E4 : 85 94       ;
CODE_00F9E6:          LDA.W $14BA                         ;; 00F9E6 : AD BA 14    ;
CODE_00F9E9:          AND.W #$00FF                        ;; 00F9E9 : 29 FF 00    ;
CODE_00F9EC:          SEC                                 ;; 00F9EC : 38          ;
CODE_00F9ED:          SBC.W #$0020                        ;; 00F9ED : E9 20 00    ;
CODE_00F9F0:          STA RAM_MarioYPos                   ;; 00F9F0 : 85 96       ;
CODE_00F9F2:          SEP #$20                            ;; 00F9F2 : E2 20       ; Accum (8 bit) 
Return00F9F4:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
Empty00F9F5:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF                     ;; ?QPWZ?               ;
                                                          ;;                      ;
ADDR_00FA10:          LDX.B #$0B                          ;; 00FA10 : A2 0B       ; \ Unreachable 
ADDR_00FA12:          STZ.W $14C8,X                       ;; 00FA12 : 9E C8 14    ;  | Clear out sprite status table 
ADDR_00FA15:          DEX                                 ;; 00FA15 : CA          ;  | 
ADDR_00FA16:          BPL ADDR_00FA12                     ;; 00FA16 : 10 FA       ;  | 
Return00FA18:         RTL                                 ;; ?QPWZ? : 6B          ; / 
                                                          ;;                      ;
CODE_00FA19:          LDY.B #$32                          ;; 00FA19 : A0 32       ;
CODE_00FA1B:          STY $05                             ;; 00FA1B : 84 05       ;
CODE_00FA1D:          LDY.B #$E6                          ;; 00FA1D : A0 E6       ;
CODE_00FA1F:          STY $06                             ;; 00FA1F : 84 06       ;
CODE_00FA21:          LDY.B #$00                          ;; 00FA21 : A0 00       ;
CODE_00FA23:          STY $07                             ;; 00FA23 : 84 07       ;
CODE_00FA25:          SEC                                 ;; 00FA25 : 38          ;
CODE_00FA26:          SBC.B #$6E                          ;; 00FA26 : E9 6E       ;
CODE_00FA28:          TAY                                 ;; 00FA28 : A8          ;
CODE_00FA29:          LDA [$82],Y                         ;; 00FA29 : B7 82       ;
CODE_00FA2B:          STA $08                             ;; 00FA2B : 85 08       ;
CODE_00FA2D:          ASL                                 ;; 00FA2D : 0A          ;
CODE_00FA2E:          ASL                                 ;; 00FA2E : 0A          ;
CODE_00FA2F:          ASL                                 ;; 00FA2F : 0A          ;
CODE_00FA30:          ASL                                 ;; 00FA30 : 0A          ;
CODE_00FA31:          STA $01                             ;; 00FA31 : 85 01       ;
CODE_00FA33:          BCC CODE_00FA37                     ;; 00FA33 : 90 02       ;
CODE_00FA35:          INC $06                             ;; 00FA35 : E6 06       ;
CODE_00FA37:          LDA $0C                             ;; 00FA37 : A5 0C       ;
CODE_00FA39:          AND.B #$0F                          ;; 00FA39 : 29 0F       ;
CODE_00FA3B:          STA $00                             ;; 00FA3B : 85 00       ;
CODE_00FA3D:          LDA $0A                             ;; 00FA3D : A5 0A       ;
CODE_00FA3F:          AND.B #$0F                          ;; 00FA3F : 29 0F       ;
CODE_00FA41:          ORA $01                             ;; 00FA41 : 05 01       ;
CODE_00FA43:          TAY                                 ;; 00FA43 : A8          ;
Return00FA44:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
FlatPalaceSwitch:     LDA.B #$20                          ;; ?QPWZ? : A9 20       ; \ Set "Time to shake ground" to x20 
CODE_00FA47:          STA.W RAM_ShakeGrndTimer            ;; 00FA47 : 8D 87 18    ; / 
CODE_00FA4A:          LDY.B #$02                          ;; 00FA4A : A0 02       ; \  
CODE_00FA4C:          LDA.B #$60                          ;; 00FA4C : A9 60       ;  |Set sprite x02 to x60 (Flat palace switch) 
CODE_00FA4E:          STA.W RAM_SpriteNum,Y               ;; 00FA4E : 99 9E 00    ; /  
CODE_00FA51:          LDA.B #$08                          ;; 00FA51 : A9 08       ; \ Set sprite's status to x08 
CODE_00FA53:          STA.W $14C8,Y                       ;; 00FA53 : 99 C8 14    ; /  
CODE_00FA56:          LDA RAM_BlockYLo                    ;; 00FA56 : A5 9A       ; \  
CODE_00FA58:          AND.B #$F0                          ;; 00FA58 : 29 F0       ;  |Set sprite X (low) to $9A & 0xF0 
CODE_00FA5A:          STA.W RAM_SpriteXLo,Y               ;; 00FA5A : 99 E4 00    ; /  
CODE_00FA5D:          LDA RAM_BlockYHi                    ;; 00FA5D : A5 9B       ; \ Set sprite X (high) to $9B 
CODE_00FA5F:          STA.W RAM_SpriteXHi,Y               ;; 00FA5F : 99 E0 14    ; /  
CODE_00FA62:          LDA RAM_BlockXLo                    ;; 00FA62 : A5 98       ; \  
CODE_00FA64:          AND.B #$F0                          ;; 00FA64 : 29 F0       ;  | 
CODE_00FA66:          CLC                                 ;; 00FA66 : 18          ;  |Set sprite Y (low) to ($98 & 0xF0) + 0x10 
CODE_00FA67:          ADC.B #$10                          ;; 00FA67 : 69 10       ;  | 
CODE_00FA69:          STA.W RAM_SpriteYLo,Y               ;; 00FA69 : 99 D8 00    ; /  
CODE_00FA6C:          LDA RAM_BlockXHi                    ;; 00FA6C : A5 99       ; \  
CODE_00FA6E:          ADC.B #$00                          ;; 00FA6E : 69 00       ;  |Set sprite Y (high) to $99 + carry 
CODE_00FA70:          STA.W RAM_SpriteYHi,Y               ;; 00FA70 : 99 D4 14    ; / (Carry carried over from previous addition) 
CODE_00FA73:          PHX                                 ;; 00FA73 : DA          ;
CODE_00FA74:          TYX                                 ;; 00FA74 : BB          ;
CODE_00FA75:          JSL.L InitSpriteTables              ;; 00FA75 : 22 D2 F7 07 ;
CODE_00FA79:          PLX                                 ;; 00FA79 : FA          ;
CODE_00FA7A:          LDA.B #$5F                          ;; 00FA7A : A9 5F       ; \ Set sprite's "Spin Jump Death Frame Counter" to x5F 
CODE_00FA7C:          STA.W $1540,Y                       ;; 00FA7C : 99 40 15    ; /  
Return00FA7F:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
TriggerGoalTape:      STZ.W $13F3                         ;; ?QPWZ? : 9C F3 13    ;
CODE_00FA83:          STZ.W $1891                         ;; 00FA83 : 9C 91 18    ;
CODE_00FA86:          STZ.W RAM_TimeTillRespawn           ;; 00FA86 : 9C C0 18    ; Don't respawn sprites 
CODE_00FA89:          STZ.W RAM_GeneratorNum              ;; 00FA89 : 9C B9 18    ;
CODE_00FA8C:          STZ.W $18DD                         ;; 00FA8C : 9C DD 18    ;
CODE_00FA8F:          LDY.B #$0B                          ;; 00FA8F : A0 0B       ; Loop over sprites: 
LvlEndSprLoopStrt:    LDA.W $14C8,Y                       ;; ?QPWZ? : B9 C8 14    ; \ If sprite status < 8, 
CODE_00FA94:          CMP.B #$08                          ;; 00FA94 : C9 08       ;  | skip the current sprite 
CODE_00FA96:          BCC LvlEndNextSprite                ;; 00FA96 : 90 39       ; / 
CODE_00FA98:          CMP.B #$0B                          ;; 00FA98 : C9 0B       ; \ If Mario carries a sprite past the goal, 
CODE_00FA9A:          BNE CODE_00FAA3                     ;; 00FA9A : D0 07       ;  | 
CODE_00FA9C:          PHX                                 ;; 00FA9C : DA          ;  | 
CODE_00FA9D:          JSR.W LvlEndPowerUp                 ;; 00FA9D : 20 00 FB    ;  | he gets a powerup 
CODE_00FAA0:          PLX                                 ;; 00FAA0 : FA          ;  | 
CODE_00FAA1:          BRA LvlEndNextSprite                ;; 00FAA1 : 80 2E       ; / 
                                                          ;;                      ;
CODE_00FAA3:          LDA.W RAM_SpriteNum,Y               ;; 00FAA3 : B9 9E 00    ; \ Branch if goal tape 
CODE_00FAA6:          CMP.B #$7B                          ;; 00FAA6 : C9 7B       ;  | 
CODE_00FAA8:          BEQ CODE_00FAB2                     ;; 00FAA8 : F0 08       ; / 
CODE_00FAAA:          LDA.W RAM_OffscreenHorz,Y           ;; 00FAAA : B9 A0 15    ; \ If sprite on screen... 
CODE_00FAAD:          ORA.W RAM_OffscreenVert,Y           ;; 00FAAD : 19 6C 18    ;  | 
CODE_00FAB0:          BNE CODE_00FAC5                     ;; 00FAB0 : D0 13       ;  | 
CODE_00FAB2:          LDA.W RAM_Tweaker1686,Y             ;; 00FAB2 : B9 86 16    ;  | ...and "don't turn into coin" not set, 
CODE_00FAB5:          AND.B #$20                          ;; 00FAB5 : 29 20       ;  | 
CODE_00FAB7:          BNE CODE_00FAC5                     ;; 00FAB7 : D0 0C       ;  | 
CODE_00FAB9:          LDA.B #$10                          ;; 00FAB9 : A9 10       ;  | Set coin animation timer = #$10 
CODE_00FABB:          STA.W $1540,Y                       ;; 00FABB : 99 40 15    ;  | 
CODE_00FABE:          LDA.B #$06                          ;; 00FABE : A9 06       ;  | Sprite status = Level end, turn to coins 
CODE_00FAC0:          STA.W $14C8,Y                       ;; 00FAC0 : 99 C8 14    ;  | 
CODE_00FAC3:          BRA LvlEndNextSprite                ;; 00FAC3 : 80 0C       ; / 
                                                          ;;                      ;
CODE_00FAC5:          LDA.W RAM_Tweaker190F,Y             ;; 00FAC5 : B9 0F 19    ; \ If "don't erase" not set, 
CODE_00FAC8:          AND.B #$02                          ;; 00FAC8 : 29 02       ;  | 
CODE_00FACA:          BNE LvlEndNextSprite                ;; 00FACA : D0 05       ;  | 
CODE_00FACC:          LDA.B #$00                          ;; 00FACC : A9 00       ;  | Erase sprite 
CODE_00FACE:          STA.W $14C8,Y                       ;; 00FACE : 99 C8 14    ; / 
LvlEndNextSprite:     DEY                                 ;; ?QPWZ? : 88          ; \ Goto next sprite 
CODE_00FAD2:          BPL LvlEndSprLoopStrt               ;; 00FAD2 : 10 BD       ; / 
CODE_00FAD4:          LDY.B #$07                          ;; 00FAD4 : A0 07       ; \ 
CODE_00FAD6:          LDA.B #$00                          ;; 00FAD6 : A9 00       ;  | Clear out all extended sprites 
CODE_00FAD8:          STA.W RAM_ExSpriteNum,Y             ;; 00FAD8 : 99 0B 17    ;  | 
CODE_00FADB:          DEY                                 ;; 00FADB : 88          ;  | 
CODE_00FADC:          BPL CODE_00FAD8                     ;; 00FADC : 10 FA       ; / 
Return00FADE:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FADF:          .db $74,$74,$77,$75,$76,$E0,$F0,$74 ;; 00FADF               ;
                      .db $74,$77,$75,$76,$E0,$F1,$F0,$F0 ;; ?QPWZ?               ;
                      .db $F0,$F0,$F1,$E0,$F2,$E0,$E0,$E0 ;; ?QPWZ?               ;
                      .db $E0,$F1,$E0,$E4                 ;; ?QPWZ?               ;
                                                          ;;                      ;
DATA_00FAFB:          .db $FF,$74,$75,$76,$77             ;; 00FAFB               ;
                                                          ;;                      ;
LvlEndPowerUp:        LDX RAM_MarioPowerUp                ;; ?QPWZ? : A6 19       ; X = Mario's power up status 
CODE_00FB02:          LDA.W $1490                         ;; 00FB02 : AD 90 14    ; \ If Mario has star, X = #$04.  However this never happens as $1490 is cleared earlier 
CODE_00FB05:          BEQ CODE_00FB09                     ;; 00FB05 : F0 02       ;  | Otherwise Mario could get a star from carrying a sprite past the goal. 
ADDR_00FB07:          LDX.B #$04                          ;; 00FB07 : A2 04       ; / Unreachable instruction 
CODE_00FB09:          LDA.W RAM_OnYoshi                   ;; 00FB09 : AD 7A 18    ; \ If Mario on Yoshi, X = #$05 
CODE_00FB0C:          BEQ CODE_00FB10                     ;; 00FB0C : F0 02       ;  | 
ADDR_00FB0E:          LDX.B #$05                          ;; 00FB0E : A2 05       ; / 
CODE_00FB10:          LDA.W RAM_SpriteNum,Y               ;; 00FB10 : B9 9E 00    ; \ If Spring Board, X += #$07 
CODE_00FB13:          CMP.B #$2F                          ;; 00FB13 : C9 2F       ;  | 
CODE_00FB15:          BEQ CODE_00FB2D                     ;; 00FB15 : F0 16       ; / 
CODE_00FB17:          CMP.B #$3E                          ;; 00FB17 : C9 3E       ; \ If P Switch, X += #$07 
CODE_00FB19:          BEQ CODE_00FB2D                     ;; 00FB19 : F0 12       ; / 
CODE_00FB1B:          CMP.B #$80                          ;; 00FB1B : C9 80       ; \ If Key, X += #$0E 
CODE_00FB1D:          BEQ ADDR_00FB28                     ;; 00FB1D : F0 09       ; / 
CODE_00FB1F:          CMP.B #$2D                          ;; 00FB1F : C9 2D       ; \ If Baby Yoshi, X += #$15 
CODE_00FB21:          BNE CODE_00FB32                     ;; 00FB21 : D0 0F       ; / 
ADDR_00FB23:          TXA                                 ;; 00FB23 : 8A          ;
ADDR_00FB24:          CLC                                 ;; 00FB24 : 18          ;
ADDR_00FB25:          ADC.B #$07                          ;; 00FB25 : 69 07       ;
ADDR_00FB27:          TAX                                 ;; 00FB27 : AA          ;
ADDR_00FB28:          TXA                                 ;; 00FB28 : 8A          ;
ADDR_00FB29:          CLC                                 ;; 00FB29 : 18          ;
ADDR_00FB2A:          ADC.B #$07                          ;; 00FB2A : 69 07       ;
ADDR_00FB2C:          TAX                                 ;; 00FB2C : AA          ;
CODE_00FB2D:          TXA                                 ;; 00FB2D : 8A          ;
CODE_00FB2E:          CLC                                 ;; 00FB2E : 18          ;
CODE_00FB2F:          ADC.B #$07                          ;; 00FB2F : 69 07       ;
CODE_00FB31:          TAX                                 ;; 00FB31 : AA          ;
CODE_00FB32:          LDA.L DATA_00FADF,X                 ;; 00FB32 : BF DF FA 00 ;
CODE_00FB36:          LDX.W $0DC2                         ;; 00FB36 : AE C2 0D    ;
CODE_00FB39:          CMP.L DATA_00FAFB,X                 ;; 00FB39 : DF FB FA 00 ;
CODE_00FB3D:          BNE CODE_00FB41                     ;; 00FB3D : D0 02       ;
CODE_00FB3F:          LDA.B #$78                          ;; 00FB3F : A9 78       ;
CODE_00FB41:          STZ $0F                             ;; 00FB41 : 64 0F       ;
CODE_00FB43:          CMP.B #$E0                          ;; 00FB43 : C9 E0       ;
CODE_00FB45:          BCC LvlEndStoreSpr                  ;; 00FB45 : 90 0E       ;
ADDR_00FB47:          PHA                                 ;; 00FB47 : 48          ;
ADDR_00FB48:          AND.B #$0F                          ;; 00FB48 : 29 0F       ;
ADDR_00FB4A:          STA $0F                             ;; 00FB4A : 85 0F       ;
ADDR_00FB4C:          PLA                                 ;; 00FB4C : 68          ;
ADDR_00FB4D:          CMP.B #$F0                          ;; 00FB4D : C9 F0       ;
ADDR_00FB4F:          LDA.B #$78                          ;; 00FB4F : A9 78       ;
ADDR_00FB51:          BCS LvlEndStoreSpr                  ;; 00FB51 : B0 02       ;
ADDR_00FB53:          LDA.B #$78                          ;; 00FB53 : A9 78       ;
LvlEndStoreSpr:       STA.W RAM_SpriteNum,Y               ;; ?QPWZ? : 99 9E 00    ;
CODE_00FB58:          CMP.B #$76                          ;; 00FB58 : C9 76       ;
CODE_00FB5A:          BNE CODE_00FB5F                     ;; 00FB5A : D0 03       ;
ADDR_00FB5C:          INC.W $13CB                         ;; 00FB5C : EE CB 13    ;
CODE_00FB5F:          TYX                                 ;; 00FB5F : BB          ;
CODE_00FB60:          JSL.L InitSpriteTables              ;; 00FB60 : 22 D2 F7 07 ;
CODE_00FB64:          LDA $0F                             ;; 00FB64 : A5 0F       ;
CODE_00FB66:          STA.W $1594,Y                       ;; 00FB66 : 99 94 15    ;
CODE_00FB69:          LDA.B #$0C                          ;; 00FB69 : A9 0C       ; \ Sprite status = Goal tape power up 
CODE_00FB6B:          STA.W $14C8,Y                       ;; 00FB6B : 99 C8 14    ; / 
CODE_00FB6E:          LDA.B #$D0                          ;; 00FB6E : A9 D0       ;
CODE_00FB70:          STA.W RAM_SpriteSpeedY,Y            ;; 00FB70 : 99 AA 00    ;
CODE_00FB73:          LDA.B #$05                          ;; 00FB73 : A9 05       ;
CODE_00FB75:          STA.W RAM_SpriteSpeedX,Y            ;; 00FB75 : 99 B6 00    ;
CODE_00FB78:          LDA.B #$20                          ;; 00FB78 : A9 20       ;
CODE_00FB7A:          STA.W RAM_DisableInter,Y            ;; 00FB7A : 99 4C 15    ;
CODE_00FB7D:          LDA.B #$0C                          ;; 00FB7D : A9 0C       ;
CODE_00FB7F:          STA.W $1DF9                         ;; 00FB7F : 8D F9 1D    ; / Play sound effect 
CODE_00FB82:          LDX.B #$03                          ;; 00FB82 : A2 03       ;
CODE_00FB84:          LDA.W $17C0,X                       ;; 00FB84 : BD C0 17    ;
CODE_00FB87:          BEQ CODE_00FB8D                     ;; 00FB87 : F0 04       ;
ADDR_00FB89:          DEX                                 ;; 00FB89 : CA          ;
ADDR_00FB8A:          BPL CODE_00FB84                     ;; 00FB8A : 10 F8       ;
Return00FB8C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FB8D:          LDA.B #$01                          ;; 00FB8D : A9 01       ;
CODE_00FB8F:          STA.W $17C0,X                       ;; 00FB8F : 9D C0 17    ;
CODE_00FB92:          LDA.W RAM_SpriteYLo,Y               ;; 00FB92 : B9 D8 00    ;
CODE_00FB95:          STA.W $17C4,X                       ;; 00FB95 : 9D C4 17    ;
CODE_00FB98:          LDA.W RAM_SpriteXLo,Y               ;; 00FB98 : B9 E4 00    ;
CODE_00FB9B:          STA.W $17C8,X                       ;; 00FB9B : 9D C8 17    ;
CODE_00FB9E:          LDA.B #$1B                          ;; 00FB9E : A9 1B       ;
CODE_00FBA0:          STA.W $17CC,X                       ;; 00FBA0 : 9D CC 17    ;
Return00FBA3:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
LvlEndSmokeTiles:     .db $66,$64,$62,$60,$E8,$EA,$EC,$EA ;; ?QPWZ?               ;
                                                          ;;                      ;
LvlEndSprCoins:       PHB                                 ;; ?QPWZ? : 8B          ;
CODE_00FBAD:          PHK                                 ;; 00FBAD : 4B          ;
CODE_00FBAE:          PLB                                 ;; 00FBAE : AB          ;
CODE_00FBAF:          JSR.W LvlEndSprCoinsRt              ;; 00FBAF : 20 B4 FB    ;
CODE_00FBB2:          PLB                                 ;; 00FBB2 : AB          ;
Return00FBB3:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
LvlEndSprCoinsRt:     LDY.B #$00                          ;; ?QPWZ? : A0 00       ;
CODE_00FBB6:          LDA.W $17BD                         ;; 00FBB6 : AD BD 17    ;
CODE_00FBB9:          BPL CODE_00FBBC                     ;; 00FBB9 : 10 01       ;
ADDR_00FBBB:          DEY                                 ;; 00FBBB : 88          ;
CODE_00FBBC:          CLC                                 ;; 00FBBC : 18          ;
CODE_00FBBD:          ADC RAM_SpriteXLo,X                 ;; 00FBBD : 75 E4       ;
CODE_00FBBF:          STA RAM_SpriteXLo,X                 ;; 00FBBF : 95 E4       ;
CODE_00FBC1:          TYA                                 ;; 00FBC1 : 98          ;
CODE_00FBC2:          ADC.W RAM_SpriteXHi,X               ;; 00FBC2 : 7D E0 14    ;
CODE_00FBC5:          STA.W RAM_SpriteXHi,X               ;; 00FBC5 : 9D E0 14    ;
CODE_00FBC8:          LDA.W $1540,X                       ;; 00FBC8 : BD 40 15    ;
CODE_00FBCB:          BEQ CODE_00FBF0                     ;; 00FBCB : F0 23       ;
CODE_00FBCD:          CMP.B #$01                          ;; 00FBCD : C9 01       ;
CODE_00FBCF:          BNE CODE_00FBD5                     ;; 00FBCF : D0 04       ;
CODE_00FBD1:          LDA.B #$D0                          ;; 00FBD1 : A9 D0       ;
CODE_00FBD3:          STA RAM_SpriteSpeedY,X              ;; 00FBD3 : 95 AA       ;
CODE_00FBD5:          PHX                                 ;; 00FBD5 : DA          ;
CODE_00FBD6:          LDA.B #$04                          ;; 00FBD6 : A9 04       ; \ Use Palette A 
CODE_00FBD8:          STA.W RAM_SpritePal,X               ;; 00FBD8 : 9D F6 15    ; / 
CODE_00FBDB:          JSL.L GenericSprGfxRt2              ;; 00FBDB : 22 B2 90 01 ;
CODE_00FBDF:          LDA.W $1540,X                       ;; 00FBDF : BD 40 15    ;
CODE_00FBE2:          LSR                                 ;; 00FBE2 : 4A          ;
CODE_00FBE3:          LSR                                 ;; 00FBE3 : 4A          ;
CODE_00FBE4:          LDY.W RAM_SprOAMIndex,X             ;; 00FBE4 : BC EA 15    ; Y = Index into sprite OAM 
CODE_00FBE7:          TAX                                 ;; 00FBE7 : AA          ;
CODE_00FBE8:          LDA.W LvlEndSmokeTiles,X            ;; 00FBE8 : BD A4 FB    ;
CODE_00FBEB:          STA.W OAM_Tile,Y                    ;; 00FBEB : 99 02 03    ;
CODE_00FBEE:          PLX                                 ;; 00FBEE : FA          ;
Return00FBEF:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FBF0:          INC.W $1570,X                       ;; 00FBF0 : FE 70 15    ;
CODE_00FBF3:          JSL.L UpdateYPosNoGrvty             ;; 00FBF3 : 22 1A 80 01 ;
CODE_00FBF7:          INC RAM_SpriteSpeedY,X              ;; 00FBF7 : F6 AA       ;
CODE_00FBF9:          INC RAM_SpriteSpeedY,X              ;; 00FBF9 : F6 AA       ;
CODE_00FBFB:          LDA RAM_SpriteSpeedY,X              ;; 00FBFB : B5 AA       ;
CODE_00FBFD:          CMP.B #$20                          ;; 00FBFD : C9 20       ;
CODE_00FBFF:          BMI CODE_00FC1E                     ;; 00FBFF : 30 1D       ;
CODE_00FC01:          JSL.L CODE_05B34A                   ;; 00FC01 : 22 4A B3 05 ;
CODE_00FC05:          LDA.W $18DD                         ;; 00FC05 : AD DD 18    ;
CODE_00FC08:          CMP.B #$0D                          ;; 00FC08 : C9 0D       ;
CODE_00FC0A:          BCC CODE_00FC0E                     ;; 00FC0A : 90 02       ;
ADDR_00FC0C:          LDA.B #$0D                          ;; 00FC0C : A9 0D       ;
CODE_00FC0E:          JSL.L GivePoints                    ;; 00FC0E : 22 E5 AC 02 ;
CODE_00FC12:          LDA.W $18DD                         ;; 00FC12 : AD DD 18    ;
CODE_00FC15:          CLC                                 ;; 00FC15 : 18          ;
CODE_00FC16:          ADC.B #$02                          ;; 00FC16 : 69 02       ;
CODE_00FC18:          STA.W $18DD                         ;; 00FC18 : 8D DD 18    ;
CODE_00FC1B:          STZ.W $14C8,X                       ;; 00FC1B : 9E C8 14    ;
CODE_00FC1E:          JSL.L CoinSprGfx                    ;; 00FC1E : 22 41 C6 01 ;
Return00FC22:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
ADDR_00FC23:          LDY.B #$0B                          ;; 00FC23 : A0 0B       ; \ Unreachable instructions 
ADDR_00FC25:          LDA.W $14C8,Y                       ;; 00FC25 : B9 C8 14    ; / Status = Carried 
ADDR_00FC28:          CMP.B #$08                          ;; 00FC28 : C9 08       ;
ADDR_00FC2A:          BNE ADDR_00FC73                     ;; 00FC2A : D0 47       ;
ADDR_00FC2C:          LDA.W RAM_SpriteNum,Y               ;; 00FC2C : B9 9E 00    ;
ADDR_00FC2F:          CMP.B #$35                          ;; 00FC2F : C9 35       ;
ADDR_00FC31:          BNE ADDR_00FC73                     ;; 00FC31 : D0 40       ;
ADDR_00FC33:          LDA.B #$01                          ;; 00FC33 : A9 01       ;
ADDR_00FC35:          STA.W RAM_OWHasYoshi                ;; 00FC35 : 8D C1 0D    ;
ADDR_00FC38:          STZ.W RAM_YoshiHasWings             ;; 00FC38 : 9C 1E 14    ; No Yoshi wings 
ADDR_00FC3B:          LDA.W RAM_SpritePal,Y               ;; 00FC3B : B9 F6 15    ;
ADDR_00FC3E:          AND.B #$F1                          ;; 00FC3E : 29 F1       ;
ADDR_00FC40:          ORA.B #$0A                          ;; 00FC40 : 09 0A       ;
ADDR_00FC42:          STA.W RAM_SpritePal,Y               ;; 00FC42 : 99 F6 15    ;
ADDR_00FC45:          LDA.W RAM_OnYoshi                   ;; 00FC45 : AD 7A 18    ;
ADDR_00FC48:          BNE Return00FC72                    ;; 00FC48 : D0 28       ;
ADDR_00FC4A:          LDA RAM_ScreenBndryXLo              ;; 00FC4A : A5 1A       ;
ADDR_00FC4C:          SEC                                 ;; 00FC4C : 38          ;
ADDR_00FC4D:          SBC.B #$10                          ;; 00FC4D : E9 10       ;
ADDR_00FC4F:          STA.W RAM_SpriteXLo,Y               ;; 00FC4F : 99 E4 00    ;
ADDR_00FC52:          LDA RAM_ScreenBndryXHi              ;; 00FC52 : A5 1B       ;
ADDR_00FC54:          SBC.B #$00                          ;; 00FC54 : E9 00       ;
ADDR_00FC56:          STA.W RAM_SpriteXHi,Y               ;; 00FC56 : 99 E0 14    ;
ADDR_00FC59:          LDA RAM_MarioYPos                   ;; 00FC59 : A5 96       ;
ADDR_00FC5B:          STA.W RAM_SpriteYLo,Y               ;; 00FC5B : 99 D8 00    ;
ADDR_00FC5E:          LDA RAM_MarioYPosHi                 ;; 00FC5E : A5 97       ;
ADDR_00FC60:          STA.W RAM_SpriteYHi,Y               ;; 00FC60 : 99 D4 14    ;
ADDR_00FC63:          LDA.B #$03                          ;; 00FC63 : A9 03       ;
ADDR_00FC65:          STA.W RAM_SpriteState,Y             ;; 00FC65 : 99 C2 00    ;
ADDR_00FC68:          LDA.B #$00                          ;; 00FC68 : A9 00       ;
ADDR_00FC6A:          STA.W RAM_SpriteDir,Y               ;; 00FC6A : 99 7C 15    ;
ADDR_00FC6D:          LDA.B #$10                          ;; 00FC6D : A9 10       ;
ADDR_00FC6F:          STA.W RAM_SpriteSpeedX,Y            ;; 00FC6F : 99 B6 00    ;
Return00FC72:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
ADDR_00FC73:          DEY                                 ;; 00FC73 : 88          ;
ADDR_00FC74:          BPL ADDR_00FC25                     ;; 00FC74 : 10 AF       ;
ADDR_00FC76:          STZ.W RAM_OWHasYoshi                ;; 00FC76 : 9C C1 0D    ;
Return00FC79:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00FC7A:          LDA.B #$02                          ;; 00FC7A : A9 02       ;
CODE_00FC7C:          STA.W $1DFA                         ;; 00FC7C : 8D FA 1D    ; / Play sound effect 
CODE_00FC7F:          LDX.B #$00                          ;; 00FC7F : A2 00       ;
CODE_00FC81:          LDA.W $1B94                         ;; 00FC81 : AD 94 1B    ;
CODE_00FC84:          BNE CODE_00FC98                     ;; 00FC84 : D0 12       ;
CODE_00FC86:          LDX.B #$05                          ;; 00FC86 : A2 05       ;
CODE_00FC88:          LDA.W $1692                         ;; 00FC88 : AD 92 16    ;
CODE_00FC8B:          CMP.B #$0A                          ;; 00FC8B : C9 0A       ;
CODE_00FC8D:          BEQ CODE_00FC98                     ;; 00FC8D : F0 09       ;
CODE_00FC8F:          JSL.L FindFreeSprSlot               ;; 00FC8F : 22 E4 A9 02 ; \ X = First free sprite slot, #$03 if none free 
CODE_00FC93:          TYX                                 ;; 00FC93 : BB          ;  | 
CODE_00FC94:          BPL CODE_00FC98                     ;; 00FC94 : 10 02       ;  | 
CODE_00FC96:          LDX.B #$03                          ;; 00FC96 : A2 03       ; / 
CODE_00FC98:          LDA.B #$08                          ;; 00FC98 : A9 08       ; \ Status = Normal 
CODE_00FC9A:          STA.W $14C8,X                       ;; 00FC9A : 9D C8 14    ; / 
CODE_00FC9D:          LDA.B #$35                          ;; 00FC9D : A9 35       ; \ Sprite = Yoshi 
CODE_00FC9F:          STA RAM_SpriteNum,X                 ;; 00FC9F : 95 9E       ; / 
CODE_00FCA1:          LDA RAM_MarioXPos                   ;; 00FCA1 : A5 94       ; \ Yoshi X position = Mario X position 
CODE_00FCA3:          STA RAM_SpriteXLo,X                 ;; 00FCA3 : 95 E4       ;  | 
CODE_00FCA5:          LDA RAM_MarioXPosHi                 ;; 00FCA5 : A5 95       ;  | 
CODE_00FCA7:          STA.W RAM_SpriteXHi,X               ;; 00FCA7 : 9D E0 14    ; / 
CODE_00FCAA:          LDA RAM_MarioYPos                   ;; 00FCAA : A5 96       ; \ Yoshi's Y position = Mario Y position - #$10 
CODE_00FCAC:          SEC                                 ;; 00FCAC : 38          ;  | Mario Y position = Mario Y position - #$10 
CODE_00FCAD:          SBC.B #$10                          ;; 00FCAD : E9 10       ;  | 
CODE_00FCAF:          STA RAM_MarioYPos                   ;; 00FCAF : 85 96       ;  | 
CODE_00FCB1:          STA RAM_SpriteYLo,X                 ;; 00FCB1 : 95 D8       ;  | 
CODE_00FCB3:          LDA RAM_MarioYPosHi                 ;; 00FCB3 : A5 97       ;  | 
CODE_00FCB5:          SBC.B #$00                          ;; 00FCB5 : E9 00       ;  | 
CODE_00FCB7:          STA RAM_MarioYPosHi                 ;; 00FCB7 : 85 97       ;  | 
CODE_00FCB9:          STA.W RAM_SpriteYHi,X               ;; 00FCB9 : 9D D4 14    ; / 
CODE_00FCBC:          JSL.L InitSpriteTables              ;; 00FCBC : 22 D2 F7 07 ; Reset sprite tables 
CODE_00FCC0:          LDA.B #$04                          ;; 00FCC0 : A9 04       ;
CODE_00FCC2:          STA.W $1FE2,X                       ;; 00FCC2 : 9D E2 1F    ;
CODE_00FCC5:          LDA.W RAM_YoshiColor                ;; 00FCC5 : AD C7 13    ; \ Set Yoshi palette 
CODE_00FCC8:          STA.W RAM_SpritePal,X               ;; 00FCC8 : 9D F6 15    ; / 
CODE_00FCCB:          LDA.W $1B95                         ;; 00FCCB : AD 95 1B    ;
CODE_00FCCE:          BEQ CODE_00FCD5                     ;; 00FCCE : F0 05       ;
CODE_00FCD0:          LDA.B #$06                          ;; 00FCD0 : A9 06       ;
CODE_00FCD2:          STA.W RAM_SpritePal,X               ;; 00FCD2 : 9D F6 15    ;
CODE_00FCD5:          INC.W RAM_OnYoshi                   ;; 00FCD5 : EE 7A 18    ;
CODE_00FCD8:          INC RAM_SpriteState,X               ;; 00FCD8 : F6 C2       ;
CODE_00FCDA:          LDA RAM_MarioDirection              ;; 00FCDA : A5 76       ;
CODE_00FCDC:          EOR.B #$01                          ;; 00FCDC : 49 01       ;
CODE_00FCDE:          STA.W RAM_SpriteDir,X               ;; 00FCDE : 9D 7C 15    ;
CODE_00FCE1:          DEC.W $160E,X                       ;; 00FCE1 : DE 0E 16    ;
CODE_00FCE4:          INX                                 ;; 00FCE4 : E8          ;
CODE_00FCE5:          STX.W $18DF                         ;; 00FCE5 : 8E DF 18    ;
CODE_00FCE8:          STX.W $18E2                         ;; 00FCE8 : 8E E2 18    ;
Return00FCEB:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00FCEC:          LDX.B #$0B                          ;; 00FCEC : A2 0B       ;
CODE_00FCEE:          STZ.W $14C8,X                       ;; 00FCEE : 9E C8 14    ;
CODE_00FCF1:          DEX                                 ;; 00FCF1 : CA          ;
CODE_00FCF2:          BPL CODE_00FCEE                     ;; 00FCF2 : 10 FA       ;
Return00FCF4:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FCF5:          LDA.B #$A0                          ;; 00FCF5 : A9 A0       ;
CODE_00FCF7:          STA RAM_SpriteXLo,X                 ;; 00FCF7 : 95 E4       ;
CODE_00FCF9:          LDA.B #$00                          ;; 00FCF9 : A9 00       ;
CODE_00FCFB:          STA.W RAM_SpriteXHi,X               ;; 00FCFB : 9D E0 14    ;
CODE_00FCFE:          LDA.B #$00                          ;; 00FCFE : A9 00       ;
CODE_00FD00:          STA RAM_SpriteYLo,X                 ;; 00FD00 : 95 D8       ;
CODE_00FD02:          LDA.B #$00                          ;; 00FD02 : A9 00       ;
CODE_00FD04:          STA.W RAM_SpriteYHi,X               ;; 00FD04 : 9D D4 14    ;
Return00FD07:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00FD08:          LDY.B #$3F                          ;; 00FD08 : A0 3F       ;
CODE_00FD0A:          LDA RAM_ControllerA                 ;; 00FD0A : A5 15       ;
CODE_00FD0C:          AND.B #$83                          ;; 00FD0C : 29 83       ;
CODE_00FD0E:          BNE CODE_00FD12                     ;; 00FD0E : D0 02       ;
CODE_00FD10:          LDY.B #$7F                          ;; 00FD10 : A0 7F       ;
CODE_00FD12:          TYA                                 ;; 00FD12 : 98          ;
CODE_00FD13:          AND RAM_FrameCounterB               ;; 00FD13 : 25 14       ;
CODE_00FD15:          ORA RAM_SpritesLocked               ;; 00FD15 : 05 9D       ;
CODE_00FD17:          BNE Return00FD23                    ;; 00FD17 : D0 0A       ;
CODE_00FD19:          LDX.B #$07                          ;; 00FD19 : A2 07       ; \ Find a free extended sprite slot 
CODE_00FD1B:          LDA.W RAM_ExSpriteNum,X             ;; 00FD1B : BD 0B 17    ;  | 
CODE_00FD1E:          BEQ CODE_00FD26                     ;; 00FD1E : F0 06       ;  | 
CODE_00FD20:          DEX                                 ;; 00FD20 : CA          ;  | 
CODE_00FD21:          BPL CODE_00FD1B                     ;; 00FD21 : 10 F8       ;  | 
Return00FD23:         RTS                                 ;; ?QPWZ? : 60          ; / Return if no free slots 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FD24:          .db $02,$0A                         ;; 00FD24               ;
                                                          ;;                      ;
CODE_00FD26:          LDA.B #$12                          ;; 00FD26 : A9 12       ; \ Extended sprite = Water buble 
CODE_00FD28:          STA.W RAM_ExSpriteNum,X             ;; 00FD28 : 9D 0B 17    ; / 
CODE_00FD2B:          LDY RAM_MarioDirection              ;; 00FD2B : A4 76       ;
CODE_00FD2D:          LDA RAM_MarioXPos                   ;; 00FD2D : A5 94       ;
CODE_00FD2F:          CLC                                 ;; 00FD2F : 18          ;
CODE_00FD30:          ADC.W DATA_00FD24,Y                 ;; 00FD30 : 79 24 FD    ;
CODE_00FD33:          STA.W RAM_ExSpriteXLo,X             ;; 00FD33 : 9D 1F 17    ;
CODE_00FD36:          LDA RAM_MarioXPosHi                 ;; 00FD36 : A5 95       ;
CODE_00FD38:          ADC.B #$00                          ;; 00FD38 : 69 00       ;
CODE_00FD3A:          STA.W RAM_ExSpriteXHi,X             ;; 00FD3A : 9D 33 17    ;
CODE_00FD3D:          LDA RAM_MarioPowerUp                ;; 00FD3D : A5 19       ;
CODE_00FD3F:          BEQ CODE_00FD47                     ;; 00FD3F : F0 06       ;
CODE_00FD41:          LDA.B #$04                          ;; 00FD41 : A9 04       ;
CODE_00FD43:          LDY RAM_IsDucking                   ;; 00FD43 : A4 73       ;
CODE_00FD45:          BEQ CODE_00FD49                     ;; 00FD45 : F0 02       ;
CODE_00FD47:          LDA.B #$0C                          ;; 00FD47 : A9 0C       ;
CODE_00FD49:          CLC                                 ;; 00FD49 : 18          ;
CODE_00FD4A:          ADC RAM_MarioYPos                   ;; 00FD4A : 65 96       ;
CODE_00FD4C:          STA.W RAM_ExSpriteYLo,X             ;; 00FD4C : 9D 15 17    ;
CODE_00FD4F:          LDA RAM_MarioYPosHi                 ;; 00FD4F : A5 97       ;
CODE_00FD51:          ADC.B #$00                          ;; 00FD51 : 69 00       ;
CODE_00FD53:          STA.W RAM_ExSpriteYHi,X             ;; 00FD53 : 9D 29 17    ;
CODE_00FD56:          STZ.W $176F,X                       ;; 00FD56 : 9E 6F 17    ;
Return00FD59:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FD5A:          LDA $7F                             ;; 00FD5A : A5 7F       ;
CODE_00FD5C:          ORA $81                             ;; 00FD5C : 05 81       ;
CODE_00FD5E:          BNE Return00FD6A                    ;; 00FD5E : D0 0A       ;
CODE_00FD60:          LDY.B #$03                          ;; 00FD60 : A0 03       ;
CODE_00FD62:          LDA.W $17C0,Y                       ;; 00FD62 : B9 C0 17    ;
CODE_00FD65:          BEQ CODE_00FD6B                     ;; 00FD65 : F0 04       ;
CODE_00FD67:          DEY                                 ;; 00FD67 : 88          ;
CODE_00FD68:          BPL CODE_00FD62                     ;; 00FD68 : 10 F8       ;
Return00FD6A:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FD6B:          LDA.B #$05                          ;; 00FD6B : A9 05       ;
CODE_00FD6D:          STA.W $17C0,Y                       ;; 00FD6D : 99 C0 17    ;
CODE_00FD70:          LDA RAM_BlockYLo                    ;; 00FD70 : A5 9A       ;
CODE_00FD72:          AND.B #$F0                          ;; 00FD72 : 29 F0       ;
CODE_00FD74:          STA.W $17C8,Y                       ;; 00FD74 : 99 C8 17    ;
CODE_00FD77:          LDA RAM_BlockXLo                    ;; 00FD77 : A5 98       ;
CODE_00FD79:          AND.B #$F0                          ;; 00FD79 : 29 F0       ;
CODE_00FD7B:          STA.W $17C4,Y                       ;; 00FD7B : 99 C4 17    ;
CODE_00FD7E:          LDA.W $1933                         ;; 00FD7E : AD 33 19    ;
CODE_00FD81:          BEQ CODE_00FD97                     ;; 00FD81 : F0 14       ;
ADDR_00FD83:          LDA RAM_BlockYLo                    ;; 00FD83 : A5 9A       ;
ADDR_00FD85:          SEC                                 ;; 00FD85 : 38          ;
ADDR_00FD86:          SBC $26                             ;; 00FD86 : E5 26       ;
ADDR_00FD88:          AND.B #$F0                          ;; 00FD88 : 29 F0       ;
ADDR_00FD8A:          STA.W $17C8,Y                       ;; 00FD8A : 99 C8 17    ;
ADDR_00FD8D:          LDA RAM_BlockXLo                    ;; 00FD8D : A5 98       ;
ADDR_00FD8F:          SEC                                 ;; 00FD8F : 38          ;
ADDR_00FD90:          SBC $28                             ;; 00FD90 : E5 28       ;
ADDR_00FD92:          AND.B #$F0                          ;; 00FD92 : 29 F0       ;
ADDR_00FD94:          STA.W $17C4,Y                       ;; 00FD94 : 99 C4 17    ;
CODE_00FD97:          LDA.B #$10                          ;; 00FD97 : A9 10       ;
CODE_00FD99:          STA.W $17CC,Y                       ;; 00FD99 : 99 CC 17    ;
Return00FD9C:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FD9D:          .db $08,$FC,$10,$04                 ;; 00FD9D               ;
                                                          ;;                      ;
DATA_00FDA1:          .db $00,$FF,$00,$00                 ;; 00FDA1               ;
                                                          ;;                      ;
CODE_00FDA5:          LDA RAM_IsFlying                    ;; 00FDA5 : A5 72       ;
CODE_00FDA7:          BEQ CODE_00FDB3                     ;; 00FDA7 : F0 0A       ;
CODE_00FDA9:          LDY.B #$0B                          ;; 00FDA9 : A0 0B       ;
CODE_00FDAB:          LDA.W $17F0,Y                       ;; 00FDAB : B9 F0 17    ;
CODE_00FDAE:          BEQ CODE_00FDB4                     ;; 00FDAE : F0 04       ;
CODE_00FDB0:          DEY                                 ;; 00FDB0 : 88          ;
CODE_00FDB1:          BPL CODE_00FDAB                     ;; 00FDB1 : 10 F8       ;
CODE_00FDB3:          INY                                 ;; 00FDB3 : C8          ;
CODE_00FDB4:          PHX                                 ;; 00FDB4 : DA          ;
CODE_00FDB5:          LDX.B #$00                          ;; 00FDB5 : A2 00       ;
CODE_00FDB7:          LDA RAM_MarioPowerUp                ;; 00FDB7 : A5 19       ;
CODE_00FDB9:          BEQ CODE_00FDBC                     ;; 00FDB9 : F0 01       ;
CODE_00FDBB:          INX                                 ;; 00FDBB : E8          ;
CODE_00FDBC:          LDA.W RAM_OnYoshi                   ;; 00FDBC : AD 7A 18    ;
CODE_00FDBF:          BEQ CODE_00FDC3                     ;; 00FDBF : F0 02       ;
CODE_00FDC1:          INX                                 ;; 00FDC1 : E8          ;
CODE_00FDC2:          INX                                 ;; 00FDC2 : E8          ;
CODE_00FDC3:          LDA RAM_MarioYPos                   ;; 00FDC3 : A5 96       ;
CODE_00FDC5:          CLC                                 ;; 00FDC5 : 18          ;
CODE_00FDC6:          ADC.W DATA_00FD9D,X                 ;; 00FDC6 : 7D 9D FD    ;
CODE_00FDC9:          PHP                                 ;; 00FDC9 : 08          ;
CODE_00FDCA:          AND.B #$F0                          ;; 00FDCA : 29 F0       ;
CODE_00FDCC:          CLC                                 ;; 00FDCC : 18          ;
CODE_00FDCD:          ADC.B #$03                          ;; 00FDCD : 69 03       ;
CODE_00FDCF:          STA.W $17FC,Y                       ;; 00FDCF : 99 FC 17    ;
CODE_00FDD2:          LDA RAM_MarioYPosHi                 ;; 00FDD2 : A5 97       ;
CODE_00FDD4:          ADC.B #$00                          ;; 00FDD4 : 69 00       ;
CODE_00FDD6:          PLP                                 ;; 00FDD6 : 28          ;
CODE_00FDD7:          ADC.W DATA_00FDA1,X                 ;; 00FDD7 : 7D A1 FD    ;
CODE_00FDDA:          STA.W $1814,Y                       ;; 00FDDA : 99 14 18    ;
CODE_00FDDD:          PLX                                 ;; 00FDDD : FA          ;
CODE_00FDDE:          LDA RAM_MarioXPos                   ;; 00FDDE : A5 94       ;
CODE_00FDE0:          STA.W $1808,Y                       ;; 00FDE0 : 99 08 18    ;
CODE_00FDE3:          LDA RAM_MarioXPosHi                 ;; 00FDE3 : A5 95       ;
CODE_00FDE5:          STA.W $18EA,Y                       ;; 00FDE5 : 99 EA 18    ;
CODE_00FDE8:          LDA.B #$07                          ;; 00FDE8 : A9 07       ;
CODE_00FDEA:          STA.W $17F0,Y                       ;; 00FDEA : 99 F0 17    ;
CODE_00FDED:          LDA.B #$00                          ;; 00FDED : A9 00       ;
CODE_00FDEF:          STA.W $1850,Y                       ;; 00FDEF : 99 50 18    ;
CODE_00FDF2:          LDA RAM_MarioSpeedY                 ;; 00FDF2 : A5 7D       ;
CODE_00FDF4:          BMI Return00FE0D                    ;; 00FDF4 : 30 17       ;
CODE_00FDF6:          STZ RAM_MarioSpeedY                 ;; 00FDF6 : 64 7D       ;
CODE_00FDF8:          LDY RAM_IsFlying                    ;; 00FDF8 : A4 72       ;
CODE_00FDFA:          BEQ CODE_00FDFE                     ;; 00FDFA : F0 02       ;
CODE_00FDFC:          STZ RAM_MarioSpeedX                 ;; 00FDFC : 64 7B       ;
CODE_00FDFE:          LDY.B #$03                          ;; 00FDFE : A0 03       ;
CODE_00FE00:          LDA RAM_MarioPowerUp                ;; 00FE00 : A5 19       ;
CODE_00FE02:          BNE CODE_00FE05                     ;; 00FE02 : D0 01       ;
CODE_00FE04:          DEY                                 ;; 00FE04 : 88          ;
CODE_00FE05:          LDA.W RAM_ExSpriteNum,Y             ;; 00FE05 : B9 0B 17    ;
CODE_00FE08:          BEQ CODE_00FE16                     ;; 00FE08 : F0 0C       ;
CODE_00FE0A:          DEY                                 ;; 00FE0A : 88          ;
CODE_00FE0B:          BPL CODE_00FE05                     ;; 00FE0B : 10 F8       ;
Return00FE0D:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FE0E:          .db $10,$16,$13,$1C                 ;; 00FE0E               ;
                                                          ;;                      ;
DATA_00FE12:          .db $00,$04,$0A,$07                 ;; 00FE12               ;
                                                          ;;                      ;
CODE_00FE16:          LDA.B #$12                          ;; 00FE16 : A9 12       ; \ Extended sprite = Water bubble 
CODE_00FE18:          STA.W RAM_ExSpriteNum,Y             ;; 00FE18 : 99 0B 17    ; / 
CODE_00FE1B:          TYA                                 ;; 00FE1B : 98          ;
CODE_00FE1C:          ASL                                 ;; 00FE1C : 0A          ;
CODE_00FE1D:          ASL                                 ;; 00FE1D : 0A          ;
CODE_00FE1E:          ASL                                 ;; 00FE1E : 0A          ;
CODE_00FE1F:          ADC.B #$F7                          ;; 00FE1F : 69 F7       ;
CODE_00FE21:          STA.W $1765,Y                       ;; 00FE21 : 99 65 17    ;
CODE_00FE24:          LDA RAM_MarioYPos                   ;; 00FE24 : A5 96       ;
CODE_00FE26:          ADC.W DATA_00FE0E,Y                 ;; 00FE26 : 79 0E FE    ;
CODE_00FE29:          STA.W RAM_ExSpriteYLo,Y             ;; 00FE29 : 99 15 17    ;
CODE_00FE2C:          LDA RAM_MarioYPosHi                 ;; 00FE2C : A5 97       ;
CODE_00FE2E:          ADC.B #$00                          ;; 00FE2E : 69 00       ;
CODE_00FE30:          STA.W RAM_ExSpriteYHi,Y             ;; 00FE30 : 99 29 17    ;
CODE_00FE33:          LDA RAM_MarioXPos                   ;; 00FE33 : A5 94       ;
CODE_00FE35:          ADC.W DATA_00FE12,Y                 ;; 00FE35 : 79 12 FE    ;
CODE_00FE38:          STA.W RAM_ExSpriteXLo,Y             ;; 00FE38 : 99 1F 17    ;
CODE_00FE3B:          LDA RAM_MarioXPosHi                 ;; 00FE3B : A5 95       ;
CODE_00FE3D:          ADC.B #$00                          ;; 00FE3D : 69 00       ;
CODE_00FE3F:          STA.W RAM_ExSpriteXHi,Y             ;; 00FE3F : 99 33 17    ;
CODE_00FE42:          LDA.B #$00                          ;; 00FE42 : A9 00       ;
CODE_00FE44:          STA.W $176F,Y                       ;; 00FE44 : 99 6F 17    ;
CODE_00FE47:          JMP.W CODE_00FE0A                   ;; 00FE47 : 4C 0A FE    ;
                                                          ;;                      ;
CODE_00FE4A:          LDA RAM_FrameCounter                ;; 00FE4A : A5 13       ;
CODE_00FE4C:          AND.B #$03                          ;; 00FE4C : 29 03       ;
CODE_00FE4E:          ORA RAM_IsFlying                    ;; 00FE4E : 05 72       ;
CODE_00FE50:          ORA $7F                             ;; 00FE50 : 05 7F       ;
CODE_00FE52:          ORA $81                             ;; 00FE52 : 05 81       ;
CODE_00FE54:          ORA RAM_SpritesLocked               ;; 00FE54 : 05 9D       ;
CODE_00FE56:          BNE Return00FE71                    ;; 00FE56 : D0 19       ;
CODE_00FE58:          LDA RAM_ControllerA                 ;; 00FE58 : A5 15       ;
CODE_00FE5A:          AND.B #$04                          ;; 00FE5A : 29 04       ;
CODE_00FE5C:          BEQ CODE_00FE67                     ;; 00FE5C : F0 09       ;
CODE_00FE5E:          LDA RAM_MarioSpeedX                 ;; 00FE5E : A5 7B       ;
CODE_00FE60:          CLC                                 ;; 00FE60 : 18          ;
CODE_00FE61:          ADC.B #$08                          ;; 00FE61 : 69 08       ;
CODE_00FE63:          CMP.B #$10                          ;; 00FE63 : C9 10       ;
CODE_00FE65:          BCC Return00FE71                    ;; 00FE65 : 90 0A       ;
CODE_00FE67:          LDY.B #$03                          ;; 00FE67 : A0 03       ;
CODE_00FE69:          LDA.W $17C0,Y                       ;; 00FE69 : B9 C0 17    ;
CODE_00FE6C:          BEQ CODE_00FE72                     ;; 00FE6C : F0 04       ;
CODE_00FE6E:          DEY                                 ;; 00FE6E : 88          ;
CODE_00FE6F:          BNE CODE_00FE69                     ;; 00FE6F : D0 F8       ;
Return00FE71:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
CODE_00FE72:          LDA.B #$03                          ;; 00FE72 : A9 03       ;
CODE_00FE74:          STA.W $17C0,Y                       ;; 00FE74 : 99 C0 17    ;
CODE_00FE77:          LDA RAM_MarioXPos                   ;; 00FE77 : A5 94       ;
CODE_00FE79:          ADC.B #$04                          ;; 00FE79 : 69 04       ;
CODE_00FE7B:          STA.W $17C8,Y                       ;; 00FE7B : 99 C8 17    ;
CODE_00FE7E:          LDA RAM_MarioYPos                   ;; 00FE7E : A5 96       ;
CODE_00FE80:          ADC.B #$1A                          ;; 00FE80 : 69 1A       ;
CODE_00FE82:          PHX                                 ;; 00FE82 : DA          ;
CODE_00FE83:          LDX.W RAM_OnYoshi                   ;; 00FE83 : AE 7A 18    ;
CODE_00FE86:          BEQ CODE_00FE8A                     ;; 00FE86 : F0 02       ;
CODE_00FE88:          ADC.B #$10                          ;; 00FE88 : 69 10       ;
CODE_00FE8A:          STA.W $17C4,Y                       ;; 00FE8A : 99 C4 17    ;
CODE_00FE8D:          PLX                                 ;; 00FE8D : FA          ;
CODE_00FE8E:          LDA.B #$13                          ;; 00FE8E : A9 13       ;
CODE_00FE90:          STA.W $17CC,Y                       ;; 00FE90 : 99 CC 17    ;
Return00FE93:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FE94:          .db $FD,$03                         ;; 00FE94               ;
                                                          ;;                      ;
DATA_00FE96:          .db $00,$08,$F8,$10,$F8,$10         ;; 00FE96               ;
                                                          ;;                      ;
DATA_00FE9C:          .db $00,$00,$FF,$00,$FF,$00         ;; 00FE9C               ;
                                                          ;;                      ;
DATA_00FEA2:          .db $08,$08,$0C,$0C,$14,$14         ;; 00FEA2               ;
                                                          ;;                      ;
ShootFireball:        LDX.B #$09                          ;; ?QPWZ? : A2 09       ; \ Find a free fireball slot (08-09) 
CODE_00FEAA:          LDA.W RAM_ExSpriteNum,X             ;; 00FEAA : BD 0B 17    ;  | 
CODE_00FEAD:          BEQ CODE_00FEB5                     ;; 00FEAD : F0 06       ;  | 
CODE_00FEAF:          DEX                                 ;; 00FEAF : CA          ;  | 
CODE_00FEB0:          CPX.B #$07                          ;; 00FEB0 : E0 07       ;  | 
CODE_00FEB2:          BNE CODE_00FEAA                     ;; 00FEB2 : D0 F6       ;  | 
Return00FEB4:         RTS                                 ;; ?QPWZ? : 60          ; / Return if no free slots 
                                                          ;;                      ;
CODE_00FEB5:          LDA.B #$06                          ;; 00FEB5 : A9 06       ;
CODE_00FEB7:          STA.W $1DFC                         ;; 00FEB7 : 8D FC 1D    ; / Play sound effect 
CODE_00FEBA:          LDA.B #$0A                          ;; 00FEBA : A9 0A       ;
CODE_00FEBC:          STA.W RAM_FireballImgTimer          ;; 00FEBC : 8D 9C 14    ;
CODE_00FEBF:          LDA.B #$05                          ;; 00FEBF : A9 05       ; \ Extended sprite = Mario fireball 
CODE_00FEC1:          STA.W RAM_ExSpriteNum,X             ;; 00FEC1 : 9D 0B 17    ; / 
CODE_00FEC4:          LDA.B #$30                          ;; 00FEC4 : A9 30       ;
CODE_00FEC6:          STA.W RAM_ExSprSpeedY,X             ;; 00FEC6 : 9D 3D 17    ;
CODE_00FEC9:          LDY RAM_MarioDirection              ;; 00FEC9 : A4 76       ;
CODE_00FECB:          LDA.W DATA_00FE94,Y                 ;; 00FECB : B9 94 FE    ;
CODE_00FECE:          STA.W RAM_ExSprSpeedX,X             ;; 00FECE : 9D 47 17    ;
CODE_00FED1:          LDA.W RAM_OnYoshi                   ;; 00FED1 : AD 7A 18    ;
CODE_00FED4:          BEQ CODE_00FEDF                     ;; 00FED4 : F0 09       ;
ADDR_00FED6:          INY                                 ;; 00FED6 : C8          ;
ADDR_00FED7:          INY                                 ;; 00FED7 : C8          ;
ADDR_00FED8:          LDA.W $18DC                         ;; 00FED8 : AD DC 18    ;
ADDR_00FEDB:          BEQ CODE_00FEDF                     ;; 00FEDB : F0 02       ;
ADDR_00FEDD:          INY                                 ;; 00FEDD : C8          ;
ADDR_00FEDE:          INY                                 ;; 00FEDE : C8          ;
CODE_00FEDF:          LDA RAM_MarioXPos                   ;; 00FEDF : A5 94       ;
CODE_00FEE1:          CLC                                 ;; 00FEE1 : 18          ;
CODE_00FEE2:          ADC.W DATA_00FE96,Y                 ;; 00FEE2 : 79 96 FE    ;
CODE_00FEE5:          STA.W RAM_ExSpriteXLo,X             ;; 00FEE5 : 9D 1F 17    ;
CODE_00FEE8:          LDA RAM_MarioXPosHi                 ;; 00FEE8 : A5 95       ;
CODE_00FEEA:          ADC.W DATA_00FE9C,Y                 ;; 00FEEA : 79 9C FE    ;
CODE_00FEED:          STA.W RAM_ExSpriteXHi,X             ;; 00FEED : 9D 33 17    ;
CODE_00FEF0:          LDA RAM_MarioYPos                   ;; 00FEF0 : A5 96       ;
CODE_00FEF2:          CLC                                 ;; 00FEF2 : 18          ;
CODE_00FEF3:          ADC.W DATA_00FEA2,Y                 ;; 00FEF3 : 79 A2 FE    ;
CODE_00FEF6:          STA.W RAM_ExSpriteYLo,X             ;; 00FEF6 : 9D 15 17    ;
CODE_00FEF9:          LDA RAM_MarioYPosHi                 ;; 00FEF9 : A5 97       ;
CODE_00FEFB:          ADC.B #$00                          ;; 00FEFB : 69 00       ;
CODE_00FEFD:          STA.W RAM_ExSpriteYHi,X             ;; 00FEFD : 9D 29 17    ;
CODE_00FF00:          LDA.W RAM_IsBehindScenery           ;; 00FF00 : AD F9 13    ;
CODE_00FF03:          STA.W $1779,X                       ;; 00FF03 : 9D 79 17    ;
Return00FF06:         RTS                                 ;; ?QPWZ? : 60          ; Return 
                                                          ;;                      ;
ADDR_00FF07:          REP #$20                            ;; 00FF07 : C2 20       ; Accum (16 bit) 
ADDR_00FF09:          LDA.W $17BC                         ;; 00FF09 : AD BC 17    ;
ADDR_00FF0C:          AND.W #$FF00                        ;; 00FF0C : 29 00 FF    ;
ADDR_00FF0F:          BPL ADDR_00FF14                     ;; 00FF0F : 10 03       ;
ADDR_00FF11:          ORA.W #$00FF                        ;; 00FF11 : 09 FF 00    ;
ADDR_00FF14:          XBA                                 ;; 00FF14 : EB          ;
ADDR_00FF15:          CLC                                 ;; 00FF15 : 18          ;
ADDR_00FF16:          ADC RAM_MarioXPos                   ;; 00FF16 : 65 94       ;
ADDR_00FF18:          STA RAM_MarioXPos                   ;; 00FF18 : 85 94       ;
ADDR_00FF1A:          LDA.W $17BB                         ;; 00FF1A : AD BB 17    ;
ADDR_00FF1D:          AND.W #$FF00                        ;; 00FF1D : 29 00 FF    ;
ADDR_00FF20:          BPL ADDR_00FF25                     ;; 00FF20 : 10 03       ;
ADDR_00FF22:          ORA.W #$00FF                        ;; 00FF22 : 09 FF 00    ;
ADDR_00FF25:          XBA                                 ;; 00FF25 : EB          ;
ADDR_00FF26:          EOR.W #$FFFF                        ;; 00FF26 : 49 FF FF    ;
ADDR_00FF29:          INC A                               ;; 00FF29 : 1A          ;
ADDR_00FF2A:          CLC                                 ;; 00FF2A : 18          ;
ADDR_00FF2B:          ADC RAM_MarioYPos                   ;; 00FF2B : 65 96       ;
ADDR_00FF2D:          STA RAM_MarioYPos                   ;; 00FF2D : 85 96       ;
ADDR_00FF2F:          SEP #$20                            ;; 00FF2F : E2 20       ; Accum (8 bit) 
Return00FF31:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
ADDR_00FF32:          LDA.W RAM_SpriteXHi,X               ;; 00FF32 : BD E0 14    ;
ADDR_00FF35:          XBA                                 ;; 00FF35 : EB          ;
ADDR_00FF36:          LDA RAM_SpriteXLo,X                 ;; 00FF36 : B5 E4       ;
ADDR_00FF38:          REP #$20                            ;; 00FF38 : C2 20       ; Accum (16 bit) 
ADDR_00FF3A:          SEC                                 ;; 00FF3A : 38          ;
ADDR_00FF3B:          SBC RAM_ScreenBndryXLo              ;; 00FF3B : E5 1A       ;
ADDR_00FF3D:          STA $00                             ;; 00FF3D : 85 00       ;
ADDR_00FF3F:          LDA.W #$0030                        ;; 00FF3F : A9 30 00    ;
ADDR_00FF42:          SEC                                 ;; 00FF42 : 38          ;
ADDR_00FF43:          SBC $00                             ;; 00FF43 : E5 00       ;
ADDR_00FF45:          STA $22                             ;; 00FF45 : 85 22       ;
ADDR_00FF47:          SEP #$20                            ;; 00FF47 : E2 20       ; Accum (8 bit) 
ADDR_00FF49:          LDA.W RAM_SpriteYHi,X               ;; 00FF49 : BD D4 14    ;
ADDR_00FF4C:          XBA                                 ;; 00FF4C : EB          ;
ADDR_00FF4D:          LDA RAM_SpriteYLo,X                 ;; 00FF4D : B5 D8       ;
ADDR_00FF4F:          REP #$20                            ;; 00FF4F : C2 20       ; Accum (16 bit) 
ADDR_00FF51:          SEC                                 ;; 00FF51 : 38          ;
ADDR_00FF52:          SBC RAM_ScreenBndryYLo              ;; 00FF52 : E5 1C       ;
ADDR_00FF54:          STA $00                             ;; 00FF54 : 85 00       ;
ADDR_00FF56:          LDA.W #$0100                        ;; 00FF56 : A9 00 01    ;
ADDR_00FF59:          SEC                                 ;; 00FF59 : 38          ;
ADDR_00FF5A:          SBC $00                             ;; 00FF5A : E5 00       ;
ADDR_00FF5C:          STA $24                             ;; 00FF5C : 85 24       ;
ADDR_00FF5E:          SEP #$20                            ;; 00FF5E : E2 20       ; Accum (8 bit) 
Return00FF60:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
CODE_00FF61:          LDA.W RAM_SpriteXHi,X               ;; 00FF61 : BD E0 14    ;
CODE_00FF64:          XBA                                 ;; 00FF64 : EB          ;
CODE_00FF65:          LDA RAM_SpriteXLo,X                 ;; 00FF65 : B5 E4       ;
CODE_00FF67:          REP #$20                            ;; 00FF67 : C2 20       ; Accum (16 bit) 
CODE_00FF69:          CMP.W #$FF00                        ;; 00FF69 : C9 00 FF    ;
CODE_00FF6C:          BMI CODE_00FF73                     ;; 00FF6C : 30 05       ;
CODE_00FF6E:          CMP.W #$0100                        ;; 00FF6E : C9 00 01    ;
CODE_00FF71:          BMI CODE_00FF76                     ;; 00FF71 : 30 03       ;
CODE_00FF73:          LDA.W #$0100                        ;; 00FF73 : A9 00 01    ;
CODE_00FF76:          STA $22                             ;; 00FF76 : 85 22       ;
CODE_00FF78:          SEP #$20                            ;; 00FF78 : E2 20       ; Accum (8 bit) 
CODE_00FF7A:          LDA.W RAM_SpriteYHi,X               ;; 00FF7A : BD D4 14    ;
CODE_00FF7D:          XBA                                 ;; 00FF7D : EB          ;
CODE_00FF7E:          LDA RAM_SpriteYLo,X                 ;; 00FF7E : B5 D8       ;
CODE_00FF80:          REP #$20                            ;; 00FF80 : C2 20       ; Accum (16 bit) 
CODE_00FF82:          STA $00                             ;; 00FF82 : 85 00       ;
CODE_00FF84:          LDA.W #$00A0                        ;; 00FF84 : A9 A0 00    ;
CODE_00FF87:          SEC                                 ;; 00FF87 : 38          ;
CODE_00FF88:          SBC $00                             ;; 00FF88 : E5 00       ;
CODE_00FF8A:          CLC                                 ;; 00FF8A : 18          ;
CODE_00FF8B:          ADC.W RAM_Layer1DispYLo             ;; 00FF8B : 6D 88 18    ;
CODE_00FF8E:          STA $24                             ;; 00FF8E : 85 24       ;
CODE_00FF90:          SEP #$20                            ;; 00FF90 : E2 20       ; Accum (8 bit) 
Return00FF92:         RTL                                 ;; ?QPWZ? : 6B          ; Return 
                                                          ;;                      ;
                                                          ;;                      ;
DATA_00FF93:          .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; 00FF93               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$FF,$FF,$FF,$FF,$53,$55,$50 ;; ?QPWZ?               ;
                      .db $45,$52,$20,$4D,$41,$52,$49,$4F ;; ?QPWZ?               ;
                      .db $57,$4F,$52,$4C,$44,$20,$20,$20 ;; ?QPWZ?               ;
                      .db $20,$20,$20,$02,$09,$01,$01,$01 ;; ?QPWZ?               ;
                      .db $00,$25,$5F,$DA,$A0,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$C3,$82,$FF,$FF,$C3,$82,$6A ;; ?QPWZ?               ;
                      .db $81,$00,$80,$74,$83,$FF,$FF,$FF ;; ?QPWZ?               ;
                      .db $FF,$C3,$82,$C3,$82,$C3,$82,$C3 ;; ?QPWZ?               ;
                      .db $82,$00,$80,$C3,$82             ;; ?QPWZ?               ;
